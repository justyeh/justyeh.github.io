-- MySQL dump 10.13  Distrib 5.1.73, for redhat-linux-gnu (x86_64)
--
-- Host: localhost    Database: justyeh
-- ------------------------------------------------------
-- Server version	5.1.73

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `post_id` int(8) NOT NULL COMMENT '文章id',
  `name` varchar(50) DEFAULT NULL COMMENT '姓名',
  `contacts` varchar(50) DEFAULT NULL COMMENT '联系方式',
  `content` varchar(1000) DEFAULT NULL COMMENT '评论内容',
  `updated_at` varchar(100) DEFAULT NULL COMMENT '密码',
  `is_read` int(1) DEFAULT '0' COMMENT '是否阅读（0未读，1已读）',
  `is_show` int(1) DEFAULT '1' COMMENT '是否显示（0影藏，1显示）',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2876 DEFAULT CHARSET=utf8 COMMENT='文章评论表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (74,29,'yeh',NULL,'请勿恶意评论！','1548400675659',1,1),(77,29,'狗尾草',NULL,'谢谢你曾经给我回复的邮件，给了个很大的帮助了。谢谢','1548831881777',1,1),(79,18,'电风扇大师傅',NULL,'幅度萨芬士大夫','1551002881453',1,0),(81,18,'<script>alert(1)</script>',NULL,'</div><script>alert(1)</script><div>','1551002949012',1,1),(82,29,'康勇',NULL,'你好 现在也遇到了服务端部署问题，问下如果是Linux系统的服务端是需要安装nginx进行代理吗','1552901397594',1,1),(84,37,'xiaoluo',NULL,'不错','1553302374342',1,1),(90,37,'hack',NULL,'想写这个文章很久了， 本来以为就我有这个问题，结果看到网站上也有很多人在用这个属性，我用safari试了下，都能触发不能滑动的问题，但是网上的文章又很少，不知道大家是不是就视而不见了。\n\n所以目前来看','1553302455759',1,1),(111,37,'ertyui',NULL,'偶尔卡住的问题，解决方案网上众说纷纭，遇到了很多相同的说法，比如如果卡住不动的话，就加一个z-index，就能解决该问题的说法。\n\n在试了很多次之后，这种说法没有一次解决过这个问题。这个说法能够传播出','1553302520251',1,1),(130,37,'dew',NULL,'. 探究-webkit-overflow-scrolling:touch偶尔卡住或不能滑动的bug\n-webkit-overflow-scrolling:touch这个属性真的是各种坑，我研究这个属性','1553302765851',1,1),(1390,36,'不必知道我是谁',NULL,'#####################^_^^_^^_^^_^^_^^_^^_^^_^^_^^_^^_^^_^^_^^_^^_^################&&&&&&&&&','1553304484284',1,1),(2690,37,'lucy',NULL,'毕竟移动端的水太深了，你永远不知道下一个问题是发生在safari还是x5内核浏览器上。','1553389151640',1,1),(2862,37,'tom',NULL,'这评论有漏洞','1553389306214',1,1),(2872,37,'阮一峰','110','太好了','1555593750341',1,1),(2873,37,'dww','123','dewwed','1555593848199',1,1),(2874,37,'wed','rfrf','wdwe','1555593859944',1,1),(2875,37,'wedew','rfrf','1233','1555593865999',1,1);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) DEFAULT NULL COMMENT '标题',
  `poster` varchar(100) DEFAULT NULL COMMENT '海报图片',
  `summary` text COMMENT '摘要',
  `markdown` text COMMENT 'markdown文本',
  `status` varchar(20) DEFAULT 'draft' COMMENT '状态（draft草稿，published已发布，offline下线）',
  `allow_comment` int(1) DEFAULT '1' COMMENT '是否允许评论（1允许，0禁止）',
  `updated_at` bigint(20) DEFAULT NULL COMMENT '修改时间（删除）',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8 COMMENT='叶文祥的前端博客：文章表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post`
--

LOCK TABLES `post` WRITE;
/*!40000 ALTER TABLE `post` DISABLE KEYS */;
INSERT INTO `post` VALUES (1,'sublime text备忘录','/blogs/sublime/sublime-banner.jpg','Sublime Text是一款支持代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制，非常值得推荐，下文总结了我使用sublime时经常需要解决的问题，用以备忘。','>Sublime Text是一款支持代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制，非常值得推荐，下文总结了我使用sublime时经常需要解决的问题，用以备忘。\n\n#### eclipse快捷键\n\n我早前写过java，所以对eclipse的快捷键比较熟悉，Preferences -> Key bindings - User，将下面的代码写入即可：\n\n```\n[  \n { \"keys\": [\"shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Add Line.sublime-macro\"} },  \n { \"keys\": [\"alt+up\"], \"command\": \"swap_line_up\" },  \n { \"keys\": [\"alt+down\"], \"command\": \"swap_line_down\" },  \n { \"keys\": [\"ctrl+alt+j\"], \"command\": \"join_lines\" },  \n { \"keys\": [\"ctrl+alt+down\"], \"command\": \"duplicate_line\" },  \n { \"keys\": [\"shift+ctrl+r\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"show_files\": true} },  \n { \"keys\": [\"ctrl+shift+s\"], \"command\": \"save_all\" },  \n { \"keys\": [\"ctrl+l\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \":\"} },  \n { \"keys\": [\"shift+ctrl+f4\"], \"command\": \"close_all\" },  \n { \"keys\": [\"shift+ctrl+y\"], \"command\": \"lower_case\" },  \n { \"keys\": [\"shift+ctrl+x\"], \"command\": \"upper_case\" },  \n { \"keys\": [\"ctrl+d\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Delete Line.sublime-macro\"} }  \n]  \n```\n\n#### 添加到右键菜单\n\n将下面代码，复制到SublimeText3的安装目录，然后重命名为：`sublime_addright.reg`，然后双击即可。\n\n注意：\n\n1. 下面的目录仅是一个示例，请将目录替换为你的安装目录。\n2. 如果你的右键菜单显示乱码，请将 `sublime_addright.reg` 保存为ANSI编码，再依次执行`sublime_delright.reg`、`sublime_addright.reg`脚本文件即可。\n\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]\n@=\"用 SublimeText3 打开\"\n\"Icon\"=\"D:\\\\program\\\\Sublime Text 3\\\\sublime_text.exe,0\"\n\n[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3\\command]\n@=\"D:\\\\program\\\\Sublime Text 3\\\\sublime_text.exe %1\"\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]\n@=\"用 SublimeText3 打开\"\n\"Icon\"=\"D:\\\\program\\\\Sublime Text 3\\\\sublime_text.exe,0\"\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3\\command]\n@=\"D:\\\\program\\\\Sublime Text 3\\\\sublime_text.exe %1\"\n```\n\n下面的是删除右键菜单的代码，复制到SublimeText3的安装目录，然后重命名为：sublime_delright.reg，双击运行就可以了。\n\n```\nWindows Registry Editor Version 5.00\n[-HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]\n[-HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]\n```\n\n#### 插件\n\n**Emmet**\n\n以前的zenCoding，是一种快速的html、css编写方式，默认用tab键。\n\n**ChineseLocalizations**\n\n汉化插件，支持简体中文、繁体中文、日本語。\n\n**ColorPicker**\n\n一个颜色选择器插件，快捷键`Ctrl / Cmd + Shift + C`。\n\n**Bracket Highlighter**\n\n用于匹配括号，引号和html标，对于长代码很有用。\n\n**Better Completion**\n\n地址：[https://github.com/Pleasurazy/Sublime-Better-Completion](https://github.com/Pleasurazy/Sublime-Better-Completion)\n\n支持Javascript、JQuery、Twitter Bootstrap框架、HTML5标签属性提示的插件，是少数支持sublime text 3的后缀提示的插件，HTML5标签提示sublime text 3自带，不过JQuery提示还是很有用处的，也可设置要提示的语言。\n\n安装后将下面的代码粘贴到`Package Setting>Sublime Better Completion Setting User`内，可以自定义选择：false为不启用，true为启用（默认全部为false）。\n```\n{  \n  // --------------------  \n  // sublime-better-completions-Package (sbc package)  \n  // --------------------  \n  // API files is contains the *keyword* such as `html`, `jquery`, `myglossary` with lowercase as filename `sbc-api-${filename}.sublime-settings` place in `/packages/User/` (your own) or `/packages/${this-package}/sublime-completions/` (package build-in).  \n  // After you enable, disable or added new your own completions, you might need restart your Sublime Text Editor.  \n  //  \n  // Your own setting file `sbc-setting.sublime-settings` need to place in `/packages/User/` and contains all your api setting property that you want to enable.  \n  //  \n  // --------------------  \n  // APIs Setup  \n  // --------------------  \n  // `true` means enable it.  \n  // `false` means disable it.  \n  \"completion_active_list\": {  \n    // build-in completions  \n    \"css-properties\": true,  \n    \"gruntjs-plugins\": true,  \n    \"html\": false,  \n    \"lodash\": true,  \n    \"javascript\": true,  \n    \"jquery\": true,  \n    \"jquery-sq\": true, // Single Quote  \n    \"php\": true,  \n    \"phpci\": true,  \n    \"sql\": true,  \n    \"twitter-bootstrap\": true,  \n    \"twitter-bootstrap-less-variables\": true,  \n    \"twitter-bootstrap3\": true,  \n    \"underscorejs\": true,  \n    \"react\": true,  \n  \n    // Your own completions?  \n    // ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User/sbc-api-my-angularjs.sublime-settings  \n    \"my-angularjs\": true,  \n  \n    // ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User/sbc-api-my-glossary.sublime-settings  \n    \"my-glossary\": true,  \n  \n    // ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User/sbc-api-my-html.sublime-settings  \n    \"my-html\": true,  \n  \n    // ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User/sbc-api-my-javascript.sublime-settings  \n    \"my-javascript\": false  \n  }  \n}  \n```\n\n**AutoFileName**\n\n快速列出你想引用的文件夹里面所有文件的名字，比如想引用`test/img/1.png`。只需要输入`/img`,该插件就会自动提示/img下面的所有文件名。\n\n**HTML-CSS-JS Prettify**\n\n代码格式化插件，需要node支持，所以安装后可能需要设置一下node的目录，默认快捷键`ctrl + shift + h`。\n\n**SideBarEnhancements**\n\n本是增强侧边栏的插件，这里将教大家如何用来做sublime text 3浏览器预览插件，并可自定义浏览器预览的快捷键，安装此插件，点击工具栏的`preferences > package setting > side bar > Key Building-User`，粘贴下面的代码。按F1~F2分别在firefox，chrome浏览器预览效果，当然你也可以自己定义喜欢的快捷键，最后注意代码中的浏览器路径要以自己电脑里的文件路径为准。\n\n```\n[   \n    //firefox  \n    { \"keys\": [\"f1\"], \"command\": \"side_bar_files_open_with\",  \n             \"args\": {  \n                \"paths\": [],  \n                \"application\": \"C:\\\\Browser\\\\Mozilla Firefox\\\\firefox.exe\",  \n                \"extensions\":\".*\" //匹配任何文件类型  \n            }  \n    },  \n    //chrome  \n    { \"keys\": [\"f2\"], \"command\": \"side_bar_files_open_with\",  \n            \"args\": {  \n                \"paths\": [],  \n                \"application\": \"C:\\\\Users\\\\yeh\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",  \n                \"extensions\":\".*\"  \n            }  \n     }\n]  \n```\n\n**Vue Syntax Highlight**\n\n支持Vue(*.vue)高亮；\n\n**Markdown Editing**\n\n用于Markdown的编辑。\n\n**Markdown Preview**\n\n输入`Shift + Ctrl + P`，输入`Markdown Preview`,支持在预览和保存。','published',1,1498295092785),(2,'Ghost博客在windows下的搭建过程','/blogs/ghost/logo.jpg','本文详细介绍了在windows环境下搭建Ghost博客的详细过程，按照提供的步骤你也可以搭建属于自己的blog！','>今晚通宵加班，干点私活，把自己的个人博客搭好了，写一下过程，大家可以参考一下！\n过程比较新手向，所以可能比较啰嗦，请大家不要介意！\n\n##### 域名\n万网买的不多说，[https://wanwang.aliyun.com/](https://wanwang.aliyun.com/)\n\n##### 主机 \nvultr服务器，选了乞丐版（土豪随意），37一个月，速度还可以，顺便可以搭个VPN，美滋滋，感兴趣的可以参考这个[链接](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.Hti4Lg&id=522935903991&_u=u117onlnf6c2)\n\n##### 关于Ghost\n基于 Node.js 的开源博客平台，简单易用，支持MarkDown语法+在线预览，更多细节请移步[Ghost中文网](http://www.ghostchina.com/)\n\n#### 以上都是废话，干货在下面\n\n##### 环境\n由于当时在Linux上搭建VPN一直不成功，所以就转投到了Windows Server，所以以下的所有操作都是基于Windows平台下的\n\n##### 安装Node.js\nGhost将Node.js v4 LTS 成为 Ghost 推荐版本，所以下载的是 [ 4.2.0](https://nodejs.org/dist/v4.2.0/) 版本，安装很简单，直接下一步就好\n\n##### 安装Ghost\n推荐在Ghost中文网下载[中文集成版本](http://www.ghostchina.com/download/)，此版本已经集成好了node_modules，省却了许多麻烦\n\n* 打开node控制台，进入到ghost所在目录 `cd Downloads/ghost-#.#.#`\n* 在命令行中执行 `npm install --production` 命令，这一步时最好打个梯子，有时npm会出现下载不完全的问题，各种坑\n* 当 npm 安装成功后，输入 `npm start` 启动开发模式下的 Ghost\n* 在浏览器中，访问 `127.0.0.1:2368` 即可查看最新搭建的 Ghost 博客\n\n##### Ghost的配置\n这里面，邮件的配置比较麻烦，我也是在网上找的，我使用的是163邮箱，如果你使用的是其他产品，就需要自行搜索配置方法了，以下是我的配置文件：\n```\nvar path = require(\'path\'),\n    config;\nconfig = {\n    // ### Production\n    production: {\n        url: \'http://justyeh.com\',\n        mail: {\n            transport: \'SMTP\',\n            options: {\n                service: \'Mailgun\',\n                port: 25,\n                host: \'smtp.163.com\',\n                auth: {\n                    user: \'justyeh@163.com\', // 邮件账户\n                    pass: \'******\'  // 邮件密码\n                }\n            }\n        },\n        database: {\n            client: \'sqlite3\',\n            connection: {\n                filename: path.join(__dirname, \'/content/data/ghost.db\')\n            },\n            debug: false\n        },\n\n        // 配置MySQL 数据库\n        /*database: {\n            client: \'mysql\',\n            connection: {\n                host     : \'host\',\n                user     : \'user\',\n                password : \'password\',\n                database : \'database\',\n                charset  : \'utf8\'\n            },\n            debug: false\n        },*/\n        server: {\n            host: \'127.0.0.1\',\n            port: \'2368\'\n        },\n        //Storage.Now,we can support `qiniu`,`upyun`, `aliyun oss`, `aliyun ace-storage` and `local-file-store`\n        storage: {\n            provider: \'local-file-store\'\n        }\n    },\n    \n    // ### Development **(default)**\n    development: {\n        // The url to use when providing links to the site, E.g. in RSS and email.\n        // Change this to your Ghost blog\'s published URL.\n        url: \'http://localhost:2368\',\n        // #### Database\n        // Ghost supports sqlite3 (default), MySQL & PostgreSQL\n        database: {\n            client: \'sqlite3\',\n            connection: {\n                filename: path.join(__dirname, \'/content/data/ghost-dev.db\')\n            },\n            debug: false\n        },\n        // #### Server\n        // Can be host & port (default), or socket\n        server: {\n            // Host to be passed to node\'s `net.Server#listen()`\n            host: \'127.0.0.1\',\n            // Port to be passed to node\'s `net.Server#listen()`, for iisnode set this to `process.env.PORT`\n            port: \'2368\'\n        },\n        // #### Paths\n        // Specify where your content directory lives\n        paths: {\n            contentPath: path.join(__dirname, \'/content/\')\n        }\n    },\n\n    // **Developers only need to edit below here**\n    // ### Testing\n    // Used when developing Ghost to run tests and check the health of Ghost\n    // Uses a different port number\n    testing: {\n        url: \'http://127.0.0.1:2369\',\n        database: {\n            client: \'sqlite3\',\n            connection: {\n                filename: path.join(__dirname, \'/content/data/ghost-test.db\')\n            }\n        },\n        server: {\n            host: \'127.0.0.1\',\n            port: \'2369\'\n        },\n        logging: false\n    },\n\n    // ### Testing MySQL\n    // Used by Travis - Automated testing run through GitHub\n    \'testing-mysql\': {\n        url: \'http://127.0.0.1:2369\',\n        database: {\n            client: \'mysql\',\n            connection: {\n                host: \'127.0.0.1\',\n                user: \'root\',\n                password: \'\',\n                database: \'ghost_testing\',\n                charset: \'utf8\'\n            }\n        },\n        server: {\n            host: \'127.0.0.1\',\n            port: \'2369\'\n        },\n        logging: false\n    },\n\n    // ### Testing pg\n    // Used by Travis - Automated testing run through GitHub\n    \'testing-pg\': {\n        url: \'http://127.0.0.1:2369\',\n        database: {\n            client: \'pg\',\n            connection: {\n                host: \'127.0.0.1\',\n                user: \'postgres\',\n                password: \'\',\n                database: \'ghost_testing\',\n                charset: \'utf8\'\n            }\n        },\n        server: {\n            host: \'127.0.0.1\',\n            port: \'2369\'\n        },\n        logging: false\n    }\n};\nmodule.exports = config;\n```\n\n##### 安装Nginx\n我使用的是[1.8.1版本](http://nginx.org/en/download.html)，解压后修改配置文件\n\n```\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\nlisten 80;\nserver_name justyeh.com www.justyeh.com;\nlocation / {\nproxy_set_header   X-Real-IP $remote_addr;\nproxy_set_header   Host      $http_host;\nproxy_pass         http://127.0.0.1:2368;\n}\n}\n}\n```\n稍微解释一下，`listen` 代表监听80端口，`server_name ` 是你的网站，`proxy_pass` 代表转发，将 `justyeh.com` 的请求转发到 `http://127.0.0.1:2368`\n\n之后右键 nginx.exe 以管理员身份运行nginx程序便可启动服务器\n\n\n##### 解析\n这个没什么好说的，百度一下应该就有了，在阿里云解析上也有教程！\n如果前面的步骤都没有出问题，解析完成之后就可以通过你的域名访问你的博客网站了。至此，大功告成！\n','published',1,1499656248239),(4,'HTML5常用meta标签整理','/blogs/html5-meta/poster.jpg','meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务；\nhtml的meta标签描述的头部信息特别多，想记住也不容易，下面这篇文章就对这些标签经行了一个整理！','>meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务；\nhtml的meta标签描述的头部信息特别多，想记住也不容易，下面这篇文章就对这些标签经行了一个整理！\n\n当然，如果你觉得下面的内容麻烦的话，我整理了一份，你可以直接访问这个链接：[常用meta模板页](https://github.com/justyeh/tool/blob/master/%E5%B8%B8%E7%94%A8meta%E6%A8%A1%E6%9D%BF/meta.html)\n\n\n###### 声明文档使用的字符编码\n```\n<meta charset=\'utf-8\'>\n```\n\n###### 声明文档的兼容模式\n```\n<!-- 启用360浏览器的极速模式(webkit) -->\n<meta name=\"renderer\" content=\"webkit\">\n<!-- 避免IE使用兼容模式 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n```\n\n###### 设置页面viewport\n```\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" />\n//width    设置viewport宽度，为一个正整数，或字符串‘device-width’\n//height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置\n//initial-scale    默认缩放比例，为一个数字，可以带小数\n//minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数\n//maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数\n//user-scalable    是否允许手动缩放\n```\n\n###### SEO相关\n```\n<!-- 页面描述 -->\n<meta name=\"description\" content=\"不超过150个字符\" />\n<!-- 页面关键词 -->\n<meta name=\"keywords\" content=\"\" />\n<!-- 网页作者 -->\n<meta name=\"author\" content=\"name, email@gmail.com\" />\n<!-- 搜索引擎抓取 -->\n<meta name=\"robots\" content=\"index,follow\" />\n```\n\n###### 移动端属性\n```\n<!-- 禁止自动自动识别 Email -->\n<meta name=\"format-detection\" content=\"email=no\">\n<!-- 禁止数字识自动别为电话号码 -->\n<meta name=\"format-detection\" content=\"telephone=no\">\n<!-- 禁止自动自动识别日期 -->\n<meta name=\"format-detection\" content=\"date=no\">\n```\n\n###### WebAPP全屏\n```\n<!-- 是否启用 WebApp 全屏模式 -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） -->\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n<!-- 设置苹果工具栏颜色 -->\n\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n<!-- UC强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n\n<!-- Chrome选项卡颜色 -->\n<meta name=\"theme-color\" content=\"#db5945\">\n```\n\n##### 其他\n```\n<!-- 百度禁止转码 -->\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n<!-- 添加 favicon icon -->\n<link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\" />\n<!-- 添加 RSS 订阅 -->\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\" /> \n```','published',1,1499662465621),(5,'常用正则验证大全','/blogs/regular-expression/regex.jpg','各种正则表达式整理，包括邮箱、手机号、密码、汉字等常用校验','>都知道正则表达式很重要，然而代码写这么久了，还是不会写（\'_\'），其实也怪自己没有去学过，好记性比不上烂笔头，在这里整理一下，以备不时之需。\r\n\r\n\r\n* 数字\r\n```\r\n/^\\d+(\\.\\d+)?$/\r\n```\r\n\r\n* 正整数\r\n```\r\n/^[1-9]\\d*$/\r\n```\r\n\r\n* 非空\r\n```\r\n^\\s*$\r\n```\r\n* 数字\r\n```\r\n^[0-9]*$\r\n```\r\n\r\n* 邮编\r\n```\r\n^[1-9][0-9]{5}$\r\n```\r\n\r\n* 邮箱\r\n```\r\n^[\\w\\-\\.]+@[\\w\\-\\.]+(\\.\\w+)+$\r\n```\r\n\r\n* 手机\r\n```\r\n^13[0-9]{1}[0-9]{8}$|15[0-9]{1}[0-9]{8}$|18[0-9]{1}[0-9]{8}$|17[0-9]{1}[0-9]{8}$\r\n```\r\n\r\n* 密码\r\n```\r\n/^.[a-zA-Z]\\w{m,n}$/\r\n//匹配英文字符开头的m-n位字符且只能数字字母或下划线\r\n```\r\n\r\n\r\n* min到max个数字\r\n```\r\n^\\d{m,n}$ 例如^\\d{7,8}$\r\n//匹配min到max个数字\r\n```\r\n\r\n* 网址（带?id=中文）\r\n```\r\n/^http:\\/\\/([\\w-]+(\\.[\\w-]+)+(\\/[\\w-.\\/\\?%&=\\u4e00-\\u9fa5]*)?)?$/\r\n```\r\n\r\n\r\n* 英文字符\r\n```\r\n^.[A-Za-z]+$\r\n//匹配英文字符，大小写任意\r\n```\r\n\r\n* 汉字\r\n```\r\n^[\\u4e00-\\u9fa5]{0,}$\r\n```\r\n\r\n* IP地址\r\n```\r\n/^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$/\r\n```\r\n\r\n* 验证身份证号\r\n```\r\n/^[1-9]([0-9]{16}|[0-9]{13})[xX0-9]$/\r\n//粗验，最好服务器端调类库再细验证\r\n```\r\n\r\n','published',1,1551925738301),(6,'微信小程序开发之初识小程序','/blogs/wechat-app/bg-weixin.jpg','微信小程序开发的介绍，通过这篇文章你可以了解开发一个微信小程序的基本要求与流程','>今天接到个任务，公司有部门需要做一个微信小程序，正好接触一下新东西，就来记录一下学习的收获。\n\n#### 准备\n\n##### 前端知识\n\n你需要了解基本的前端知识，包括js、css、html，如果你对这些还不熟悉，可以到[w3cschool](http://www.w3school.com.cn/)上进行学习\n\n##### IDE搭建\n\n微信官方为我们提供了[开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)，直接下载安装就好了；如果你需要其他选择，网上有一篇[5款微信小程序开发对比](http://www.ashan.org/archives/934)的文章，你也可以看一下，在本篇文章中，我使用的是官方提供的开发者工具。\n![微信小程序开发者工具](/blogs/wechat-app/WeChatIDE.png)\n\n#### 了解小程序\n\n##### 小程序的文件类型\n\n小程序有以下几种文件类型\n\n* js ---------- JavaScrip文件\n* wxss ------- 类似CSS文件\n* wxml ------- 类似HTML文件\n* json -------- 项目配置文件，负责窗口颜色等等\n\n在程序的根目录用app来命名的这四中类型的文件，就是程序入口文件。\n\n**app.json**\n\n必须要有这个文件，如果没有这个文件，IDE会报错，因为微信框架把这个作为配置文件入口，你只需创建这个文件，里面写个大括号就行；在这里对整个小程序的全局配置。记录了页面组成，配置小程序的窗口 背景色，配置导航条样式，配置默认标题。\n\n**app.js**\n\n必须要有这个文件，没有也是会报错！但是这个文件创建一下就行 什么都不需要写\n以后我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。\n\n**app.wxss**\n\n这个文件不是必须的。因为它只是个全局CSS样式文件。\n\n**app.wxml**\n\n这个也不是必须的，而且这个并不是指主界面哦~因为小程序的主页面是靠在JSON文件中配置来决定的\njs文件。\n\n有了以上两个必须的文件，IDE就不会报错了，也意味着这是最简单的微信小程序\n![文件类型](/blogs/wechat-app/WeChatIDE3.png)\n\n#### 开始\n\n##### 配置app\n`app.json`是文件小程序的配置文件；\n![](/blogs/wechat-app/appjson.png)\n```\n{\n  \"pages\":[\n    \"pages/index/index\",\n    \"pages/logs/logs\"\n  ],\n  \"tabBar\": {\n    \"color\": \"#dddddd\",\n    \"selectedColor\": \"#d92121\",\n    \"borderStyle\": \"white\",\n    \"backgroundColor\": \"#fff\",\n    \"list\": [{\n      \"pagePath\": \"pages/index\",\n      \"iconPath\": \"images/main.png\",\n      \"selectedIconPath\": \"images/main-s.png\",\n      \"text\": \"新闻\"\n    },{\n      \"pagePath\": \"pages/layout/hot\",\n      \"iconPath\": \"images/hot.png\",\n      \"selectedIconPath\": \"images/hot-s.png\",\n      \"text\": \"图片\"\n    }]\n  },\n  \"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#fff\",\n    \"navigationBarTitleText\": \"WeChat\",\n    \"navigationBarTextStyle\":\"black\"\n  }\n}\n```\n\n\n##### 注册程序\n\n在`app.js`中，App()函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。\n```\n//app.js\nApp({\n  onLaunch: function () {\n    //调用API从本地缓存中获取数据\n    var logs = wx.getStorageSync(\'logs\') || []\n    logs.unshift(Date.now())\n    wx.setStorageSync(\'logs\', logs)\n  },\n  getUserInfo:function(cb){\n    var that = this\n    if(this.globalData.userInfo){\n      typeof cb == \"function\" && cb(this.globalData.userInfo)\n    }else{\n      //调用登录接口\n      wx.login({\n        success: function () {\n          wx.getUserInfo({\n            success: function (res) {\n              that.globalData.userInfo = res.userInfo\n              typeof cb == \"function\" && cb(that.globalData.userInfo)\n            }\n          })\n        }\n      })\n    }\n  },\n  globalData:{\n    userInfo:null\n  }\n})\n```\napp()函数具体API解释如下:\n![app方法 API](/blogs/wechat-app/app-func.png)\n\n##### 注册页面\n在开发者工具提供的demo中，有两个页面，可以通过`Page()` 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。\n```\n//index.js\n//获取应用实例\nvar app = getApp()\nPage({\n  data: {\n    motto: \'Hello World\',\n    userInfo: {}\n  },\n  //事件处理函数\n  bindViewTap: function() {\n    wx.navigateTo({\n      url: \'../logs/logs\'\n    })\n  },\n  onLoad: function () {\n    console.log(\'onLoad\')\n    var that = this\n    //调用应用实例的方法获取全局数据\n    app.getUserInfo(function(userInfo){\n      //更新数据\n      that.setData({\n        userInfo:userInfo\n      })\n    })\n  }\n})\n```\npage()函数具体API解释如下:\n![page方法 API](/blogs/wechat-app/page-func.png)\n\n##### 美化页面\n美化页面我们用到了 `wxml` 和 `wxss`文件。\n\n这是`wxss`代码：\n```\n/**app.wxss**/\n.container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  padding: 200rpx 0;\n  box-sizing: border-box;\n} \n```\n这是`wxml`代码：\n```\n<!--index.wxml-->\n<view class=\"container\">\n  <view  bindtap=\"bindViewTap\" class=\"userinfo\">\n    <image class=\"userinfo-avatar\" src=\"{{userInfo.avatarUrl}}\" background-size=\"cover\"></image>\n    <text class=\"userinfo-nickname\">{{userInfo.nickName}}</text>\n  </view>\n  <view class=\"usermotto\">\n    <text class=\"user-motto\">{{motto}}</text>\n  </view>\n</view>\n```\n如果你对css、js有基本的了解，这两个文件都不在话下。\n\n##### 事件绑定\n事件列表\n![](/blogs/wechat-app/event.png)\n事件绑定的写法同组件的属性，以 key、value 的形式\n\n* key 以bind或catch开头，然后跟上事件的类型，如bindtap, catchtouchstart\n* value 是一个字符串，需要在对应的 Page 中定义同名的函数。不然当触发事件的时候会报错。\n\n注意：`bind`事件绑定不会阻止冒泡事件向上冒泡，`catch`事件绑定可以阻止冒泡事件向上冒泡\n\n冒泡事件就是需要向父节点传递这个事件\n','published',1,1498315782890),(7,'Git的使用','/blogs/git/git.jpg','介绍了Git的用法和各种常见命令','>最近开始由SVN阵营投向了git，这篇博客记录了我学习使用git的经验\n\n#### 安装git\nMac和Linux上通常会预装Git，运行：\n\n```\ngit --version\n```\n\n该命令会输出您计算机上所安装的Git版本号。如果没有得到版本号信息，则您需要安装git，下面是一些工具：\n\n* Windows：[git for windows](https://git-for-windows.github.io/)\n* Linux:[Linux Terminal](http://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/)\n* Mac OS: [Terminal](http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line)\n\n我使用的是Windows操作系统，并且使用的是阿里云的git平台，所以下面的内容都是基于以上条件的；\n\n#### 添加SSH Key\n\nSSH key 可以让你在你的电脑和Code服务器之间建立安全的加密连接。\n\n为什么需要SSH Key呢？因为远程服务器需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，远程服务器只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n以阿里云Code平台为例，在阿里云上，您需要使用`SSH Keys`来连接您的计算机和阿里云Code账号。与您的阿里云Code账号关联的每台计算机都需要一个不同的Key。\n\n **先执行以下语句来判断是否已经存在本地公钥**\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n\n如果你看到一长串以 ssh-rsa或 ssh-dsa开头的字符串, 你可以跳过`ssh-keygen`的步骤。\n\n提示: 最好的情况是一个密码对应一个ssh key，但是那不是必须的。你可以一路回车，使用默认值即可。请记住设置的密码并不能被修改或获取。\n\n**你可以按如下命令来生成ssh key**\n\n```\nssh-keygen -t rsa -C \"justyeh@163.com\"\n```\n\n这个指令会要求你提供一个位置和文件名去存放键值对和密码，你可以点击`Enter`键去使用默认值。\n\n**用以下命令获取你生成的公钥**\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n\n复制这个公钥放到你的个人设置中的SSH/My SSH Keys下，请完整拷贝从`ssh-`开始直到你的用户名和主机名为止的内容。\n\n如果打算拷贝你的公钥到你的粘贴板下，请参考你的操作系统使用以下的命令：\n\nWindows:\n\n```\nclip < ~/.ssh/id_rsa.pub\n```\n\nMac:\n\n```\npbcopy < ~/.ssh/id_rsa.pub\n```\n\nGNU/Linux (requires xclip):\n\n```\nxclip -sel clip < ~/.ssh/id_rsa.pub\n```\n\n**重置秘钥与密码**\n\n重新执行一次以上操作即可。\n\n\n#### 添加git用户名和设置邮箱\n您创建的每次Git提交都会使用该信息，所以很重要。\n\n\n**设置用户名**\n\n```\ngit config --global user.name \'your name\'\n```\n\n**检查用户名**\n\n```\ngit config --global user.name\n```\n\n**设置邮箱**\n\n```\ngit config --global user.email \'your email\'\n```\n\n**检查邮箱**\n\n```\ngit config --global user.email\n```\n\n**验证前面做的那些配置**\n\n```\ngit config --global --list\n```\n\n由于使用了“--global”选项，所以您只需要做一次这样的配置。Git会在您系统的任何项目中使用这个信息。如果您希望在某个特定的项目中使用不同的用户名和邮箱地址，可以在那个项目中重新运行该命令，但不加“--global”选项。\n\n#### git工作流\n\n![git工作流](/blogs/git/git-trees.png)\n\n你的本地仓库由 `git` 维护的三棵“树”组成。第一个是你的工作目录，它持有实际文件；第二个是暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 `HEAD`，指向你最近一次提交后的结果。\n\n下面是一个常见修改代码的流程：你在本地修改了代码，然后使用`add`命令将文件提交到暂存区，此时你的代码被暂存了；然后使用`commit`命令将暂存区的文件提交到版本库；最后使用`push`命令将本地的改动推送到远程，至此，你便“成功”的完成了对代码的修改！\n\n#### 版本库的相关操作\n\n**初始化一个版本库**\n\n版本库又名仓库，英文名repository，你可以简单理解成一个目录，通过`git init`命令把这个目录变成Git可以管理的仓库，然后这个目录里面的每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n\n```\nmkdir lq\ncd lq\ngit init\n```\n\n**添加文件到暂存区**\n\n```\ngit add readme.txt\n```\n\n如果觉得一个一个`add`比较麻烦，可以使用这个命令：\n\n```\ngit add .\n```\n\n**查看文件状态**\n\n```\ngit status\n```\n\n**将暂存区的文件提交到版本库**\n\n```\ngit commit –m \"你的注释\"\n```\n\n**将文件从暂存区移除，并完全删除**\n\n```\ngit rm readme.txt\n```\n\n**重命名文件**\n\n```\ngit mv reademe.txt readme\n```\n\n**查看提交的历史记录**\n\n```\ngit log\n```\n\n#### 远程仓库\n\n**本地库与远程库关联**\n\n现在有这样一个情景：你已经在自己的电脑上创建了一个Git仓库，并且没有`clone`现有的仓库，现在你希望将你的本地仓库连接到某个远程服务器，使用这个命令可以把一个已有的本地仓库与远程库关联。\n\n```\ngit remote add origin yourgitaddress(你的git地址)\n```\n\n添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。\n\n之后，你就可以使用`push`命令将本地库的所有内容推送到远程库上了。\n\n\n**Clone远程版本库**\n\n通过*本地库与远程库关联*我们了解了先有本地库，后有远程库的时候，如何关联远程库。\n\n现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆，使用这个命令，你就可以将远程库克隆到自己的电脑本地：\n\n```\ngit clone yourgitaddress(你的git地址)\n```\n\n当有多个人协作开发时，每个人各自从远程克隆一份就可以了。\n\n**查看远程仓库信息**\n\n当你从远程仓库克隆时，实际上Git自动把本地的`master`分支和远程的`master`分支对应起来了，并且，远程仓库的默认名称是`origin`，下面的命令可以查看远程仓库的信息：\n\n```\ngit remote -v\n```\n\n`git remote show`命令加上主机名，可以查看该主机的详细信息，比如：\n\n```\ngit remote show origin\n```\n\n**删除远程仓库**\n\n下面的命令用于删除远程主机。\n\n```\ngit remote rm <主机名>\n```\n\n#### 推送你的更新到远程服务器\n\n`git push`命令用于将本地分支的更新，推送到远程主机，语法为：\n\n```\ngit push [远程名] [本地分支]:[远程分支]\n```\n\n如果省略远程分支名，则表示将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。\n\n```\ngit push origin master\n```\n\n上面命令表示，将本地的`master`分支推送到`origin`主机的`master`分支。如果后者不存在，则会被新建。\n\n比如我现在有一个本地`master`分支，需要推送到远程库的`test`分支，就需要使用下面的命令：\n\n```\ngit push origin master:test\n```\n\n如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n\n```\n$ git push origin :master\n# 等同于\n$ git push origin --delete master\n```\n\n上面命令表示删除`origin`主机的`master`分支。\n\n\n#### 更新远程分支\n\n当远程仓库的版本库有了更新，需要将这些更新取回本地，拉取远程仓库的数据，语法为：\n\n```\ngit fetch [remote-name]\n```\n\n默认情况下，`git fetch`取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。比如，取回`origin`主机的`master`分支：\n\n```\ngit fetch origin master\n```\n\n\n`fetch` 会拉去最新的远程仓库数据，但不会同步数据到当前目录下。如果要自动合并数据，就需要使用`pull`命令。\n\n`git pull`命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并，他的格式如下：\n\n```\ngit pull <远程主机名> <远程分支名>:<本地分支名>\n```\n\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n\n```\ngit pull origin next\n```\n\n上面命令表示，取回`origin/next`分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge\n\n```\ngit fetch origin\ngit merge origin/next\n```\n\n#### 分支管理\n\n**创建新分支**\n\n下面的命令创建了一个叫`yeh`的分支并切换了过去\n\n```\ngit branch -b yeh\n```\n\n相当于以下两条命令：\n\n```\ngit branch yeh\ngit checkout yeh\n```\n\n你也可以在已有分支的基础上创建一个新的分支：\n\n```\ngit checkout -b newBrach origin/master\n```\n\n上面命令表示，在`origin/master`的基础上，创建一个新分支。\n\n**切换到指定分支**\n\n```\ngit checkout branchName\n```\n\n**查看分支**\n\n`git branch`命令会列出所有分支，当前分支前面会标一个*号\n\n```\ngit branch\n* yeh\n  master\n```\n\n**合并分支**\n\n`git merge`命令用于合并指定分支到当前分支。假设我们现在处于`master`分支下，下面的命令将会把yeh合并到`master`分支\n\n```\ngit merge yeh\n```\n\n**删除分支**\n\n因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在`master`分支上工作效果是一样的，但过程更安全。\n\n#### git常见后悔药\n\n* 撤销本地全部没有git add过的修改：\n\n```\ngit checkout -- .\n```\n\n* 使用库上文件覆盖本地修改（当然是指用本地库覆盖）：\n\n```\ngit checkout file_name\n```\n\n* 回退掉某一次commit，回退方式是自动生成一个反向的commit，不会影响其他：\n\n```\ncommmitgit revert commitID\n```\n\n* 将git库状态强制回退到某个节点号，这个节点号之后的commit全部丢失：\n\n```\ngit reset --hard commitID\n```\n\n* 将远端库强制覆盖到本地，放弃本地全部修改：\n\n```\ngit reset --hard origin 分支名\n```\n\n* 回退最近一次的commit，且该次commit所作的修改会退到没有被add的状态：\n\n```\ngit reset --mixed HEAD~1\n```\n\n* 回退最近的一次commit，回退后该次commit所作的修改仍处于add过了的状态，可以通过git status查看状态：\n\n```\ngit reset --soft HEAD~1\n```\n\n* 回退最近一次的commit，回退的同时working tree也会被修改，也就是回退的这次的commit所做的修改都会消失：\n\n```\ngit reset --hard HEAD~1\n```\n\n* 恢复删除的某个文件：\n\n```\n$ git checkout -- test.txt\n```\n\n* 如果要恢复多个被删除的文件，可以使用批处理命令：\n\n```\ngit ls-files -d | xargs git checkout --\n```\n\n* 如果要恢复被修改的文件，命令：\n\n```\ngit ls-files -m | xargs git checkout --\n```\n','published',1,1522204069157),(9,'flex layou使用教程','/blogs/flex-layout/flexflex-layout-logo.jpg','一篇flex layou的使用教程，包含基本的语法以及各种案列。','>最近在看微信小程序的文档，里面有使用flex布局，然后我去学习了阮一峰的flex教程，有感而发，自己也来一个！\n\n[在线demo](/blogs/flex-layout/demo.html)\n\n### 速查\n\n**容器属性**\n<table>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>取值（第一个是默认值）</th>\n</tr>\n<tr>\n<td>flex-direction</td>\n<td>主轴的方向</td>\n<td>row，row-reverse，column，column-reverse</td>\n</tr>\n<tr>\n<td>flex-wrap</td>\n<td>如何换行</td>\n<td>nowrap，wrap，wrap-reverse</td>\n</tr>\n<tr>\n<td>justify-content</td>\n<td>在主轴上的对齐方式</td>\n<td>flex-start，flex-end，center，space-between，space-around</td>\n</tr>\n<tr>\n<td>align-items</td>\n<td>在交叉轴上如何对齐</td>\n<td>stretch，flex-start，flex-end，center，baseline</td>\n</tr>\n</table>\n\n**项目属性**\n<table>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n<tr>\n<td>order</td>\n<td>项目的排列顺序。数值越小，排列越靠前，默认为0。</td>\n</tr>\n<tr>\n<td>flex-grow</td>\n<td>项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</td>\n</tr>\n<tr>\n<td>flex-shrink</td>\n<td>项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</td>\n</tr>\n<tr>\n<td>flex-basis</td>\n<td>在分配多余空间之前，项目占据的主轴空间（main size）。</td>\n</tr>\n<tr>\n<td>flex</td>\n<td>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，后两个属性可选。</td>\n</tr>\n<tr>\n<td>align-self</td>\n<td>单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。</td>\n</tr>\n</table>\n\n### 容器属性\n\n* flex-direction\n* flex-wrap\n* flex-flow\n* justify-content\n* align-items\n* align-content\n\n##### flex-direction\n\n该属性决定主轴的方向（即项目的排列方向）,合法的取值：\n\n* row（默认值）：主轴为水平方向，起点在左端。\n* row-reverse：主轴为水平方向，起点在右端。\n* column：主轴为垂直方向，起点在上沿。\n* column-reverse：主轴为垂直方向，起点在下沿。\n\n##### flex-wrap\n\n默认情况下，项目都排在一条线（又称\"轴线\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行，合法的取值：\n\n* nowrap（默认）：不换行。\n* wrap：换行，第一行在上方。\n* wrap-reverse：换行，第一行在下方。\n\n##### flex-flow\n\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为`row nowrap`。\n\n##### justify-content\njustify-content属性定义了项目在主轴上的对齐方式,合法的取值：\n\n* flex-start（默认值）：左对齐\n* flex-end：右对齐\n* center： 居中\n* space-between：两端对齐，项目之间的间隔都相等。\n* space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n##### align-items\n\nalign-items属性定义项目在交叉轴上如何对齐,合法的取值：\n\n* flex-start：交叉轴的起点对齐。\n* flex-end：交叉轴的终点对齐。\n* center：交叉轴的中点对齐。\n* baseline: 项目的第一行文字的基线对齐。\n* stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n##### align-content\n\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用,合法的取值：\n\n* flex-start：与交叉轴的起点对齐。\n* flex-end：与交叉轴的终点对齐。\n* center：与交叉轴的中点对齐。\n* space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n* space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n* stretch（默认值）：轴线占满整个交叉轴。\n\n### 项目属性\n\n* order\n* flex-grow\n* flex-shrink\n* flex-basis\n* flex\n* align-self\n\n##### order\n\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n##### flex-grow\n该属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n##### flex-shrink\n\n该属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小 。\n\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n##### flex-basis\n\n该属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 \n\n它可以设为他设置一个值（比如350px），则项目将占据固定空间。 \n\n##### flex\n\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为`0 1 auto`，后两个属性可选。\n\n##### align-self\n\n该属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于`stretch`。\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n\n### DEMO\n\n下面的例子是基于这个样式起步的\n\n```\n.container{\ndisplay: flex;\nflex-wrap: wrap;\n}\n.box{\nwidth: 120px;\nheight: 120px;\nborder: solid 5px #fff;\nbackground: #eee;\ndisplay: flex;\n}\n.item{\nwidth: 40px;\nheight: 40px;\nbackground: #04acf7;\n}\n```\n\n##### 筛子布局（一个点）\n\n```\n.c1 .box2{\njustify-content: center;\n}\n.c1 .box3{\njustify-content: flex-end;\n}\n.c1 .box4{\nalign-items: center;\n}\n.c1 .box5{\njustify-content: center;\nalign-items: center;\n}\n.c1 .box6{\njustify-content: flex-end;\nalign-items: center;\n}\n.c1 .box7{\nalign-items: flex-end;\n}\n.c1 .box8{\njustify-content: center;\nalign-items: flex-end;\n}\n.c1 .box9{\njustify-content: flex-end;\nalign-items: flex-end;\n}\n```\n\n```\n<div class=\"container c1\">\n<div class=\"box\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box2\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box3\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box4\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box5\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box6\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box7\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box8\">\n<div class=\"item\"></div>\n</div>\n<div class=\"box box9\">\n<div class=\"item\"></div>\n</div>\n</div>\n\n```\n\n![](/blogs/flex-layout/flexlayout1.jpg)\n\n##### 筛子布局（二个点）\n\n```\n.c2 .box1{\njustify-content: space-between;\n}\n.c2 .box2{\njustify-content: space-between;\nalign-items:center;\n}\n.c2 .box3{\njustify-content: space-between;\nalign-items:flex-end;\n}\n\n.c2 .box4{\nflex-direction: column;\njustify-content: space-between;\n}\n.c2 .box5{\nflex-direction: column;\njustify-content: space-between;\nalign-items:center\n}\n.c2 .box6{\nflex-direction: column;\njustify-content: space-between;\nalign-items:flex-end;\n}\n\n.c2 .box7 .item:nth-child(2){\nalign-self: center;\n}\n.c2 .box8 {\nflex-direction: column;\n}\n.c2 .box8 .item:nth-child(2){\nalign-self: flex-end;\n}\n\n.c2 .box9 .item:nth-child(2){\nalign-self: flex-end;\n}\n.c2 .box10{\njustify-content: space-between;\n}\n.c2 .box10 .item:nth-child(2){\nalign-self: flex-end;\n}\n.c2 .box11{\nflex-direction: column;\njustify-content: space-between;\nalign-items:center\n}\n.c2 .box11 .item:nth-child(2){\nalign-self: flex-end;\n}\n.c2 .box12{\nflex-direction: column;\njustify-content: space-between;\nalign-items:flex-end;\n}\n.c2 .box12 .item:nth-child(2){\nalign-self: flex-start;\n}\n```\n\n```\n<div class=\"container c2\">\n<div class=\"box box1\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box2\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box3\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n\n<div class=\"box box4\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box5\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box6\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n\n<div class=\"box box7\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box8\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n\n<div class=\"box box9\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box10\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n\n<div class=\"box box11\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box12\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n</div>\n```\n\n![](/blogs/flex-layout/flexlayout2.jpg)\n\n##### 筛子布局（三个点）\n\n```\n.c3 .box1 .item:nth-child(2){\nalign-self: center;\n}\n.c3 .box1 .item:nth-child(3){\nalign-self: flex-end;\n}\n.c3 .box2 .item:nth-child(2){\nalign-self: flex-end;\n}\n```\n\n```\n<div class=\"container c3\">\n<div class=\"box box1\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"box box2\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n</div>\n```\n\n![](/blogs/flex-layout/flexlayout3.jpg)\n\n##### 筛子布局四个点）\n\n```\n.c4 .box1{\nflex-direction: column;\njustify-content: space-between;\n}\n.c4 .box1 .col{\ndisplay: flex;\njustify-content: space-between;\n}\n.c4 .box2{\n  flex-wrap: wrap;\n  justify-content: flex-end;\n  align-content: space-between;\n}\n.c4 .box2 .item{\ntext-align: center;\nline-height: 40px;\n}\n```\n\n```\n<div class=\"container c4\">\n<div class=\"box box1\">\n<div class=\"col\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n<div class=\"col\">\n<div class=\"item\"></div>\n<div class=\"item\"></div>\n</div>\n</div>\n\n<div class=\"box box2\">\n<div class=\"item\">1</div>\n<div class=\"item\">2</div>\n<div class=\"item\">3</div>\n<div class=\"item\">4</div>\n</div>\n</div>\n```\n\n![](/blogs/flex-layout/flexlayout4.jpg)\n\n##### Gird布局\n\n设值项目属性flex-grow: 1，最是简单的网格布局，项目可以平均分布。\n\n```\n.c5 .gird{\ndisplay: flex;\nwidth: 200px;\nheight: 40px;\nbackground: #EEEEEE;\nborder: 5px solid #fff;\n}\n.c5 .cell{\nflex-grow: 1;\nbackground: #04ACF7;\ntext-align: center;\nline-height: 40px;\nmargin-left: 10px;\n}\n.c5 .cell:first-child{\nmargin: 0;\n}\n```\n\n```\n<div class=\" c5\">\n<div class=\"gird\">\n<div class=\"cell\">1/2</div>\n<div class=\"cell\">1/2</div>\n</div>\n<div class=\"gird\">\n<div class=\"cell\">1/3</div>\n<div class=\"cell\">1/3</div>\n<div class=\"cell\">1/3</div>\n</div>\n<div class=\"gird\">\n<div class=\"cell\">1/4</div>\n<div class=\"cell\">1/4</div>\n<div class=\"cell\">1/4</div>\n<div class=\"cell\">1/4</div>\n</div>\n</div>\n```\n![](/blogs/flex-layout/flexlayout5.jpg)\n\n\n#### 项目属性的介绍\n\n项目属性的介绍不是很清晰，写了几个小例子以供分析，比如有以下dom结构：\n```\n<div class=\"list\">\n<div class=\"item item1\"></div> \n<div class=\"item item2\"></div>\n</div>\n```\n\n1. flex-grow相同，item将等分空间。\n\n```\n.list{\ndisplay: flex;\n}\n.item{\nheight: 60px;\nflex-grow: 1;\n}\n```\n\n2. flex-grow不同，item按比例分配空间，此时item1占据空间的1/5，item2占据空间的4/5，比如list的宽度为1000px，则item1为200px，item2为800px。\n\n```\n.list{\ndisplay: flex;\n}\n.item{\nheight: 60px;\nflex-grow: 1;\n}\n.item1{\nflex-grow: 1;\n}\n.item2{\nflex-grow: 4;\n}\n```\n\n\n3. flex-grow与flex-basis同时存在，item都有各自的初始值（item1为100px，item2为200px）；\n\n 当list的宽度小于等于300px时，flex-grow属性是没有作用的，item的空间按flex-basis的值进行比例分配，此时item1占据空间的2/3，item2占据空间的1/3，比如list的宽度为90px，则item1为60px，item2为30px。\n\n 当list的宽度大于300px时，item先按照各自的flex-basis值分配固定的空间，再按照flex-grow得值分配剩余的空间，比如list的宽度为1000px，item先各自分得固定空间200px、100px，再按比例分配剩余空间700px，则item1为200+700*1/5=340px，item2为100+700*4/5=660px。\n\n```\n.list{\ndisplay: flex;\n}\n.list .item{\nheight: 60px;\n}\n.item1{\nflex-basis: 200px;\nflex-grow: 1;\n}\n.item2{\nflex-basis: 100px;\nflex-grow: 4;\n}\n```\n\n4. 下面这种情况item先分配固定空间100px，item2获得剩余空间，你可以使用这个方式做一侧固定，一侧自适应布局。\n\n 这时，去掉flex-basis属性，直接写`width: 100px;`也能达到目的\n\n```\n.list{\ndisplay: flex;\n}\n.item1{\nflex-basis: 100px;\n}\n.item2{\nflex-grow: 1;\n}\n````\n','published',1,1498302238296),(10,'文件上传插件webuploder的使用','/blogs/webuploader/webuploader.jpg','WebUploader是由Baidu WebFE(FEX)团队开发的一个简单的以HTML5为主，FLASH为辅的现代文件上传组件。在现代的浏览器里面能充分发挥HTML5的优势，同时又不摒弃主流IE浏览器，沿用原来的FLASH运行时，兼容IE6+，iOS 6+, android 4+。两套运行时，同样的调用方式，可供用户任意选用','>经常在项目中遇到文件上传的需求，进过多次的实践，证明这个上传插件确实不错，通过这篇文章会你可以详细的了解webuploader\n\n[在线demo](/blogs/webuploader/demo.html)\n\n#### 关于webuploader\n\nWebUploader是由Baidu WebFE(FEX)团队开发的一个简单的以HTML5为主，FLASH为辅的现代文件上传组件。在现代的浏览器里面能充分发挥HTML5的优势，同时又不摒弃主流IE浏览器，沿用原来的FLASH运行时，兼容IE6+，iOS 6+, android 4+。两套运行时，同样的调用方式，可供用户任意选用。\n\n采用大文件分片并发上传，极大的提高了文件上传效率\n\n官网地址：[http://fex.baidu.com/webuploader/](http://fex.baidu.com/webuploader/)\n\n在官网上你可以找到关于webuploader的详细的文档\n\n#### 使用技巧\n\n下面是我在使用过程中我经常遇到一些问题和需求，整理了一下。\n\n##### 文件限制\n\nwebuploader有一个accept参数可以限制上传文件的格式\n\n只允许图片\n```\naccept: {\n    title: \'Images\',\n    extensions: \'gif,jpg,jpeg,bmp,png\',\n    mimeTypes: \'image/*\'\n}\n```\n\n只允许压缩文件\n```\naccept: {\ntitle: \'Applications\',\nextensions: \'zip,rar,7z\',\nmimeTypes: \'application/*，image/*\'\n}\n```\n\n以下三个参数可以限制文件的大小\n```\nfileNumLimit:3, //文件上传数量的限制\nduplicate:true, //是否允许重复的文件\nfileSingleSizeLimit:10 * 1024 * 1024, //单个文件大小限制\n```\n\n如果出错，会触发error事件\n```\nuploader.on(\"error\",function (type){ \nif (type==\"Q_TYPE_DENIED\"){\nalert(\"文件格式错误\")\n}\nif(type==\"F_EXCEED_SIZE\"){\nalert(\"文件大小超过限制\");\n}\n})\n```\n\n有时，文件的格式比较特殊，我们可以这样做\n```\n//进入队列时判断文件类型\nuploader.on(\'fileQueued\', function(file) {\nif(file.ext == \"xls\" || file.ext == \"xlsx\"){\n//do somethig\n}else{\nalert(\"文件格式错误\");\nuploader.reset();////重置uploader\n}\n});\n```\n\n##### 上传之前动态绑定参数 \n\n在上传时，有时会需要动态的绑定一些数据，可以这样做\n```\nuploader.on( \'uploadBeforeSend\', function( block, data ) {\n data.user_id = 12233;\n data.user_name = \'justyeh\';\n});\n```\n\n##### 多元素共用一个picker\n\n有这样一中情况，页面中有两个按钮`button.picker`,他们公用一个webuploader实例\n\n```\n<button class=\"picker\">上传按钮一</button>\n<button class=\"picker\">上传按钮二</button>\n```\n\n```\nuploader = WebUploader.create({\n......\npick:  {\nid:\".picker\",\n}\n......\n});\n```\n\n现在需要知道是哪个按钮触发了上传事件，我们可以这样做\n```\n//上传成功\nuploader.on(\'uploadSuccess\', function(file,response) {\nvar _picker = $(file.source._refer);//_refer记录来源\n});\n```\n\n\n##### display:none时webuploader没有作用\n\npicker元素默认是影藏的，我们可以换一种方式来“影藏”元素\n```\nclip: rect(1px,1px,1px,1px);\n```\n\nuploader在弹出层中，当弹出层显示之后再实例化\n```\n$(\"#.dialog\").fadeIN(function(){\nuploderObj =  WebUploder.create(.........//创建\n})\n```\n','published',1,1499668384489),(11,'滚动条美化插件Perfect Scrollbar','/blogs/perfect-scrollbar/perfect-scrollbar.jpg','Perfect Scrollbar 是一个轻量级的的 jQuery插件，能够帮助你轻松创建出自定义风格的滚动条。 它不会影响默认的布局，也不需要任何任何的 CSS 修改，该插件适用于任何大小的容器，并重新安排位置，如果容器大小发生变化会自动调整位置。 此外，滚动条的风格可以完全通过 CSS 定制。','\n>[Perfect Scrollbar](https://github.com/noraesae/perfect-scrollbar) 是一个轻量级的（~14KB）的 jQuery插件，能够帮助你轻松创建出自定义风格的滚动条。\n它不会影响默认的布局，也不需要任何任何的 CSS 修改，该插件适用于任何大小的容器，并重新安排位置，如果容器大小发生变化会自动调整位置。\n此外，滚动条的风格可以完全通过 CSS 定制，另外还支持鼠标滚轮插件 – [jquery-mousewheel](http://www.jqcool.net/jquery-mousewheel.html)\n\n[在线demo](/blogs/perfect-scrollbar/demo.html)\n\n**特性**\n\n* 不需要修改任何的元素的css\n* 滚动条不影响最初的页面布局设计\n* 滚动条支持完整的自定义\n* 滚动条的尺寸和位置会随着容器尺寸或者内容的变化而变化\n* 不需要定义宽度和高度。它会固定在容器的右下\n* 你可以修改任何滚动条的样式，不依赖于其它脚本\n* 不使用\'scrollTop\'和\'scrollLeft\'，不使用任何绝对定位\n\n#### 使用案例\n\n**使用要求**\n\n* 必须有一个内容元素\n* 容器必须拥有一个\'position\'的CSS样式定义\n* 滚动条的position必须是\'absolute\'\n* scrollbar-x必须拥有一个bottom的样式定义，scrollbar-必须有一个\'right\'的样式定义\n \n#### API介绍\n \nScrollbar插件是一个开源项目，这里是项目[git主页](https://github.com/noraesae/perfect-scrollbar)\n\n **初始化插件**\n \n 这个是最基础的用法\n \n```\n$(\'#container\').perfectScrollbar();// Initialize\n```\n \n**初始化（带有选项）**\n\n在实例化的时候你也可以附带一些选项\n \n```\n$(\'#container\').perfectScrollbar({// with options\nwheelSpeed: 2,\n  wheelPropagation: true,\n  minScrollbarLength: 20\n});  \n``` \n\n**更新**\n \n如果容器大小或者位置变化了，你可以update插件\n```\n$(\'#container\').perfectScrollbar(\'update\');  // Update\n```\n\n**销毁**\n如果你不再需要scrollbar效果，你可以destroy插件\n```\n$(\'#container\').perfectScrollbar(\'destroy\'); // Destroy\n```\n\n**定位**\n如果你需要滚动到某一个特定位置，使用scrollTop方法，然后update就可以了\n```\n$(\'#container\').scrollTop（0）;\n$(\'#container\').perfectScrollbar（‘update’）;\n```','published',1,1499668577381),(12,'实用alert小代码','/blogs/yeh-alert/poster.jpg','程序中经常需要alert效果，但是产品又觉得原生的alert效果太丑，就自己弄了一个放在博客里以备后用，虽然代码挺简单的，但绝对实用','>程序中经常需要alert效果，但是产品又觉得原生的alert效果太丑，就自己弄了一个放在博客里以备后用，虽然代码挺简单的，但绝对实用\r\n\r\n#### 代码\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<title>yeh alert</title>\r\n<style type=\"text/css\">\r\n*{margin: 0;padding: 0;}\r\n.yeh-alert{position: fixed;top: 0;left: 0;bottom: 0;right: 0;background: rgba(0,0,0,0.2);z-index: 99999;}\r\n.yeh-alert .alert-main{position: absolute;top: 50%;left: 50%;right: 0;margin-left: -170px;margin-top: -100px;width: 340px;background: #fff;padding: 15px 15px 20px 15px;border-radius: 5px;box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);color: #333;}\r\n.yeh-alert .alert-title{font-size: 22px;line-height: 20px;padding-bottom: 15px;}\r\n.yeh-alert .alert-content{font-size: 14px;}\r\n</style>\r\n</head>\r\n<body>\r\n<script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\r\n<script>\r\n\r\nvar yeh = (function(){\r\nfunction yehAlert(title,content,showTime){\r\nvar $alert=$(\'<div class=\"yeh-alert\">\'+\r\n\'<div class=\"alert-main\">\'+\r\n\'<div class=\"alert-title\">\'+title+\"</div>\"+\r\n\'<div class=\"alert-content\">\'+content+\"</div>\"+\r\n\"</div>\"+\r\n\"</div>\");\r\n$alert.appendTo(\"body\");\r\nsetTimeout(function(){\r\n$alert.fadeOut(function(){\r\n$alert.remove();\r\n});\r\n},showTime);\r\n}\r\nreturn {\r\nalert : yehAlert\r\n}\r\n})();\r\n\r\nyeh.alert(\'title\',\'alert content\',1500)\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n#### 效果\r\n![](/blogs/yeh-alert/poster.jpg)','published',1,1498316269819),(13,'垂直导航插件jquery-accordion-menu','/blogs/jquery-accordion-menu/poster.jpg','一个带筛选功能垂直导航的jQuery插件，样式自定义，不改变dom结构，在做后台管理页面时非常实用','>一个带筛选功能垂直导航的jQuery插件，样式自定义，不改变dom结构，在做后台管理页面时非常实用，[插件地址](http://www.jq22.com/jquery-info6140)。\n\n[在线demo](/blogs/jquery-accordion-menu/demo.html)\n\n#### 介绍\n\n**dom结构**\n\njquery-accordion-menu使用ul-li列表的嵌套代表导航层级\n\n```\n<div class=\"content\">\n<div id=\"jquery-accordion-menu\" class=\"jquery-accordion-menu red\">\n<div class=\"jquery-accordion-menu-header\" id=\"form\"></div>\n<ul id=\"demo-list\">\n.....\n</ul>\n<div class=\"jquery-accordion-menu-footer\">Footer</div>\n</div>\n</div>\n```\n\n**样式**\n\n`.jquery-accordion-menu`是主容器\n\n`.active`代表当前高亮导航\n\n`.red`是皮肤，目前有jquery-accordion-menu.css中有blue、green、red、white、blank五种皮肤可选，当然你也可以用css改造出一个属于你自己的皮肤\n\n`.jquery-accordion-menu-header`是header区域\n\n`.jquery-accordion-menu-footer`是footer区域\n\n**使用**\n\n调用jqueryAccordionMenu()方法即可\n```\njQuery(\"#jquery-accordion-menu\").jqueryAccordionMenu();\n```\n\n\n','published',1,1498317367096),(14,'Markdown常用语法介绍','/blogs/markdown/poster.jpg',' Markdown 是一种轻量级的「标记语言」,它的优点很多,目前也被越来越多的写作爱好者,撰稿者广泛使用。\n本文会介绍一些常用的Markdown语法','#### 介绍\n\n>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。本文介绍了我的博客中经常使用到的Markdown语法。\n\n#### 使用\n\n**标题**\n\n标题共有6级：\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n为了美观，你可以为行尾也加上`#`,但这只起到美观的作用，因为行首的井字符数量决定标题的阶数：\n\n```\n# 一级标题 #\n## 二级标题 ##\n### 三级标题 ###\n#### 四级标题 ####\n##### 五级标题 #####\n###### 六级标题 ######\n```\n*注意：标准的markdown标题的文字和`#`之间是有一个空格的，书写的时候最好按照标准来，不然当你迁移数据到其他平台的时候就知道有多操蛋了*\n\n**引用**\n\n在要引用的内容前加上 `>` 即可：\n\n```\n>引用的内容\n```\n\n引用可以嵌套（例如：引用内的引用）,只要根据层次加上不同数量的 `>` ：\n\n```\n>>引用内的引用\n```\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：\n\n```\n> ## 这是一个标题。\n> \n> 1.   这是第一行列表项。\n> 2.   这是第二行列表项。\n> \n> 给出一些例子代码：\n> \n>     return shell_exec(\"echo $input | $markdown_script\");\n```\n\n\n**列表**\n\nMarkdown 支持有序列表和无序列表。\n\n无序列表使用星号、加号或是减号作为列表标记：\n\n```\n* Red\n* Green\n* Blue\n```\n\n等同于：\n\n```\n+ Red\n+ Green\n+ Blue\n```\n\n也等同于：\n\n```\n- Red\n- Green\n- Blue\n```\n\n有序列表则使用数字接着一个英文句点：\n\n```\n1. red\n2. Green\n3. Blue\n```\n\n**代码**\n\n对于长代码块，可以使用三个  `` ` `` 符号（英文输入法下，这个符号通常在数字键 `1` 的左边）将内容包裹起来\n\n![markdown代码](/blogs/markdown/markdown-code-block.jpg)\n\n对于短的代码内容，使用一个 `` ` ``符号将内容包裹起来就可以了：\n\n```\n`div`\n```\n\n**表格**\n\n直接插入html标签，注意开始标签与结尾标签不能用制表符或空格来缩进：\n\n```\n<table>\n    <tr>\n        <td>td1</td>\n    </tr>\n</table>\n```\n\n**图片**\n\n![markdown图片](/blogs/markdown/markdown-img.jpg)\n\n**链接**\n\n```\n[an example](http://example.com/)\n\n[an example](http://example.com/ \"Title\")\n```\n\n**强调**\n\n一个 `*` 使内容变成斜体：\n\n```\n*这里的内容会变成斜体*\n```\n\n两个 `*` 使内容变成粗体：\n\n```\n**这里的内容会变成粗体**\n```\n\n#### 效果\n\n![markdown效果](/blogs/markdown/markdown-demo.jpg)','published',1,1498316682588),(15,'无缝滚动插件kxbdMarquee.js','/blogs/kxbdmarquee/poster.jpg','<marquee>曾是 IE 下独有的一个走马灯效果的标签，其他浏览器并不兼容，于是出现了使用 JavaScript 来模拟该效果的插件。可以运用于新闻内容的滚动效果。','\n>`<marquee>` 曾是 IE 下独有的一个走马灯效果的标签，其他浏览器并不兼容，于是出现了使用 JavaScript 来模拟该效果的插件。可以运用于新闻内容的滚动效果。[官网](http://www.kxbd.com/?p=281)\n\n[在线demo](/blogs/kxbdmarquee/demo.html)\n\n\n#### 使用方法\n\n**载入 JavaScript 文件**\n\n```\n<script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"jquery.kxbdmarquee.js\" ></script>\n```\n\n**CSS 样式**\n\n```\n/**\n * 父容器需要设置溢出隐藏\n * 如果是水平滚动，项目需要设置浮动\n */\n#element_id{overflow:hidden;}\n#element_id ul li{float:left;}\n```\n\n**DOM 结构**\n\n```\n<div id=\"element_id\">\n  <ul>\n    <li>...</li>\n    <li>...</li>\n    <li>...</li>\n  </ul>\n</div>\n```\n\n**JavaScript 调用方式**\n\n```\n$(\'#element_id\').kxbdMarquee();\n$(\'#element_id\').kxbdMarquee({...});\n```\n\n\n#### 参数说明\n<table>\n    <thead>\n        <tr>\n          <th width=\"100\">名称</th>\n          <th width=\"100\">默认值</th>\n          <th>说明</th>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>direction</td>\n        <td>\"left\"</td>\n        <td>滚动方向。可设置为：\"left\", \"right\", \"up\", \"down\"</td>\n      </tr>\n      <tr>\n        <td>isEqual</td>\n        <td>true</td>\n        <td>所有滚动的元素长宽是否相等。可设置为：true, false</td>\n      </tr>\n      <tr>\n        <td>loop</td>\n        <td>0</td>\n        <td>循环滚动次数，0 表示无限循环</td>\n      </tr>\n      <tr>\n        <td>scrollAmount</td>\n        <td>1</td>\n        <td>步长(px)</td>\n      </tr>\n      <tr>\n        <td>scrollDelay</td>\n        <td>20</td>\n        <td>时长(ms)</td>\n      </tr>\n    </tbody>\n</table>\n#### DEMO\n\n效果图见页面横幅banner,下面是代码:\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<title>kxbdmarquee demo</title>\n<style type=\"text/css\">\n*{margin: 0;padding: 0;box-sizing: border-box;}\nbody{background: #eee;padding-top: 100px;}\nh1{text-align: center;font-size: 50px;}\nli{list-style: none;height: 40px;line-height: 40px;width:80px;}\n.box{display: flex;flex-wrap: wrap;width: 802px;margin: 10px auto;}\n.item{width: 400px;height: 200px;padding: 0 10px;border: solid 1px #aaa;margin: -1px -1px 0 0;}\n#demo1,#demo2{width: 320px;overflow: hidden;}\n#demo1 li,#demo2 li{float: left;}\n#demo3,#demo4{height: 160px;overflow: hidden;}\n</style>\n</head>\n<body>\n<h1>kxbdmarquee.js</h1>\n<div class=\"box\">\n<div class=\"item\">\n<h2>横向滚动 (right)</h2>\n<div id=\"demo1\">\n<ul>\n<li>滚动內容1</li>\n<li>滚动內容2</li>\n<li>滚动內容3</li>\n<li>滚动內容4</li>\n</ul>\n</div>\n</div>\n<div class=\"item\">\n<h2>横向滚动 (left)</h2>\n<div id=\"demo2\">\n<ul>\n<li>滚动內容1</li>\n<li>滚动內容2</li>\n<li>滚动內容3</li>\n<li>滚动內容4</li>\n</ul>\n</div>\n</div>\n<div class=\"item\">\n<h2>纵向滚动 (bottom)</h2>\n<div id=\"demo3\">\n<ul>\n<li>滚动內容1</li>\n<li>滚动內容2</li>\n<li>滚动內容3</li>\n<li>滚动內容4</li>\n</ul>\n</div>\n</div>\n<div class=\"item\">\n<h2>纵向滚动 (top)</h2>\n<div id=\"demo4\">\n<ul>\n<li>滚动內容1</li>\n<li>滚动內容2</li>\n<li>滚动內容3</li>\n<li>滚动內容4</li>\n</ul>\n</div>\n</div>\n</div>\n</body>\n<script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"jquery.kxbdmarquee.js\" ></script>\n<script>\n$(function(){\n$(\"#demo1\").kxbdMarquee({direction:\'left\'});\n$(\"#demo2\").kxbdMarquee({direction:\'right\'});\n$(\"#demo3\").kxbdMarquee({direction:\'up\'});\n$(\"#demo4\").kxbdMarquee({direction:\'down\'});\n})\n</script>\n</html>\n```\n\n本文来源:[http://code.ciaoca.com/jquery/kxbdmarquee/](http://code.ciaoca.com/jquery/kxbdmarquee/)\n\n','published',1,1498317113682),(17,'Markdown编辑器simplemde-markdown-editor','/blogs/simplemde/simplemde.jpg','一个简单、漂亮、可嵌入的的JavaScript Markdown编辑器。内置自动保存和拼写检查功能。\r\n','>[cnode中文社区](https://cnodejs.org/)里面使用了一款不错的Markdown编辑器，名字叫做[editor](https://github.com/lepture/editor)，网友[NextStepWebs](https://github.com/NextStepWebs/simplemde-markdown-editor/)基于这个版本做了一些改进。我尽我最大可能做一些翻译工作，希望能帮助的大家；当然，如果你熟悉英文，可以直接参考[官方文档](https://github.com/NextStepWebs/simplemde-markdown-editor/)。\r\n\r\n[在线demo](/blogs/simplemde/demo.html)\r\n\r\n#### 特性\r\n\r\n* SimpleMDE 是一个嵌入式 JavaScript 编辑器，用于书写好看且易懂的 markdown格式文本。\r\n* 如果你对Markdown语法不够熟悉，SimpleMDE提供了更为简单的快捷键和工具栏。\r\n* SimpleMDE 不支持WYSIWYG（所见即所得），因为在编辑时呈现语法可以清楚地显示预期的结果。\r\n* 美观的样式：标题更大，强调的词语为斜体，链接带有下划线等。\r\n* 内置自动保存和拼写检查功能\r\n\r\n#### 安装\r\n\r\n**使用npm**\r\n\r\n```\r\nnpm install simplemde --save\r\n```\r\n\r\n**使用bower**\r\n\r\n```\r\nbower install simplemde --save\r\n```\r\n\r\n**在浏览器中使用**\r\n\r\n注意：有些cdn服务可能会晚几天才能更新到最新版本。\r\n\r\n```\r\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css\">\r\n<script src=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js\"></script>\r\n```\r\n\r\n#### 快速开始\r\n\r\n**基本使用**\r\n\r\n安装之后，SimpleMDE会绑定在页面的第一个textarea元素上。\r\n\r\n```\r\n<script>\r\nvar simplemde = new SimpleMDE();\r\n</script>\r\n```\r\n\r\n**使用在特定的textarea上**\r\n\r\n源生js写法\r\n\r\n```\r\n<script>\r\nvar simplemde = new SimpleMDE({ element: document.getElementById(\"MyID\") });\r\n</script>\r\n```\r\n\r\njQuery写法\r\n\r\n```\r\n<script>\r\nvar simplemde = new SimpleMDE({ element: $(\"#MyID\")[0] });\r\n</script>\r\n```\r\n\r\n**get/set内容**\r\n\r\n```\r\n//get\r\nsimplemde.value();\r\n//set\r\nsimplemde.value(\"This text will appear in the editor\");\r\n```\r\n\r\n#### 配置项\r\n\r\n**autoDownloadFontAwesome**\r\n\r\n为true时会强制下载FontAwesome字体图标，为false时会阻止下载，默认值undefined时，会自动判断页面里面有没有FontAwesome，默认值undefined。\r\n\r\n**autofocus**\r\n\r\n是否使editor自动获取焦点，默认值false。\r\n\r\n**autosave**\r\n\r\n设置自动保存内容选项：\r\n\r\n* enabled：为true时时自动保存，默认值false。\r\n* delay：每次保存的时间间隔，默认值10000（10s）。\r\n* uniqueId:必须设置一个ID，便于可其他实例区分开来。\r\n\r\n**blockStyles**\r\n\r\n定义markdown标签的表现形式：\r\n\r\n* bold：`**` 或者  `__` ； 默认为  `**`\r\n* code： ```` ``` ```` 或者 ~~~ ； 默认为  ```` ``` ````\r\n* italic：`*` 或者  `_` ； 默认为  `*`\r\n\r\n**element**\r\n\r\n设置绑定的DOM元素,默认为页面中的第一个textarea。\r\n\r\n**forceSync**\r\n\r\n当内容改变时，是否进行强制存储，默认值false。\r\n\r\n**hideIcons**\r\n\r\n要隐藏的图标名称数组。 可以用于隐藏默认显示的图标，而不完全自定义工具栏。\r\n\r\n**indentWithTabs**\r\n\r\n为false时，缩进使用空格而不是制表符，默认值true。\r\n\r\n**initialValue**\r\n\r\n如果设置了该项，则为editor设置了默认值。\r\n\r\n**insertTexts**\r\n\r\n设置插入的内容，值为一个包含两个元素的数组，第一个元素将是在光标或高亮之前插入的文本，第二个元素将插入到后面\r\n\r\n这是默认链接值：`[\"[\", \"](http://)\"]`\r\n\r\n**lineWrapping**\r\n\r\n为false时禁用换行，默认值true。\r\n\r\n\r\n**parsingConfig**\r\n\r\n定义编辑期间解析Markdown的设置：\r\n\r\n* allowAtxHeaderWithoutSpace：是否在header的后面添加 #，默认false\r\n* strikethrough： 是否处理GFM删除线语法，，默认true\r\n* underscoresBreakWords： 是否让下划线是用于分隔单词的分隔符，默认false\r\n\r\n**placeholder**\r\n\r\n设置editor的占位内容。\r\n\r\n**previewRender**\r\n\r\n定义解析纯文本Markdown和返回HTML时的自定义函数，在用户预览时使用。\r\n\r\n**promptURLs**\r\n\r\n为true时点击链接或图像将显示一个prompt窗口，要求提供链接或图像URL，默认值true。\r\n\r\n**renderingConfig**\r\n\r\n定义预览Markdown时的设置：\r\n\r\n* singleLineBreaks：为false时禁用GFM的单行中断，默认true。\r\n* strikethrough： 是否使用[highlight.js](https://github.com/isagalaev/highlight.js)高亮插件，默认false；注意，为true是你需要引入相关文件：<br>`<script src=\"https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js\"></script>`<br>`<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css\">`。\r\n\r\n**shortcuts**\r\n\r\n设置快捷键，参考下文快捷键。\r\n\r\n**showIcons**\r\n\r\n要隐藏的图标名称数组， 可以用于显示默认隐藏的图标，而不完全自定义工具栏。\r\n\r\n**spellChecker**\r\n\r\n是否启用拼写检查，默认值true。\r\n\r\n**status**\r\n\r\n为flase时影藏status bar。\r\n\r\n**styleSelectedText**\r\n\r\n如果为false，将移除用于选中项上的CodeMirror-selectedtext样式，值为一个数组，内容为内置状态栏项目。\r\n\r\n**tabSize**\r\n设置tab的大小，默认值2。\r\n\r\n**toolbar**\r\n为false时，影藏toolbar，值为一个数组，参考下文toolbar图标。\r\n\r\n**toolbar**\r\n是否启用工具栏按钮tips提示效果，默认值true。\r\n\r\n#### Toolbar图标\r\n\r\n下面是内置的工具栏图标（默认部分启用）列表，在表格中，Name是图标的名称，Action是要打开的函数或URL，Tooltip是图标提示文字，class是作用于图标上的样式。\r\n\r\n<table>\r\n	<thead>\r\n	<tr>\r\n	<th>Name</th>\r\n	<th>Action</th>\r\n	<th>Tooltip</th>\r\n	<th>Class</th>\r\n	</tr>\r\n	</thead>\r\n	<tbody>\r\n	<tr>\r\n	<td>bold</td>\r\n	<td>toggleBold</td>\r\n	<td>Bold</td>\r\n	<td>fa fa-bold</td>\r\n	</tr>\r\n	<tr>\r\n	<td>italic</td>\r\n	<td>toggleItalic</td>\r\n	<td>Italic</td>\r\n	<td>fa fa-italic</td>\r\n	</tr>\r\n	<tr>\r\n	<td>strikethrough</td>\r\n	<td>toggleStrikethrough</td>\r\n	<td>Strikethrough</td>\r\n	<td>fa fa-strikethrough</td>\r\n	</tr>\r\n	<tr>\r\n	<td>heading</td>\r\n	<td>toggleHeadingSmaller</td>\r\n	<td>Heading</td>\r\n	<td>fa fa-header</td>\r\n	</tr>\r\n	<tr>\r\n	<td>heading-smaller</td>\r\n	<td>toggleHeadingSmaller</td>\r\n	<td>Smaller Heading</td>\r\n	<td>fa fa-header</td>\r\n	</tr>\r\n	<tr>\r\n	<td>heading-bigger</td>\r\n	<td>toggleHeadingBigger</td>\r\n	<td>Bigger Heading</td>\r\n	<td>fa fa-lg fa-header</td>\r\n	</tr>\r\n	<tr>\r\n	<td>heading-1</td>\r\n	<td>toggleHeading1</td>\r\n	<td>Big Heading</td>\r\n	<td>fa fa-header fa-header-x fa-header-1</td>\r\n	</tr>\r\n	<tr>\r\n	<td>heading-2</td>\r\n	<td>toggleHeading2</td>\r\n	<td>Medium Heading</td>\r\n	<td>fa fa-header fa-header-x fa-header-2</td>\r\n	</tr>\r\n	<tr>\r\n	<td>heading-3</td>\r\n	<td>toggleHeading3</td>\r\n	<td>Small Heading</td>\r\n	<td>fa fa-header fa-header-x fa-header-3</td>\r\n	</tr>\r\n	<tr>\r\n	<td>code</td>\r\n	<td>toggleCodeBlock</td>\r\n	<td>Code</td>\r\n	<td>fa fa-code</td>\r\n	</tr>\r\n	<tr>\r\n	<td>quote</td>\r\n	<td>toggleBlockquote</td>\r\n	<td>Quote</td>\r\n	<td>fa fa-quote-left</td>\r\n	</tr>\r\n	<tr>\r\n	<td>unordered-list</td>\r\n	<td>toggleUnorderedList</td>\r\n	<td>Generic List</td>\r\n	<td>fa fa-list-ul</td>\r\n	</tr>\r\n	<tr>\r\n	<td>ordered-list</td>\r\n	<td>toggleOrderedList</td>\r\n	<td>Numbered List</td>\r\n	<td>fa fa-list-ol</td>\r\n	</tr>\r\n	<tr>\r\n	<td>clean-block</td>\r\n	<td>cleanBlock</td>\r\n	<td>Clean block</td>\r\n	<td>fa fa-eraser fa-clean-block</td>\r\n	</tr>\r\n	<tr>\r\n	<td>link</td>\r\n	<td>drawLink</td>\r\n	<td>Create Link</td>\r\n	<td>fa fa-link</td>\r\n	</tr>\r\n	<tr>\r\n	<td>image</td>\r\n	<td>drawImage</td>\r\n	<td>Insert Image</td>\r\n	<td>fa fa-picture-o</td>\r\n	</tr>\r\n	<tr>\r\n	<td>table</td>\r\n	<td>drawTable</td>\r\n	<td>Insert Table</td>\r\n	<td>fa fa-table</td>\r\n	</tr>\r\n	<tr>\r\n	<td>horizontal-rule</td>\r\n	<td>drawHorizontalRule</td>\r\n	<td>Insert Horizontal Line</td>\r\n	<td>fa fa-minus</td>\r\n	</tr>\r\n	<tr>\r\n	<td>preview</td>\r\n	<td>togglePreview</td>\r\n	<td>Toggle Preview</td>\r\n	<td>fa fa-eye no-disable</td>\r\n	</tr>\r\n	<tr>\r\n	<td>side-by-side</td>\r\n	<td>toggleSideBySide</td>\r\n	<td>Toggle Side by Side</td>\r\n	<td>fa fa-columns no-disable no-mobile</td>\r\n	</tr>\r\n	<tr>\r\n	<td>fullscreen</td>\r\n	<td>toggleFullScreen</td>\r\n	<td>Toggle Fullscreen</td>\r\n	<td>fa fa-arrows-alt no-disable no-mobile</td>\r\n	</tr>\r\n	<tr>\r\n	<td>guide</td>\r\n	<td><a href=\"https://simplemde.com/markdown-guide\">This link</a></td>\r\n	<td>Markdown Guide</td>\r\n	<td>fa fa-question-circle</td>\r\n	</tr>\r\n	</tbody>\r\n</table>\r\n\r\n自定义toolbar的用法：\r\n\r\n```\r\n// Customize only the order of existing buttons\r\nvar simplemde = new SimpleMDE({\r\n    toolbar: [\"bold\", \"italic\", \"heading\", \"|\", \"quote\"],\r\n});\r\n\r\n// Customize all information and/or add your own icons\r\nvar simplemde = new SimpleMDE({\r\n    toolbar: [{\r\n            name: \"bold\",\r\n            action: SimpleMDE.toggleBold,\r\n            className: \"fa fa-bold\",\r\n            title: \"Bold\",\r\n        },\r\n        {\r\n            name: \"custom\",\r\n            action: function customFunction(editor){\r\n                // Add your own code\r\n            },\r\n            className: \"fa fa-star\",\r\n            title: \"Custom Button\",\r\n        },\r\n        \"|\", // Separator\r\n        ...\r\n    ],\r\n});\r\n```\r\n\r\n#### 样式\r\n\r\n为SimpleMDE设置最小高度\r\n\r\n```\r\n.CodeMirror, .CodeMirror-scroll {\r\n    min-height: 200px;\r\n}\r\n```\r\n\r\n也可以设置为固定高度：\r\n\r\n```\r\n.CodeMirror {\r\n    height: 300px;\r\n}\r\n```\r\n\r\n#### 快捷键\r\n\r\nSimpleMDE附带了一组预定义的键盘快捷键，但可以使用配置选项进行更改。 默认列表如下：\r\n\r\n<table>\r\n  <thead> \r\n    <tr> \r\n      <th align=\"left\">Shortcut</th>  \r\n      <th align=\"left\">Action</th> \r\n    </tr> \r\n  </thead>\r\n  <tbody> \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-\'</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleBlockquote\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-B</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleBold\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-E</em>\r\n      </td>  \r\n      <td align=\"left\">\"cleanBlock\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-H</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleHeadingSmaller\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-I</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleItalic\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-K</em>\r\n      </td>  \r\n      <td align=\"left\">\"drawLink\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-L</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleUnorderedList\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-P</em>\r\n      </td>  \r\n      <td align=\"left\">\"togglePreview\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-Alt-C</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleCodeBlock\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-Alt-I</em>\r\n      </td>  \r\n      <td align=\"left\">\"drawImage\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Cmd-Alt-L</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleOrderedList\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>Shift-Cmd-H</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleHeadingBigger\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>F9</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleSideBySide\"</td> \r\n    </tr>  \r\n    <tr> \r\n      <td align=\"left\">\r\n        <em>F11</em>\r\n      </td>  \r\n      <td align=\"left\">\"toggleFullScreen\"</td> \r\n    </tr> \r\n  </tbody>\r\n</table>\r\n\r\n修改快捷键的方法：\r\n\r\n```\r\nvar simplemde = new SimpleMDE({\r\n    shortcuts: {\r\n        \"toggleOrderedList\": \"Ctrl-Alt-K\", // alter the shortcut for toggleOrderedList\r\n        \"toggleCodeBlock\": null, // unbind Ctrl-Alt-C\r\n        \"drawTable\": \"Cmd-Alt-T\" // bind Cmd-Alt-T to drawTable action, which doesn\'t come with a default shortcut\r\n    }\r\n});\r\n```\r\n\r\nSimpleMDE可以智能识别你的操作系统，如果你在Windows上设置了一个快捷键```Ctrl-B```,在Mac上，他会被自动转化为```Cmd-B```\r\n\r\n#### 事件处理\r\n\r\nSimpleMDE允许你捕获一些事件，事件列表可以参考这个网址：[https://codemirror.net/doc/manual.html#events](https://codemirror.net/doc/manual.html#events)\r\n\r\n```\r\nvar simplemde = new SimpleMDE();\r\nsimplemde.codemirror.on(\"change\", function(){\r\n    console.log(simplemde.value());\r\n});\r\nvar simplemde = new SimpleMDE();\r\n...\r\nsimplemde.toTextArea();\r\nsimplemde = null;\r\n```\r\n\r\n#### 移除绑定\r\n\r\n你可以通过调用\'toTextArea()\'方法来使textare恢复到最初始的状态，这时，自动保存功能将被解除， textarea会保留原来的的文本内容。\r\n\r\n```\r\nvar simplemde = new SimpleMDE();\r\n...\r\nsimplemde.toTextArea();\r\nsimplemde = null;\r\n```\r\n\r\n#### 常见方法\r\n\r\n```\r\nvar simplemde = new SimpleMDE();\r\nsimplemde.isPreviewActive(); // returns boolean\r\nsimplemde.isSideBySideActive(); // returns boolean\r\nsimplemde.isFullscreenActive(); // returns boolean\r\nsimplemde.clearAutosavedValue(); // no returned value\r\n```\r\n\r\n#### DEMO\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<title>SimpleMDE Dome</title>\r\n<link rel=\"stylesheet\" href=\"simplemde.min.css\">\r\n<script src=\"simplemde.min.js\"></script>\r\n<style type=\"text/css\">\r\nbody{\r\nbackground: #eaebec;\r\n}\r\nh1{\r\nfont-size: 50px;\r\ntext-align: center;\r\n}\r\n.container{\r\nbackground: #fff;\r\nwidth: 800px;\r\npadding: 20px;\r\nmargin: 50px auto;\r\n}\r\n</style>\r\n</head>\r\n\r\n<body>\r\n\r\n<h1>SimpleMDE Dome</h1>\r\n\r\n<div class=\"container\">\r\n<textarea name=\"\" rows=\"\" cols=\"\" id=\"editor\"></textarea>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n// Most options demonstrate the non-default behavior\r\nvar simplemde = new SimpleMDE({\r\n    autofocus: true,\r\n    autosave: {\r\n        enabled: true,\r\n        uniqueId: \"editor01\",\r\n        delay: 1000,\r\n    },\r\n    blockStyles: {\r\n        bold: \"__\",\r\n        italic: \"_\"\r\n    },\r\n    element: document.getElementById(\"editor\"),\r\n    forceSync: true,\r\n    hideIcons: [\"guide\", \"heading\"],\r\n    indentWithTabs: false,\r\n    initialValue: \"SimpleMDE Dome\",\r\n    insertTexts: {\r\n        horizontalRule: [\"\", \"\\n\\n-----\\n\\n\"],\r\n        image: [\"![](http://\", \")\"],\r\n        link: [\"[\", \"](http://)\"],\r\n        table: [\"\", \"\\n\\n| Column 1 | Column 2 | Column 3 |\\n| -------- | -------- | -------- |\\n| Text     | Text      | Text     |\\n\\n\"],\r\n    },\r\n    lineWrapping: false,\r\n    parsingConfig: {\r\n        allowAtxHeaderWithoutSpace: true,\r\n        strikethrough: false,\r\n        underscoresBreakWords: true,\r\n    },\r\n    placeholder: \"placeholder\",\r\n   /* previewRender: function(plainText) {\r\n    console.log(plainText)\r\n        return customMarkdownParser(plainText); // Returns HTML from a custom parser\r\n    },\r\n    previewRender: function(plainText, preview) { // Async method\r\n        setTimeout(function(){\r\n            preview.innerHTML = customMarkdownParser(plainText);\r\n        }, 250);\r\n\r\n        return \"Loading...\";\r\n    },*/\r\n    promptURLs: true,\r\n    renderingConfig: {\r\n        singleLineBreaks: false,\r\n        codeSyntaxHighlighting: true,\r\n    },\r\n    shortcuts: {\r\n        drawTable: \"Cmd-Alt-T\"\r\n    },\r\n    showIcons: [\"code\", \"table\"],\r\n    spellChecker: false,\r\n    status: false,\r\n    status: [\"autosave\", \"lines\", \"words\", \"cursor\"], // Optional usage\r\n    status: [\"autosave\", \"lines\", \"words\", \"cursor\", {\r\n        className: \"keystrokes\",\r\n        defaultValue: function(el) {\r\n            this.keystrokes = 0;\r\n            el.innerHTML = \"0 Keystrokes\";\r\n        },\r\n        onUpdate: function(el) {\r\n            el.innerHTML = ++this.keystrokes + \" Keystrokes\";\r\n        }\r\n    }], // Another optional usage, with a custom status bar item that counts keystrokes\r\n    styleSelectedText: false,\r\n    tabSize: 4,\r\n    //toolbar: flase,\r\n    //toolbarTips: false,\r\n});\r\n</script>\r\n\r\n</body>\r\n</html>\r\n```','published',1,1550562907406),(18,'轻量级web富文本编辑器wangEditor介绍','/blogs/wangeditor/poster.jpg','基于javascript和css开发的html富文本编辑器，开源免费。支持自定义编辑器样式。支持模块化：require.js，seajs，webpack等都有解决方案。轻量、易用、UI设计精致漂亮。文档易读、交流方便，更接地气。支持移动版。','\n>今天发现了一个不错的富文本编辑器，记录下来，同时分享给大家。\n\n[在线demo](/blogs/wangeditor/demo.html)\n\n#### 特性\n\n* 基于javascript和css开发的html富文本编辑器，开源免费。\n* 支持自定义编辑器样式。\n* 支持模块化：require.js，seajs，webpack等都有解决方案。\n* 与国产编辑器 百度ueditor 和 kindeditor 相比，它轻量、易用、UI设计精致漂亮。\n* 与国外编辑器 bootstrap-wysiwyg 和 simditor 相比，它文档易读、交流方便，更接地气。\n* 它还会根据使用者的反馈不断完善，未来将支持移动版。\n\n#### 文档\n\nwangEditor的文档非常详尽，直接到对应的网站查看即可。\n\n* [官网](http://www.wangeditor.com/)\n* [文档](http://www.kancloud.cn/wangfupeng/wangeditor2/113961)\n* [github](https://github.com/wangfupeng1988/wangEditor/)\n\n#### demo\n\n这是一个整合requirejs的基本demo，拷贝好这些文件就可以运行了，运行效果可以参考页面的banner。\n\n**demo.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />ame=\"renderer\" content=\"webkit\">\n<title>轻量级web富文本编辑器wangEditor介绍</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"wangEditor/css/wangEditor.css\"/>\n<style type=\"text/css\">\n*{margin: 0;padding: 0;}\nbody{background: #eaebec;}\nh1{font-size: 40px;text-align: center;padding: 20px 0;}\n            .container{background: #fff;width: 900px;padding: 20px;margin: 50px auto;}\n</style>\n</head>\n<body>\n<div class=\"container\">\n<h1>轻量级web富文本编辑器-wangEditor</h1>\n<div id=\"editor\" style=\"height: 400px;\"></div>\n</div>\n<script src=\"//cdn.bootcss.com/require.js/2.3.2/require.min.js\" data-main=\"main.js\"></script>\n</body>\n</html>\n\n```\n\n**main.js**\n\n```\nrequire.config({\npaths:{\n\'jquery\':\'http://cdn.bootcss.com/jquery/1.9.1/jquery.min\',\n\'wangEditor\': \'wangEditor/js/wangEditor.min\',\n\'editorCfg\':\'wangEditor/wangEditor.config\'\n}\n});\nrequire([\'wangEditor\',\'editorCfg\'], function(wangEditor,editorCfg){\n    $(function(){\n        var editor = new wangEditor(\'editor\');\n        editor.config.emotions = editorCfg.emotions\n        editor.create();\n    });\n});\n\n```\n\n**wangEditor.config.js**\n\n```\ndefine(function (){\n　　　　emotions = {\n    // 支持多组表情\n    // 第一组，id叫做 \'default\' \n    \'default\': {\n        title: \'默认\',  // 组名称\n        data: \'http://www.wangeditor.com/wangEditor/test/emotions.data\'  // 服务器的一个json文件url，例如官网这里配置的是 http://www.wangeditor.com/wangEditor/test/emotions.data\n    },\n    // 第二组，id叫做\'weibo\'\n    \'weibo\': {\n        title: \'微博表情\',  // 组名称\n        data: [  // data 还可以直接赋值为一个表情包数组\n            // 第一个表情\n            {\n                \'icon\': \'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif\',\n                \'value\': \'[草泥马]\'\n            },\n            // 第二个表情\n            {\n                \'icon\': \'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif\',\n                \'value\': \'[神马]\'\n            }\n            // 下面还可以继续，第三个、第四个、第N个表情。。。\n        ]\n    }\n    // 下面还可以继续，第三组、第四组、、、\n};\n　　　　return {\n　　　　　　emotions\n　　　　};\n});\n```\n\n','published',1,1498317717891),(19,'后台管理系统页面模板','/blogs/bsf/poster.jpg','一个好用的后台管理系统模板;html+css组织，不对js产生影响。当侧边栏内容较高时，自动滑动。支持公共文件include面向对象、好用的css样式。','>这个模板是我总结多个后台管理项目整合出来的，并已有多个线上项目。现在当我碰到这样的需求时，都是基于这个模板进行二次开发，节省了不少精力。所以将这套方法总结出来，同大家分享。\n\n>github：[https://github.com/justyeh/BSF](https://github.com/justyeh/BSF)\n\n[在线demo](/blogs/bsf/demo.html)\n\n#### 特性\n\n* html+css组织，不对js产生影响。\n* 当侧边栏内容较高时，自动滑动。\n* 支持公共文件include。\n* 面向对象、好用的css样式。\n\n#### 页面结构\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />ame=\"renderer\" content=\"webkit\">\n<meta name=\"keywords\" contect=\"keywords\">\n    <meta name=\"Description\" contect=\"Description\">\n     <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"img/favicon.ico\">\n<title>xx backend</title>\n<!--[if lte IE 9]>\n            <script src=\"js/browser-not-supported-ie10.js\"></script>\n        <![endif]-->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\"/>\n</head>\n<body>\n\n<div class=\"page\">\n\n<include src=\"header.html\"></include>\n<include src=\"silder.html\"></include>\n\n<!--main wrap-->\n<div class=\"main\">\n<div>页面主体内容</div>\n</div><!--main wrap end-->\n\n</div>\n\n<div class=\"dialog\">\n<div class=\"wrap\">\n<p>弹出框内容</p>\n</div>\n</div>\n\n<script src=\"js/include.js\"></script>\n\n</body>\n</html>\n```\n\nBSF采用的是内滚动布局，关于内滚动布局，腾讯isux有一篇专门的文章，我将它转载了过来：[内滚动布局的概念与实现方法](http://justyeh.com/2017/02/22/inner-scroll-layout/)\n\n\n#### CSS的组织\n\nBSF定义了一些常用的样式，命名参考了bootstrap。当然，这里面有些样式你有可能使用不上，直接删除就好了。\n\n**reset**\n```\n@charset \"utf-8\";\nbody,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,legend,input,textarea,p,blockquote,th,td,a,img,span{margin:0;padding:0;}\nbody{font-size:14px;font-family: \"Arial\",\"Microsoft YaHei\",\"微软雅黑\",sans-serif;background: #fff;color: #454545;}\naddress,caption,cite,code,dfn,em,th,var,i{font-style:normal;font-weight:normal;}\nh1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal;}\ninput,textarea,select{font-family:inherit;font-size:inherit;*font-size: 100%;font-weight:inherit;outline:none;}\ntable{border-collapse:collapse;border-spacing:0;}\nfieldset,img,abbr,acronym{border:0;}\na{text-decoration: none;}\na:focus,a:active,button::-moz-focus-inner,input[type=\"reset\"]::-moz-focus-inner,input[type=\"button\"]::-moz-focus-inner,input[type=\"submit\"]::-moz-focus-inner,select::-moz-focus-inner,input[type=\"file\"] > input[type=\"button\"]::-moz-focus-inner{outline: none;}\ninput[type=\'button\'],input[type=\'submit\']{border:0;}\nol,ul ,li{list-style-type:none;list-style: none;}\ncaption,th{text-align:left;}\nimg{vertical-align:middle;border:0;}\np{line-height: 1;}\nbutton,a{cursor: pointer;outline: none;}\nimg{display: inline-block;vertical-align: middle;}\n*::after, *::before{box-sizing: border-box;}\n*{box-sizing: border-box;}\nhtml,body{height: 100%;}\nbody{overflow: hidden;background: #fff;line-height: 1;min-width: 800px;position: relative;}\n```\n\n**工具样式**\n```\n.clearfix:before,.clearfix:after{content:\"\";display:table; } \n.clearfix:after{clear:both;} \n.clearfix{*zoom:1;/*IE/7/6*/}\n.fl{float:left;}\n.fr{float:right;}\n```\n\n**定位**\n```\n.clearfix:before,.clearfix:after{content:\"\"; display:table;}\n.clearfix:after{clear:both;}\n.clearfix{*zoom:1;/*IE/7/6*/}\n.relative{position: relative;}\n.absolute{position: absolute;}\n.fl{float:left;}\n.fr{float:right;}\n```\n\n**文字**\n```\n.bold{font-weight: bold;}\n.fs36{font-size: 36px !important;}\n.fs30{font-size: 30px !important;}\n.fs24{font-size: 24px !important;}\n.fs18{font-size: 18px !important;}\n.fs16{font-size: 16px !important;}\n.text-c{text-align: center;}\n.text-r{text-align: right;}\n.text-l{text-align: left !important;}\n.text-ellipsis{overflow: hidden;text-overflow: ellipsis;white-space: nowrap;}\n```\n\n**颜色**\n```\n.c-green{color: #2fa820 !important;}\n.c-blue{color: #1fbad6 !important;}\n.c-red{color: #f32f00 !important;}\n```\n\n**动画**\n\n```\n.transition3{transition: all 0.3s ease;-moz-transition: all 0.3s ease;-webkit-transition: all 0.3s ease;}\n.transition5{transition: all 0.5s ease;-moz-transition: all 0.5s ease;-webkit-transition: all 0.5s ease;}\n.transition8{transition: all 0.8s ease;-moz-transition: all 0.8s ease;-webkit-transition: all 0.8s ease;}\n```\n\n**分页**\n\n```\n.pager{padding: 40px 0;}\n.pager a, .pager span{background-color: #fff; border: 1px solid #e4e9ee; color: #758796; float: left; font-family: arial; font-size: 14px; line-height: 1.42857; margin-left: 3px; padding: 3px 9px; position: relative; text-decoration: none;}\n.pager .current{background: #1fbad6 !important; border-color: #1fbad6 !important; color: #fff !important;}\n.pager a:hover{background: #fff none repeat scroll 0 0; border-color: #1fbad6; color: #1fbad6;}\n.pager .current.prev, .pager .current.next{background: #fff none repeat scroll 0 0 !important; border-color: #ddd !important; color: #ccc !important; cursor: not-allowed;}\n```\n\n**表格**\n\n```\n.table{padding: 20px 0;}\n.table table{border-collapse: collapse;border-spacing:0;width: 100%;}\n.table table th,.table td{text-align: center;vertical-align: middle;}\n.table-grid th,.table-grid td{padding: 20px 10px;border: solid 1px #ccc;}\n.table-grid th{color: #18b7ee;font-size: 18px}\n.table-grid td{color: #666;font-size: 16px}\n.table-zebra tr{border-bottom: solid 1px #ebebeb;}\n.table-zebra th{padding: 18px 10px;font-size: 18px;color: #161616;}\n.table-zebra td{padding: 13px 10px;font-size: 20px;color: #504f4f;}\n.table-default th{font-size: 20px;color: #484848;padding: 50px 10px;}\n.table-default td{font-size: 18px;color: #5f5f5f;padding: 10px;}\n```\n\n**按钮**\n\n```\n.btn{display: inline-block;width: 95px;text-align: center;font-size: 18px;height: 40px;border-style: solid;border-width: 1px;border-radius: 8px;position: relative;}\na.btn{line-height: 38px;}\n.btn-default{color: #504f4f;border-color: #d0d0d0;}\n.btn-primary{color: #18b7ee;border-color: #18b7ee;}\n.btn-danger{color: #da030d;border-color: #da030d;}\n```\n\n**弹窗**\n\n```\n.dialog{position: fixed;top: 0;left: 0;bottom: 0;right: 0;background: rgba(0,0,0,0.53);overflow-y: auto;padding: 100px 0;/*display: none;*/}\n.dialog .wrap{background: #fff;margin: 0 auto;width: 800px;padding: 20px;}\n```\n\n**页面样式**\n\n```\n/*page*/\n.page{position: relative;width: 100%;height: 100%;}\n\n/*header*/\n.header{position: absolute;top: 0;height: 80px;left: 0;right: 0;background: #04acf7;}\n.header p{height: 80px;line-height: 80px;font-size: 30px;color: #fff;padding-left: 20px;}\n.header a{display: inline-block;padding: 0 50px;font-size: 18px;color: #fff;height: 80px;line-height: 80px;}\n\n/*silder*/\n.silder{position: absolute;top: 80px;left: 0;bottom: 0;width: 240px;background: #fff;box-shadow: 0 5px 10px rgba(0,0,0,0.2);overflow: hidden;}\n.silder .link-menu{position: absolute;top: 0;bottom: 0;left: 30px;overflow-y: auto;width: 210px;height: auto;}\n.silder dl{margin-right: 50px;}\n.silder dt{font-size: 20px;color: #c2c2c2;border-left: solid #c2c2c2 5px;margin: 40px 0 20px 0;padding-left: 15px;}\n.silder dd{padding: 5px 0 5px 20px;}\n.silder a{font-size: 16px;color: #c2c2c2;}\n.silder .act dt{border-left-color: #18b7ee;color: #18b7ee;}\n.silder .act a{color: #18b7ee;}\n\n/*main*/\n.main{position: absolute;top: 80px;left: 240px;bottom: 0;right: 0;overflow-x: hidden;overflow-y: auto;}\n.main>div:last-child{margin-bottom: 50px;}\n\n/*媒体查询*/\n@media only screen and (max-width: 1280px){\n.silder{width: 180px;}\n.silder .link-menu{left: 10px;}\n.main{left: 180px;}\n}\n```\n\n#### JavaScript\nBSF有两个个JS文件：\n\n```\n<!--[if lte IE 9]>\n    <script src=\"js/browser-not-supported-ie10.js\"></script>\n<![endif]-->\n```\n\n这个文件的目是当浏览器不支持时改进行如何处理，BSF的做法是直接跳转并提示用户升级浏览器。\n\n\n```\n<script src=\"js/include.js\"></script>\n```\n\n在很多项目中，header和silder文件是公用的，includejs是一个前端模板文件加载器，用于引入公用的文件，请注意：*includejs要在服务器环境运行*。\n\n除此之外，BSF没有关于js的内容，所以需要引入什么脚本（jquery or other）文件由你自己决定。\n','published',1,1499670446357),(20,'内滚动布局的概念与实现方法','/blogs/inner-scroll-layout/inner-scroll-layout.jpg','随着显示器设备越大越宽越密，以及现代web技术的发展。web站点已经开始有了从传统的瀑布式网页向类桌面软件风格站点转变的趋势。本文详细介绍了“内滚动布局”的概念，实现以及','>转载自腾讯isux，原文地址：[https://isux.tencent.com/inner-scroll-layout.html](https://isux.tencent.com/inner-scroll-layout.html)\n\n#### 一、什么是内滚动布局？\n\n所谓“内滚动布局”，顾名思义就是主滚动条在页面内部的布局，是相对于传统的<html>滚动而言的，例如，下图所示滚动条，是从头部下方开始：\n\n![内滚动示意](/blogs/inner-scroll-layout/inner-scroll-layout1.png)\n\n传统的页面滚动，基本上是相对于整个浏览器窗体，例如，QQ视频首页：\n\n![通常滚动示意](/blogs/inner-scroll-layout/inner-scroll-layout2.png)\n\n#### 二、为什么会有内滚动布局？\n\n随着显示器设备越大越宽越密，以及现代web技术的发展。web站点已经开始有了从传统的瀑布式网页向类桌面软件风格站点转变的趋势。比方说，QQ音乐的首页目前是这样子的：\n\n![QQ音乐首页截图](/blogs/inner-scroll-layout/inner-scroll-layout3.jpg)\n\n以后可能就会变成这样子：\n\n![QQ音乐首页截图](/blogs/inner-scroll-layout/inner-scroll-layout4.jpg)\n\n“纳尼，这不就是现在的QQ音乐软件界面截图？”“这位同学眼神很犀利，没错，这就是有着全国最大的正版高质量乐库的QQ音乐PC版截图”。\n\n我们可以局部放大，会发现，是个实打实的内滚动布局。\n\n![QQ音乐PC软件内滚动截图](/blogs/inner-scroll-layout/inner-scroll-layout5.png)\n\n不仅是QQ音乐，其他很多桌面软件都是这种内滚动布局，比方说QQ软件管家等等。\n\n![QQ软件管家内滚动截图](/blogs/inner-scroll-layout/inner-scroll-layout6.png)\n\n有此可见，一旦强交互的传统web页面桌面软件化，内滚动布局是绕不开的一堵墙，了解之还是很有必要的。\n\n#### 三、如何实现内滚动布局？\n\n既然是内滚动，就有必要干掉浏览器原生<html>的滚动条，这个很简单：\n\n```\nhtml { overflow: hidden; }\n```\n\n“然后呢？”我想了想，好像然后就没有“然后”了，让一个div容器滚动就完事了。\n\n然而，事非经过不知难，原理虽然简单没说头，但是细节操作还是有些上手成本的。\n\n为了更好理解，我们拿实例说话。最近半年一直在参与企业QQ账户中心改版的项目，你可以看成是企业后台管理系统。这里有几个关键字，一是**企业**，二是**管理系统**。\n\n##### 1. 企业\n\n这里为什么要强调是“企业”呢？因为企业产品的用户一般都是购买了企业QQ产品的企业的员工，有一定IT技能的人。因此，用户的浏览器的现代感就比Qzone用户强不少。下图为同事在2015-05-20这个爱意满满的日子拉的userAgent数据：\n\n![企业QQ用户浏览器数据](/blogs/inner-scroll-layout/inner-scroll-layout7.png)\n\n如果我们将支持CSS3 animation的浏览器称之为现代浏览器，可以发现，企业产品的用户，70%~80%的用户都是使用的现代浏览器。亲们，近8成的用户都是使用现代浏览器，这就意味着，企业产品其实可以作为现代web技术的试验田，在为用户提供更好体验更高质量产品的同时，为日后其他产品的现代化改造提供了宝贵的借鉴经验。而本文的内滚动布局，就是万千经验中的一小个。\n\n##### 2. 管理系统\n\n“管理系统”意味着站点以强交互为主，会有很多类似办公软件的交互操作在里面。如果是更偏重浏览的站点，例如企业QQ官网，显然，传统的垂直瀑布式的网站是更适合的，滚动浏览，再滚动，再浏览。但是，企业管理系统如此庞大，操作如此频繁，交互如此之多，传统的上下式网站显然很难让用户用得非常得心应手。下图为以前企业QQ账户中心组织结构页面（测试页面）的真容：\n\n![旧企业账户中心组织架构页面](/blogs/inner-scroll-layout/inner-scroll-layout8.png)\n\n企业QQ用户浏览器数据\n\n看着此页面，立马让我想起了6年前刚毕业那会的青葱岁月，那时候的页面的基本上就是这样的调调，小小的空间里有着小小的世界。时代发展，再辉煌的过去，如果没有改变，终将会被埋汰。\n\n正是由于以上两点，设计师设计的时候，大胆创新，设计成了**全屏自适应、半响应、类PC软件风格(内滚动)**的管理站点，下图为上面老页面同样数据的新测试页面截图：\n\n![新企业账户中心成员与权限页面](/blogs/inner-scroll-layout/inner-scroll-layout9.png)\n\n回到内滚动布局本身。\n\n新版企业账户中心全站，顶部以及左侧固定，不跟随滚动，右侧主体内滚动，如何实现呢？\n\n由于企业产品不用管0.4%的IE6用户，因此，事件就变得简单地多了。我们可以利用绝对定位元素的拉伸特性，使内滚动容器高度自适应匹配。HTML主结构示意如下：\n```\n\nbody\n -- page\n    -- header\n    -- side\n    -- content\n```\n\n其中page扮演传统页面<body>的角色。这是一个预留设计，防止为了满足某些功能或交互体验需要，一个页面同时出现多个类似结构页面的情况。或者这么说吧，把所有页面内容放在一个page中，此时page就好比一个可以移动的房子，回头你跳槽来腾讯了，房子可以一起带过来，原来的位置可以被其他房子代替。但是，你如果直接放在<body>中，由于<body>只能是一个，不动产，此时想要做整体迁移，难度就较大，同时项目几乎成型，全局修改成本高高风险大。不过凡事都有两面性，这样的折腾可以减少你白头发的数目，因为你会因操劳过度头发直接脱掉的。\n\npage相关CSS如下：\n```\n.page { position: absolute; top: 0; right: 0; bottom: 0; left: 0; }\n```\n\n应该很好理解，绝对定位，满屏拉伸，等同于：\n\n```\n.page { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }\n```\n\n由于省了好几个字节，所以我舍弃了IE6使用了上面写法。\n\n对于固定的头部header或者固定的侧边side, 你可以使用语义明确的position:fixed定位，或者直接使用position:absolute，因为滚动容器跟他们平级，所以，absolute其实就是fixed效果。\n\n讲到这里就不得不说点题外话，很多人会遇到移动端position:fixed的底部输入框定位的头疼问题，如何解决？就是使用本文介绍的内滚动布局，然后底部使用position:absolute模拟fixed效果。 \n代码方面，同样就是拉伸拉伸：\n```\n.header { height: 62px; position: absolute; top: 0; right: 0; left: 0; }\n.side { width: 200px; position: absolute; top: 62px; bottom: 0; left: 0; }\n```\n\n最后就是高能的content, 还是一样的套路：\n\n```\n.content { position: absolute; top: 62px; right: 0; bottom: 0; left: 200px; overflow: auto; }\n```\n\n主体内容全部都在content里面玩耍。于是，一个高宽均自适应浏览器窗体的内滚动布局就成型了。\n\n四、内滚动布局的赏与罚\n\n我们站在上帝视角审视一下内滚动布局，本质上就是滚动容器的迁移，职能下发。所以绝大部分情况下，跟我们平常玩转页面的路数没什么区别。\n\n但是，毕竟江山易主，差异还是存在的。最简单的例子就是对滚动事件的影响。很多滚动插件，包括以前的脚本，我们可能都是这么写的：\n```\n$(window).scroll(function() {\n    // 跟我一起翻滚吧，骚年……\n});\n```\n\n但是，在内滚动布局下，由于滚动的容器不是window窗体，不是<html>元素，因此，上面滚动事件八辈子都不会执行。我们需要调整，由于现在，页面的主滚动条是.content, 因此，我们可以：\n\n```\n$(\".content\").scroll(function() {\n    // 跟我一起翻滚吧，骚年 again……\n});\n```\n\n你以为事情就这么完了吗？太天真了！以前我们的滚动条是跟浏览器上边缘是靠在一起的，但是，自从变成了内滚动，滚动条是跟网站公用头部下边缘排排站，这会造成什么问题呢？就是一些offset的计算要发生一些变化。举个例子，我们希望表格头部操作区域有类似position:sticky效果，也就是视区内一起翻滚，要被滚出去的时候，fixed固定，不跟随。\n\n![表格头部操作区域固定](/blogs/inner-scroll-layout/inner-scroll-layout10.png)\n\n此时，我们的最大滚动高度值，就需要把网站头部的高度考虑进去（传统窗体滚动不需要，因为值是0）：\n\n```\nvar maxScrollTop = $(\"#tableHeader\").offset().top - $(\".header\").height();\n```\n\n以上这个，我们可以称之为“变化”，与原本的实现相比无功无过，一种变化一种转移。实际上，内滚动布局还会带来带有质变性质的一些特性。\n\n##### 无法滚动的弹出层\n\n基本上，是个像样的web2.0网站都会有弹框web组件，一个黑色半透明的overlay层，上面摇曳着弹框面板，例如这样的：\n\n![弹框示意](/blogs/inner-scroll-layout/inner-scroll-layout11.png)\n\n对于黑色半透明覆盖层，传统实现是这样的：如果要兼容IE6浏览器，一般是absolute绝对定位，高度由JS计算赋予；如果不需要管IE6, 则可以使用fixed固定定位。\n\n然而，在内滚动布局下，“赏”就出来了，就算需要兼容IE6浏览器，黑色半透明高宽100%自适应覆盖也不需要任何JS计算的帮助，也不需要监听window的resize事件，直接CSS就可以搞定。很简单：\n```\n.overlay { position: absolute; left: 0; top: 0; width: 100%; height: 100%; }\n```\n\n为啥一行CSS就能搞定所有场景？因为使用的是内滚动布局，如下图示意，屏幕就这么高，滚动在里面，自然自适应：\n\n![半透明覆盖层原理示意](/blogs/inner-scroll-layout/inner-scroll-layout12.png)\n\n看上去是内滚动布局带来的一个小小的“赏”，但是，实际上，埋下了一个不小的“罚”。\n\n随意改变滚动容器最大的问题在于，当存在覆盖层的时候，会影响背后页面内容的滚动。\n\n100%尺寸的position:absolute/fixed的覆盖层，会覆盖任何非<html>元素(包括<body>)(包括这些元素的滚动条)，因此，只要覆盖+滚动容器改变，页面就无法滚动。\n\n内滚动布局是典型的改变浏览器默认滚动容器的布局，自然覆盖层一出现，就没法滚动。不过这也没什么，对吧，弹框出现时候，页面背景没法滚也挺好的。\n\n但是，麻烦的事情是，如果弹框自身高度很高，却又没法滚动呢(浏览器可用高度700像素，弹框有900像素高)？\n\n传统布局下的弹框，如果高度很高，直接设置弹框容器position:absolute就可以愉快地上下翻滚了。但是，在内滚动布局下，弹框根本就不在滚动容器里面，翻滚一说从何谈起？\n\n大危机！怎么办！？\n我们新版企业账户中心就遇到这个问题，我是这么解决的——overlay和dialog合体。\n\n#### 合体与滚动\n\n合体是什么意思呢？基本上，90%+的弹框组件，半透明覆盖层overlay和弹框dialog是两个并列的兄弟关系的独立的元素，这种设计的好处在于overlay组件可以复用。实际上，我们要实现一个弹框效果，只要一层div标签就可以了，核心就是使用兼容的RGBA背景色技巧，然后弹框HTML放在里面：\n\n```\n.container {\n    position: absolute; top: 0; left: 0; bottom: 0; width: 100%;\n    background-color: rgba(0,0,0,.5);\n    filter: progid:DXImageTransform.Microsoft.gradient(startcolorstr=#7F000000,endcolorstr=#7F000000);\n    overflow: auto;\n}\n:root .container {\n    /* IE9 无 filter */\n    filter: none;\n}\n```\nHTML结构示意如下：\n\n```\n<div class=\"container\">\n    <dialog></dialog>\n</div>\n```\n\n此时，弹框在一个可滚动的容器之中，妈妈再也不用担心我不能愉快地翻滚了！\n\n![半透明覆盖层原理示意](/blogs/inner-scroll-layout/inner-scroll-layout13.gif)\n\n#### 五、结束语\n\n由于传统窗体滚动已经深入人心，所以我们可能会觉得内滚动布局似乎有些坑；但是，如果当年是内滚动布局天下，我们又该如何看待新兴的窗体滚动布局呢？然后，从产品的角度讲，内滚动布局在操作如此频繁的重交互项目中所带来的交互体验上的改进，要远比经验不足带来的额外开发成本要大很多很多。','published',1,1499670053724),(21,'web代码编辑器CodeMirror','/blogs/codemirror/codemirror-banner.jpg','CodeMirror是一个用于在浏览器编辑代码的javascript插件，为各种编程语言实现关键字，函数，变量等代码高亮显示，CodeMirror提供丰富的api和可扩展功能以及多个主题样式，能满足您各种项目的需求','>这两天有个项目需要使用在线代码编辑器，要求支持语法高亮、自动缩进、可切换高亮语法框架等要求。最终我选择了CodeMirror，发现这个插件确实不错，将其记录在我的博客中。\n\n>本文有部分内容参考自知乎网友var dump的文章。连接：[https://zhuanlan.zhihu.com/p/22163474](https://zhuanlan.zhihu.com/p/22163474\n\n[在线DEMO](/blogs/codemirror/demo.html)\n\n\n#### 关于CodeMirror\n\nCodeMirror是一个用于在浏览器编辑代码的javascript插件，为各种编程语言实现关键字，函数，变量等代码高亮显示，CodeMirror提供丰富的api和可扩展功能以及多个主题样式，能满足您各种项目的需求。\n\nCodeMirror支持大量语言的语法高亮，包括C、C++、C#、Java、Perl、PHP、JavaScript、Python、Lua、Go、Groovy、Ruby等，以及diff、LaTeX、SQL、wiki、Markdown等文件格式。此外，CodeMirror还支持代码自动完成、搜索/替换、HTML预览、行号、选择/搜索结果高亮、可视化tab、Emacs/VIM键绑定、代码自动格式等。\n\nCodeMirror采用MIT开源许可协议，目前已经被集成到各种应用程序中，如Adobe Brackets、CoDev、Light Table等开发环境，还被作为各种SQL、Haxe、JavaScript在线编辑器的基础库来使用。\n\n* [官网](http://codemirror.net/)\n\n* [github](http://codemirror.net/)\n\n今天（2017-02-23）到git下载代码的时候，发现里面的demo调不通，原来是`lib`文件夹缺少了`codemirror.js`文件，所以大家在使用的时候还是到官网下载比较好。\n\n#### 特性\n\n下面是CodeMirror的主要特性：\n\n* 语法高亮\n* 支持超过100中语言\n* 动态、可组合的语法提示模块\n* 代码自动完成\n* 代码折叠\n* 可配置快捷键\n* Vim、Emacs和Sublime Text键盘映射绑定\n* 文本搜索和替换\n* 括号和标签匹配\n* 支持更改主题\n* 显示行号\n* 支持拆分视图\n* 插件支持和丰富的API\n* 支持各种现代浏览器、IE7以上\n\n#### 使用\n\n下面是我在项目里面使用CodeMirror的代码，通过这个[demo](#demo)，你可以了解到以下内容：\n\n1. 切换主题\n2. 设置获取内容\n3. 多实例支持\n4. 切换语言\n5. ...\n\n**引入文件**\n\nCodeMirror的语言和主题文件成模块化组织，可能会引入比较多的文件：\n\n```\n<!--核心代码和样式-->\n<link rel=\"stylesheet\" href=\"js/codemirror-5.24.2/lib/codemirror.css\"> \n<script src=\"js/codemirror-5.24.2/lib/codemirror.js\"></script> \n\n<!--语言高亮支持文件：语言放在mode文件件中-->\n<script src=\"js/codemirror-5.24.2/mode/clike/clike.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/xml/xml.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/javascript/javascript.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/vbscript/vbscript.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/css/css.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/sql/sql.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/htmlmixed/htmlmixed.js\"></script>\n\n<!--主题文件:主题放在theme文件件中-->\n<link rel=\"stylesheet\" href=\"js/codemirror-5.24.2/theme/icecoder.css\">\n<link rel=\"stylesheet\" href=\"js/codemirror-5.24.2/theme/eclipse.css\">\n```\n\n另外，下面这些文件也是比较常用的（本文中没有使用）：\n\n```\n<!--引入js，绑定Vim-->\n<link rel=\"stylesheet\" href=\"codemirror-5.12/addon/dialog/dialog.css\">\n<script src=\"codemirror-5.12/keymap/vim.js\"></script>\n<script src=\"codemirror-5.12/addon/search/searchcursor.js\"></script>\n<!--改善vim输入命令时的样式-->\n<script src=\"codemirror-5.12/addon/dialog/dialog.js\"></script>\n\n<!--支持代码折叠-->\n<link rel=\"stylesheet\" href=\"codemirror-5.12/addon/fold/foldgutter.css\"/>\n<script src=\"codemirror-5.12/addon/fold/foldcode.js\"></script>\n<script src=\"codemirror-5.12/addon/fold/foldgutter.js\"></script>\n<script src=\"codemirror-5.12/addon/fold/brace-fold.js\"></script>\n<script src=\"codemirror-5.12/addon/fold/comment-fold.js\"></script>\n\n<!--全屏模式-->\n<link rel=\"stylesheet\" href=\"codemirror-5.12/addon/display/fullscreen.css\">\n<script src=\"codemirror-5.12/addon/display/fullscreen.js\"></script>\n\n<!--括号匹配-->\n<script src=\"codemirror-5.12/addon/edit/matchbrackets.js\"></script>\n\n<!--自动补全-->\n<link rel=\"stylesheet\" href=\"codemirror-5.12/addon/hint/show-hint.css\">\n<script src=\"codemirror-5.12/addon/hint/show-hint.js\"></script>\n<script src=\"codemirror-5.12/addon/hint/anyword-hint.js\"></script>\n```\n\n**页面**\n\n```\n<div class=\"container\">\n<div class=\"codeEditor\">\n<div class=\"editor\">\n<textarea id=\"code\"></textarea>\n</div>\n<div class=\"editor-seleteor\">\n<label>语言</label>\n<select class=\"selector\" onchange=\"selectLanguage(this)\">\n<option value=\"java\">java</option>\n<option value=\"html\">html</option>\n<option value=\"javascript\">javascript</option>\n<option value=\"css\">css</option>\n<option value=\"sql\">sql</option>\n<option value=\"c/c++\">c/c++</option>\n</select>\n<label>主题</label>\n<select class=\"selector\" onchange=\"selectTheme(this)\">\n<option value=\"java\">deault</option>\n<option value=\"html\">eclipse</option>\n<option value=\"javascript\">icecoder</option>\n<option value=\"css\">css</option>\n<option value=\"sql\">sql</option>\n<option value=\"c/c++\">c/c++</option>\n</select>\n</div>\n</div>\n```\n\n**调用**\n\n```javascript\n<script>\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers: true,\n        styleActiveLine: true,\n        matchBrackets: true,\n        mode: \"text/x-c\"\n        width: \"100%\",\n        height: \"100%\",\n        keyMap: \"default\",\n        lineWrapping: true,\n        foldGutter: true,\n        gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n        indentUnit: 4,\n        showCursorWhenSelecting: true,\n        extraKeys: {\n            \"Shift-Alt-Enter\": function (cm) {\n                cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n            },\n            \"Ctrl-Space\": \"autocomplete\",\n            \"Ctrl-F7\": function () {\n                $(\'#code_submit\').click();\n            }\n        }\n});\n</script>\n```\n\n\n\n#### 常见问题\n\n**设置/获取内容**\n\n```\n//该方法得到的结果是经过转义的数据\neditor.getValue();\n//该方法得到的结果是未经过转义的数据\neditor.toTextArea();\neditor.getTextArea().value;\n\n//如果是通过 JS 进行表单提交，可以在提交的 JS 代码中这样使用：\n//将 Codemirror 的内容赋值给 Textarea\n$(\"#content\").text(editor.getValue());\n\n//Codemirror赋值\neditor.setValue(\'为codemirror赋值\');\n```\n\n**设置/获取属性值**\n在构造editor时相关的属性大多数都可以动态的指定。如设置显示行号可以不在构造editor时指出，只需构造出editor之后，调用`setOption`方法：\n\n```\neditor.setOption(\"lineNumbers\",true);//是否显示行号\neditor.setOption(\"theme\",\"seti\");//设置主题\n```\n\n获取属性值，也有对应的`setOption`方法，可以用：`editor.getOption(\"属性名\")`来获取editor某属性的值，在本例中：\n```\neditor.getOption(\"theme\")\n```\n\n将返回\"seti\"。\n\n\n\n**更改外观**\n\n可以自定义编辑器的大小，只需设置如下样式即可：\n```\n<style type=\"text/css\">\n     .CodeMirror{border:1px solid black;font-   size:15px;width:100px;height:100px}\n</style>\n```\n\n**快捷键绑定**\n\n在extra中可绑定函数到按键上，例如：\n\n```\nvar editor=CodeMirror.fromTextArea(document.getElementById(\"code\"),{\n    mode:\"text/x-java\",\n    extraKeys:{\n        \"Ctrl-Space\":\"autocomplete\",\n        \"Ctrl-F7\":function () {\n                    alert(\"绑定了Ctrl-F7\");\n                  },\n        \"Shift-Alt-Enter\": function (cm) {\n                   cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n                  }\n    }\n});\n```\n\n需要注意的是，如果将esc键绑定了某函数，那么Vim可能无法正常工作。\n\n#### 配置项\n\nCode Mirror非常强大，上面的例子说明了其基本的使用方法，足够应付大多数使用场景，当然还有很多功能未能一一说明。如要深入学习，请阅读其[官方文档](http://codemirror.net/)。下面是部分内容：\n\n**value: string | CodeMirror.Doc**\n\n编辑器的初始值（文本），可以是字符串或者CodeMirror文档对象(不同于HTML文档对象)。\n\n**mode: string | object**\n\n通用的或者在CodeMirror中使用的与mode相关联的mime，当不设置这个值的时候，会默认使用第一个载入的mode定义文件。一般地，会使用关联的mime类型来设置这个值；除此之外，也可以使用一个带有name属性的对象来作为值（如：{name: “javascript”, json: true}）。可以通过访问CodeMirror.modes和CodeMirror.mimeModes获取定义的mode和MIME。\n\n**lineSeparator: string|null**\n\n明确指定编辑器使用的行分割符（换行符）。默认（值为null）情况下，文档会被 CRLF(以及单独的CR, LF)分割，单独的LF会在所有的输出中用作换行符（如：getValue）。当指定了换行字符串，行就只会被指定的串分割。\n\n**theme: string**\n\n配置编辑器的主题样式。要使用主题，必须保证名称为 .cm-s-[name] (name是设置的theme的值)的样式是加载上了的。当然，你也可以一次加载多个主题样式，使用方法和html和使用类一样，如： theme: foo bar，那么此时需要cm-s-foo cm-s-bar这两个样式都已经被加载上了。\n\n**indentUnit: integer**\n\n缩进单位，值为空格数，默认为2 。\n\n**smartIndent: boolean**\n\n自动缩进，设置是否根据上下文自动缩进（和上一行相同的缩进量）。默认为true。\n\n**tabSize: integer**\n\ntab字符的宽度，默认为4 。\n\n**indentWithTabs: boolean**\n\n在缩进时，是否需要把 n*tab宽度个空格替换成n个tab字符，默认为false 。\n\n**electricChars: boolean**\n\n在输入可能改变当前的缩进时，是否重新缩进，默认为true （仅在mode支持缩进时有效）。\n\n\n**specialChars: RegExp**\n\n需要被占位符(placeholder)替换的特殊字符的正则表达式。最常用的是非打印字符。默认为：/[\\u0000-\\u0019\\u00ad\\u200b-\\u200f\\u2028\\u2029\\ufeff]/。\n\n**specialCharPlaceholder: function(char) → Element**\n\n这是一个接收由specialChars选项指定的字符作为参数的函数，此函数会产生一个用来显示指定字符的DOM节点。默认情况下，显示一个红点（•），这个红点有一个带有前面特殊字符编码的提示框。\n\n**rtlMoveVisually: boolean**\n\nDetermines whether horizontal cursor movement through right-to-left (Arabic, Hebrew) text is visual (pressing the left arrow moves the cursor left) or logical (pressing the left arrow moves to the next lower index in the string, which is visually right in right-to-left text). The default is false on Windows, and true on other platforms.（这段完全不晓得搞啥子鬼）\n\n**keyMap: string**\n\n配置快捷键。默认值为default，即 codemorrir.js 内部定义。其它在key map目录下。\n\n**extraKeys: object**\n\n给编辑器绑定与前面keyMap配置不同的快捷键。\n\n**lineWrapping: boolean**\n\n在长行时文字是换行(wrap)还是滚动(scroll)，默认为滚动(scroll)。\n\n**lineNumbers: boolean**\n\n是否在编辑器左侧显示行号。\n\n**firstLineNumber: integer**\n\n行号从哪个数开始计数，默认为1 。\n\n**lineNumberFormatter: function(line: integer) → string**\n\n使用一个函数设置行号。\n\n**gutters: array<string>**\n\n用来添加额外的gutter（在行号gutter前或代替行号gutter）。值应该是CSS名称数组，每一项定义了用于绘制gutter背景的宽度（还有可选的背景）。为了能明确设置行号gutter的位置（默认在所有其它gutter的右边），也可以包含CodeMirror-linenumbers类。类名是用于传给setGutterMarker的键名(keys)。\n\n**fixedGutter: boolean**\n\n设置gutter跟随编辑器内容水平滚动（false）还是固定在左侧（true或默认）。\n\n**scrollbarStyle: string**\n\n设置滚动条。默认为”native”，显示原生的滚动条。核心库还提供了”null”样式，此样式会完全隐藏滚动条。Addons可以设置更多的滚动条模式。\n\n**coverGutterNextToScrollbar: boolean**\n\n当fixedGutter启用，并且存在水平滚动条时，在滚动条最左侧默认会显示gutter，当此项设置为true时，gutter会被带有CodeMirror-gutter-filler类的元素遮挡。\n\n**inputStyle: string**\n\n选择CodeMirror处理输入和焦点的方式。核心库定义了textarea和contenteditable输入模式。在移动浏览器上，默认是contenteditable，在桌面浏览器上，默认是textarea。在contenteditable模式下对IME和屏幕阅读器支持更好。\n\n**readOnly: boolean|string**\n\n编辑器是否只读。如果设置为预设的值 “nocursor”，那么除了设置只读外，编辑区域还不能获得焦点。\n\n**showCursorWhenSelecting: boolean**\n\n在选择时是否显示光标，默认为false。\n\n**lineWiseCopyCut: boolean**\n\n启用时，如果在复制或剪切时没有选择文本，那么就会自动操作光标所在的整行。\n\n**undoDepth: integer**\n\n最大撤消次数，默认为200（包括选中内容改变事件） 。\n\n**historyEventDelay: integer**\n\n在输入或删除时引发历史事件前的毫秒数。\n\n**tabindex: integer**\n\n编辑器的tabindex。\n\n**autofocus: boolean**\n\n是否在初始化时自动获取焦点。默认情况是关闭的。但是，在使用textarea并且没有明确指定值的时候会被自动设置为true。\n\n低级选项\n\n下面的选项仅用于一些特殊情况。\n\n**dragDrop: boolean**\n\n是否允许拖放，默认为true。\n\n**allowDropFileTypes: array<string>**\n\n默认为null。当设置此项时，只接收包含在此数组内的文件类型拖入编辑器。文件类型为MIME名称。\n\n**cursorBlinkRate: number**\n\n光标闪动的间隔，单位为毫秒。默认为530。当设置为0时，会禁用光标闪动。负数会隐藏光标。\n\n**cursorScrollMargin: number**\n\n当光标靠近可视区域边界时，光标距离上方和下方的距离。默认为0 。\n\n**cursorHeight: number**\n\n光标高度。默认为1，也就是撑满行高。对一些字体，设置0.85看起来会更好。\n\n**resetSelectionOnContextMenu: boolean**\n\n设置在选择文本外点击打开上下文菜单时，是否将光标移动到点击处。默认为true。\n\n**workTime, workDelay: number**\n\n通过一个假的后台线程高亮 workTime 时长，然后使用 timeout 休息 workDelay 时长。默认为200和300 。（完全不懂这个功能是在说啥）\n\n**pollInterval: number**\n\n指明CodeMirror向对应的textarea滚动（写数据）的速度（获得焦点时）。大多数的输入都是通过事件捕获，但是有的输入法（如IME）在某些浏览器上并不会生成事件，所以使用数据滚动。默认为100毫秒。\n\n**flattenSpans: boolean**\n\n默认情况下，CodeMirror会将使用相同class的两个span合并成一个。通过设置此项为false禁用此功能。\n\n**addModeClass: boolean**\n\n当启用时（默认禁用），会给每个标记添加额外的表示生成标记的mode的以cm-m开头的CSS样式类。例如，XML mode产生的标记，会添加cm-m-xml类。\n\n**maxHighlightLength: number**\n\n当需要高亮很长的行时，为了保持响应性能，当到达某些位置时，编辑器会直接将其他行设置为纯文本(plain text)。默认为10000，可以设置为Infinity来关闭此功能。\n\n**viewportMargin: integer**\n\n指定当前滚动到视图中内容上方和下方要渲染的行数。这会影响到滚动时要更新的行数。通常情况下应该使用默认值10。可以设置值为Infinity始终渲染整个文档。注意：这样设置在处理大文档时会影响性能。\n\n\n#### demo\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />ame=\"renderer\" content=\"webkit\">\n<title>轻量级web富文本编辑器wangEditor介绍</title>\n<style type=\"text/css\">\n*{margin: 0;padding: 0;}\nbody{background: #eaebec;}\n.container{\nwidth: 800px;\nbackground: #fff;\nmargin: 0 auto;\npadding: 15px 15px 45px 15px;\n}\n.codeEditor{\nposition: relative;\n}\n.codeEditor .editor{\nborder: solid 1px #c2c2c2;\nheight: 300px;\n}\n.codeEditor .editor-seleteor{\nposition: absolute;\nbottom: 15px;\nleft: 15px;\n}\n.codeEditor .editor-seleteor select{\ndisplay:inline-block;\nwidth:100px;\nheight:20px;\nheight: 20px;\nborder: solid 1px #c2c2c2;\nwidth: 100px;\n}\n.btns{\npadding-top:100px;\ntext-align:right;\n}\n.btns button{\ndisplay:inline-block;\nmargin-left:10px;\npadding:3px 6px;\n}\n</style>\n<!--核心样式-->\n<link rel=\"stylesheet\" href=\"js/codemirror-5.24.2/lib/codemirror.css\"> \n<!--引入css文件，用以支持主题-->\n<link rel=\"stylesheet\" href=\"js/codemirror-5.24.2/theme/icecoder.css\">k rel=\"stylesheet\" href=\"js/codemirror-5.24.2/theme/eclipse.css\">\n\n<!--核心库文件-->\n<script src=\"js/codemirror-5.24.2/lib/codemirror.js\"></script> \n\n<!--语法文件:加入高亮支持-->\n<script src=\"js/codemirror-5.24.2/mode/clike/clike.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/xml/xml.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/javascript/javascript.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/vbscript/vbscript.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/css/css.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/sql/sql.js\"></script>\n<script src=\"js/codemirror-5.24.2/mode/htmlmixed/htmlmixed.js\"></script>\n\n\n</head>\n<body>\n<div class=\"container\">\n<div class=\"codeEditor\">\n<div class=\"editor\">\n<textarea id=\"code\"></textarea>\n</div>\n<div class=\"editor-seleteor\">\n<label>语言</label>\n<select class=\"selector\" onchange=\"selectLanguage(this)\">\n<option value=\"java\">java</option>\n<option value=\"html\">html</option>\n<option value=\"javascript\">javascript</option>\n<option value=\"css\">css</option>\n<option value=\"sql\">sql</option>\n<option value=\"c/c++\">c/c++</option>\n</select>\n<label>主题</label>\n<select class=\"selector\" onchange=\"selectTheme(this)\">\n<option value=\"java\">deault</option>\n<option value=\"html\">eclipse</option>\n<option value=\"javascript\">icecoder</option>\n<option value=\"css\">css</option>\n<option value=\"sql\">sql</option>\n<option value=\"c/c++\">c/c++</option>\n</select>\n</div>\n</div>\n<div class=\"btns\">\n<button onclick=\"getVal()\">getVal</button> onclick=\"setVal()\">setVal</button>\n</div>\n</div>\n\n<script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n<script type=\"text/javascript\">\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers: true,\n        styleActiveLine: true,\n        matchBrackets: true,\n        mode: {name: \"text/x-java\"},\n        width: \"100%\",\n        height: \"100%\",\n        theme:\"icecoder\",\n        keyMap: \"default\",\n        lineWrapping: true,\n        foldGutter: true,\n        gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n        indentUnit: 4,\n        showCursorWhenSelecting: true,\n        extraKeys: {\n            \"Shift-Alt-Enter\": function (cm) {\n                cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n            },\n            \"Ctrl-Space\": \"autocomplete\",\n            \"Ctrl-F7\": function () {\n                $(\'#code_submit\').click();\n            }\n        }\n    });\n\n    function selectLanguage(obj) {\n    var lang = obj.value;\n    var mode = \'\';\n    switch (lang){\n    \'htmlmixed\';break;\n    l\': mode=\'text/x-sql\'; break;\n    gth != \'\'){\n    (\'mode\',mode)\n    }\n    \n    function getVal(){\n    console.log($(\".CodeMirror-sizer\").html())\n    var val = editor.getValue();\n    console.log(val)\n    }\n</script>\n</body>\n</html>\n```','published',1,1499670008062),(22,'RequireJS参考手册','/blogs/requirejs/requirejs.jpg','\nRequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用，但它也可以用在其他脚本环境， 就像 Rhino and Node. 使用RequireJS加载模块化脚本将提高代码的加载速度和质量。\n','#### 关于RequireJS\n\nRequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用，但它也可以用在其他脚本环境， 就像 Rhino and Node. 使用RequireJS加载模块化脚本将提高代码的加载速度和质量。\n\n**兼容性**\n\n* IE 6+ .......... 兼容 ✔\n* Firefox 2+ ..... 兼容 ✔\n* Safari 3.2+ .... 兼容 ✔\n* Chrome 3+ ...... 兼容 ✔\n* Opera 10+ ...... 兼容 ✔\n\n中文官网：[http://www.requirejs.cn/](http://www.requirejs.cn/)\n\ngithub：[https://github.com/requirejs/requirejs](https://github.com/requirejs/requirejs)\n\n关于JavaScript模块化，本站有一篇专门的文章介绍它：[JavaScript模块化开发](http://justyeh.com/2017/02/25/modules/)。\n\n#### 为什么要用RequireJS\n\n随着网站功能逐渐丰富，网页中的js也变得越来越复杂和臃肿，就像是这样：\n\n```\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n<script src=\"c.js\"></script>\n<script src=\"d.js\"></script>\n...\n<script src=\"z.js\"></script>\n```\n\n原有通过script标签来导入一个个的js文件这种方式已经不能满足现在互联网开发模式，我们需要团队协作、模块复用、单元测试等等一系列复杂的需求。\n\nRequireJS是一个非常小巧的JavaScript模块载入框架，是AMD规范最好的实现者之一。最新版本的RequireJS压缩后只有14K，堪称非常轻量。\n\n* 实现了js文件的按需、异步加载\n* 管理模块之间的依赖性，便于代码的编写和维护；\n* 利于代码的模块化，便于团队、协作开发；\n\n\n#### 使用RequireJS\n\n通常在`body`的最后引入js文件：\n\n```\n<script src=\"//cdn.bootcss.com/require.js/2.3.2/require.min.js\" data-main=\"js/main.js\"></script>\n```\n\n其中`data-main`属性用来指定程序的入口模块，RequireJS使用它来启动脚本加载过程。\n\nRequireJS以一个相对于baseUrl的地址来加载所有的代码，而baseUrl一般设置到与`data-main`性相一致的目录。\n\nRequireJS默认假定所有的依赖资源都是js脚本，因此无需在module ID上再加\".js\"后缀，RequireJS在进行module ID到path的解析时会自动补上后缀。\n\n\n**主模块main.js**\n\n下面是一个主模块文件的实例：\n\n目录结构:\n\n```\n|js/\n|--main.js\n|----ripplejs/\n|------ripple.js\n```\n\nmain.js:\n\n```\nrequire.config({\npaths:{\n\'jquery\':\'http://cdn.bootcss.com/jquery/1.9.1/jquery.min\',\n\'ripple\':\'ripplejs/ripple\',\n},\nshim:{\n\'ripple\':[\'jquery\']\n}\n});\nrequire([\'jquery\',\'ripple\'], function ($,ripple){\n　　$(function(){\nvar withRipples = [\".withripple\",].join(\",\");\n$(withRipples).ripples();\n});\n});\n```\n\n#### require()函数\n\nrequire()函数接受两个参数：\n\n* 第一个参数是一个数组，表示所依赖的模块，上例就是[\'jquery\', \'ripple\']，即主模块依赖这两个模块。\n* 第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。\n\n#### 使用define()定义模块\n\nRequireJS加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。\n\n**简单的值对**\n\n如果一个模块仅含值对，没有任何依赖，则在define()中定义这些值对就好了：\n\n```\ndefine({\n    color: \"black\",\n    size: \"unisize\"\n});\n```\n\n**模块定义为一个函数**\n\n假定现在有一个stu模块，它定义了一个getName()方法，那么stu.js就要这样写：\n\n```\ndefine(function (){\nreturn{\ngetName:function (){\nreturn \'justyeh\'\n}\n}\n};\n```\n\n我们可以这样使用它：\n\n```\nrequire.config({\npaths:{\nstu:\"stu\"\n}\n})\nrequire([\'stu\'],function(stu){\nalert(stu.getName())\n})\n```\n\n**带有依赖的模块**\n\n如果这个模块还依赖其他模块，那么define()函数需要设置一个数组参数，指明该模块的依赖性。\n\n```\ndefine([\'jquery\'],function ($){\nreturn{\ngetName:function (){\nreturn $(\"#name\").val();\n}\n}\n};\n```\n\n**命名模块**\n\n你可能会看到一些define()中包含了一个模块名称作为首个参数：\n\n```\ndefine(\'jquery\', [], function() { ... });\n```\n\n运行下面这段代码：\n\n```\nrequirejs.config({\npaths: {\n    myjquery: \'//cdn.bootcss.com/jquery/3.1.1/jquery.min\'\n  }\n});\nrequirejs([\'myjquery\'], function($) {\nconsole.log($);\n});\n```\n\n它会提示你：`undefined`，现在改个名字：\n\n```\nrequirejs.config({\n    paths: {\n        jquery: \'//cdn.bootcss.com/jquery/3.1.1/jquery.min\'\n    }\n});\nrequirejs([\'jquery\'], function($) {\n    alert($);\n});\n```\n\n这时输出正确了，为什么jquery模块必须命名为`jquery`，因为jquery是一个命名模块；命名模块表示给当前这个模块起了名字，它已经是有主的了，只能属于jquery。所以当我们使用另一个名字`myjquery`去引用这个库的时候，它会发现，在 jquery.js 里声明的模块名`jquery`与我自己使用的模块名`myjquery`不同，便不会把它赋给`myjquery`，所以`myjquery`的值是undefined。\n\n所以我们在使用一个第三方的时候，一定要注意它是否声明了一个确定的模块名。\n\n#### 配置选配\n\n**baseUrl**\n\n所有模块的查找根路径。如未显式设置baseUrl，则默认值是加载require.js的HTML所处的位置。如果用了data-main属性，则该路径就变成baseUrl。\n\n**paths**\n\npath映射那些不直接放置于baseUrl下的模块名。设置path时起始位置是相对于baseUrl的，除非该path设置以\"/\"开头或含有URL协议（如http:）。\n\n用于模块名的path不应含有.js后缀，因为一个path有可能映射到一个目录。路径解析机制会自动在映射模块名到path时添加上.js后缀。\n\n在浏览器中运行时，可指定路径的备选(fallbacks),比如:\n\n```\nrequirejs.config({  \n    paths: {\n        jquery: [\'//cdn...1\',\'//cdn...3\',\'//cdn...2\']\n  }\n});\n```\n\n以实现诸如首先指定了从CDN中加载，一旦CDN加载失败则从本地位置中加载这类的机制。\n\n**shim**\n\n理论上，require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。\n\n在这种情况下，我们要使用 shim ，将某个依赖中的某个全局变量暴露给requirejs，当作这个模块本身的引用。\n\n在下面的示例中，underscore和backbone这两个库，都没有采用AMD规范编写，我们可以这样使用：\n\n```\nrequirejs.config({\n    //The shimconfig will not work correctly if used on AMD scripts,\n    //in particular, the exports and init config will notbe triggered, and the deps config will be confusingfor those cases.\n    shim: {\n        \'backbone\': {\n            //在加载backbone.js之前应先加载它的依赖函数underscore.js和jquery.js\n            deps: [\'underscore\', \'jquery\'],\n            //加载完毕后该模块使用的引用名\n            exports: \'Backbone\'\n        },\n        \'underscore\': {\n            exports: \'_\'\n        }\n});\n\n//Then, later in a separate file, call it \'MyModel.js\', a module is defined,specifting \'backbone\' as a dependency.\n//RequireJS will use the shim config to properly load \'backbone\' and give a local reference to this module.\n//The global Backbone will still exist on the page too.\ndefine([\'backbone\'], function (Backbone) {\n  return Backbone.Model.extend({});\n});\n```\n\n\n那些仅作为jQuery或Backbone的插件存在而不导出任何模块变量的\"模块\"们，shim配置可简单设置为依赖数组：\n\n```\nrequirejs.config({\n    shim: {\n        \'jquery.colorize\': [\'jquery\'],\n        \'jquery.scroll\': [\'jquery\'],\n        \'backbone.layoutmanager\': [\'backbone\']\n    }\n});\n```\n\nshim配置仅设置了代码的依赖关系，想要实际加载shim指定的或涉及的模块，仍然需要一个常规的require/define调用。设置shim本身不会触发代码的加载。\n\n**map** \n\n对于给定的模块前缀，使用一个不同的模块ID来加载该模块。\n\n该手段对于某些大型项目很重要：如有两类模块需要使用不同版本的\"foo\"，但它们之间仍需要一定的协同。 在那些基于上下文的多版本实现中很难做到这一点。而且，paths配置仅用于为模块ID设置root paths，而不是为了将一个模块ID映射到另一个。map示例：\n\n```\nrequirejs.config({\n    map: {\n        \'some/newmodule\': {\n            \'foo\': \'foo1.2\'\n        },\n        \'some/oldmodule\': {\n            \'foo\': \'foo1.0\'\n        }\n    }\n});\n```\n\n如果各模块在磁盘上分布如下：\n\n|foo1.0.js\n|foo1.2.js\n|some/\n|--newmodule.js\n|--oldmodule.js\n\n当“some/newmodule”调用了“require(\'foo\')”，它将获取到foo1.2.js文件；而当“some/oldmodule”调用“`require(\'foo\')”时它将获取到foo1.0.js。\n\n该特性仅适用于那些调用了define()并将其注册为匿名模块的真正AMD模块脚本。并且，请在map配置中仅使用绝对模块ID，“../some/thing”之类的相对ID不能工作。\n\n另外在map中支持“*”，意思是“对于所有的模块加载，使用本map配置”。如果还有更细化的map配置，会优先于“*”配置。示例：\n\n```\nrequirejs.config({\n    map: {\n        \'*\': {\n            \'foo\': \'foo1.2\'\n        },\n        \'some/oldmodule\': {\n            \'foo\': \'foo1.0\'\n        }\n    }\n});\n```\n\n意思是除了“some/oldmodule”外的所有模块，当要用“foo”时，使用“foo1.2”来替代。对于“some/oldmodule”自己，则使用“foo1.0”。\n\n**config**\n\n常常需要将配置信息传给一个模块。这些配置往往是application级别的信息，需要一个手段将它们向下传递给模块。在RequireJS中，基于requirejs.config()的config配置项来实现。要获取这些信息的模块可以加载特殊的依赖“module”，并调用module.config()。示例：\n\n```\nrequirejs.config({\n    config: {\n        \'bar\': {\n            size: \'large\'\n        },\n        \'baz\': {\n            color: \'blue\'\n        }\n    }\n});\n\n//bar.js, which uses simplified CJS wrapping:\n//http://requirejs.org/docs/whyamd.html#sugar\ndefine(function (require, exports, module) {\n    //Will be the value \'large\'\n    var size = module.config().size;\n});\n\n//baz.js which uses a dependency array,\n//it asks for the special module ID, \'module\':\n//https://github.com/jrburke/requirejs/wiki/Differences-between-the-simplified-CommonJS-wrapper-and-standard-AMD-define#wiki-magic\ndefine([\'module\'], function (module) {\n    //Will be the value \'blue\'\n    var color = module.config().color;\n});\n```\n\n若要将config传给包，将目标设置为包的主模块而不是包ID:\n\n```\nrequirejs.config({\n    //Pass an API key for use in the pixie package\'smain module.\n    config: {\n        \'pixie/index\': {\n            apiKey: \'XJKDLNS\'\n        }\n    },\n    //Set up config for the \"pixie\" package, whose mainmodule is the index.js file in the pixie folder.\n    packages: [\n        {\n            name: \'pixie\',\n            main: \'index\'\n        }\n    ]\n});\n```\n\n**packages**\n\n从CommonJS包(package)中加载模块。\n\n**nodeIdCompat**\n\n在放弃加载一个脚本之前等待的秒数。设为0禁用等待超时。默认为7秒。\n\n**waitSeconds**\n\n命名一个加载上下文。这允许require.js在同一页面上加载模块的多个版本，如果每个顶层require调用都指定了一个唯一的上下文字符串。\n\n**deps**\n\n指定要加载的一个依赖数组。当将require设置为一个config object在加载require.js之前使用时很有用。一旦require.js被定义，这些依赖就已加载。使用deps就像调用require([])，但它在loader处理配置完毕之后就立即生效。它并不阻塞其他的require()调用，它仅是指定某些模块作为config块的一部分而异步加载的手段而已。\n\n**callback**\n\n在deps加载完毕后执行的函数。当将require设置为一个config object在加载require.js之前使用时很有用，其作为配置的deps数组加载完毕后为require指定的函数。\n\n**enforceDefine**\n\n如果设置为true，则当一个脚本不是通过define()定义且不具备可供检查的shim导出字串值时，就会抛出错误。\n\n**xhtml**\n\n如果设置为true，则使用document.createElementNS()去创建script元素。\n\n**urlArgs**\n\nRequireJS获取资源时附加在URL后面的额外的query参数。作为浏览器或服务器未正确配置时的“cache bust”手段很有用。使用cache bust配置的一个示例：\n\n```\nurlArgs: \"bust=\" +  (new Date()).getTime()\n```\n\n在开发中这很有用，但请记得在部署到生成环境之前移除它。\n\n**scriptType**\n\n指定RequireJS将script标签插入document时所用的type=\"\"值。默认为“text/javascript”。想要启用Firefox的JavaScript 1.8特性，可使用值“text/javascript;version=1.8”。','published',1,1498315381909),(23,'JavaScript模块化开发','/blogs/javascript-module/modules-banner.jpg','通俗易懂的模块化概念，模块化开发的演变过程，CMD和AMD的区别，以及SeaJs、RequireJS等各种模块化解决方案的介绍。','>通俗易懂的介绍了模块化概念，以及使用模块化编程的必要性。详细介绍了实现模块化开发的演变过程。\n\n#### 一、为什么会有模块化\n\n1.当一个项目开发的**越来越复杂**的时候，会遇到一些问题，比如：\n\n**命名冲突**\n\n当项目由团队进行协作开发的时候，不同开发人员的变量和函数命名可能相同；即使是一个开发，当开发周期比较长的时候，也有可能会忘记之前使用了什么变量，从而导致重复命名，导致命名冲突。\n\n**文件依赖**\n\n代码重用时，引入js文件的数目可能少了，或者引入的顺序不对，比如使用boostrap的时候，需要引入jQuery，并且jQuery的文件必须要比boostrap的js文件先引入。\n\n2.当使用模块化开发的时候可以避免以上的问题，并且让开发的效率变高，以及方便后期的维护：\n\n**提升开发效率**\n\n代码方便重用，别人开发的模块直接拿过来就可以使用，不需要重复开发法类似的功能。\n\n**方便后期维护**\n\n代码方便重用，别人开发的模块直接拿过来就可以使用，不需要重复开发法类似的功能。\n\n所以总结来说，在生产角度，模块化开发是一种生产方式，这种方式生产效率高，维护成本低。从软件开发角度来说，模块化开发是一种开发模式，写代码的一种方式，开发效率高，方便后期维护。\n\n#### 二、模块化开发的演变过程\n\n##### 1. 全局函数\n\n```\nfunction m1(){\n    //...\n}\nfunction m2(){\n    //...\n}\n```\n\n在早期的开发过程中就是将重复的代码封装到函数中，再将一系列的函数放到一个文件中，这种情况下全局函数的方式只能认为的认为它们属于一个模块，但是程序并不能区分哪些函数是同一个模块，如果仅仅从代码的角度来说，这没有任何模块的概念。\n\n存在的问题：\n\n* 污染了全局变量，无法保证不与其他模块发生变量名冲突。\n* 模块成员之间看不出直接关系。\n \n##### 2. 对象封装-命名空间\n\n```\nvar module1 = new Object({\n    _count : 0,\n    m1 : function (){\n        //...\n    },\n    m2 : function (){\n        //...\n    }\n});\n```\n通过添加命名空间的形式从某种程度上解决了变量命名冲突的问题，但是并不能从根本上解决命名冲突。 不过此时从代码级别可以明显区分出哪些函数属于同一个模块。\n\n存在的问题：\n\n* 暴露了所有的模块成员，内部状态可以被外部改写，不安全。\n* 命名空间越来越长。\n\n##### 3. 立即执行函数写法\n\n使用\"立即执行函数\"（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的。\n\n```\nvar module1 = (function(){\nvar _count = 0;\nvar m1 = function(){\n//...\n};\nvar m2 = function(){\n//...\n};\nreturn {\nm1 : m1,\nm2 : m2\n};\n})();\n```\n特点：\n\n* 利用此种方式将函数包装成一个独立的作用域，私有空间的变量和函数不会影响到全局作用域。\n* 以返回值的方式得到模块的公共成员，公开公有方法，隐藏私有空间内部的属性、元素，比如注册方法中可能会记录日志。\n* 可以有选择的对外暴露自身成员。\n* 从某种意义上来说，解决了变量命名冲突的问题。\n\n##### 4. 放大模式\n```\n// 原有方法\nvar module1 = (function(){\nvar _count = 0;\nvar m1 = function(){\n//...\n};\nvar m2 = function(){\n//...\n};\nreturn {\nm1 : m1,\nm2 : m2\n};\n})();\n\n// 新增需求\nvar module1 = (function (mod){\nmod.m3 = function () {\n//...\n};\nreturn mod;\n})(module1);\n```\n\n特点：\n\n* 利用此种方式，有利于对庞大的模块的子模块划分。\n* 实现了开闭原则：对新增开发，对修改关闭。对于已有文件尽量不要修改，通过添加新文件的方式添加新功能。\n\n##### 5. 宽放大模式\n\n在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用\"宽放大模式\"。\n\n```\nvar module1 = ( function (mod){\n//...\nreturn mod;\n})(window.module1 || {});\n```\n\n与\"放大模式\"相比，＂宽放大模式＂就是\"立即执行函数\"的参数可以是空对象。\n\n\n**总结：在什么场景下使用模块化开发：**\n\n* 业务复杂\n* 重用逻辑非常多\n* 扩展性要求较高\n\n#### 三、模块化规范\n\n##### CommonJS\n\n服务器端规范主要是CommonJS，node.js用的就是CommonJS规范：\n\n**定义模块**\n\n根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性。\n\n**模块输出**\n\n模块只有一个出口，module.exports对象，我们需要把模块希望输出的内容放入该对象\n\n**加载模块**\n\n加载模块使用require方法，该方法读取一个文件并执行，返回文件内部的module.exports对象\n\n看个例子：\n```\n//模块定义 myModel.js\nvar name = \'Byron\';\nfunction printName(){\n    console.log(name);\n}\nfunction printFullName(firstName){\n    console.log(firstName + name);\n}\nmodule.exports = {\n    printName: printName,\n    printFullName: printFullName\n}\n\n// 加载模块\nvar nameModule = require(\'./myModel.js\');\nnameModule.printName();\n```\n\n#### 客户端规范\n\n客户端规范主要有：AMD（异步模块定义，推崇依赖前置）、CMD（通用模块定义，推崇依赖就近）。AMD规范的实现主要有RequireJs，CMD规范的主要实现有SeaJs。SeaJs在国内用的比较多，但SeaJs已经停止维护了，就多做多的介绍。RequireJs是使用最广泛的模块化的实现方案，关于RequireJs的介绍，请参考本站文章：[RequireJS参考手册](http://justyeh.com/2017/02/24/requirejs/)。\n\n### AMD与CMD区别\n\n下面的回答来自SeaJs的作者[玉伯](https://www.zhihu.com/question/20351507/answer/14859415)：\n\n* 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n\n* CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n```\n// CMD\ndefine(function(require, exports, module) {\n    var a = require(\'./a\')\n    a.doSomething()\n    // 此处略去 100 行\n    var b = require(\'./b\') // 依赖可以就近书写\n    b.doSomething()\n    // ... \n})\n\n// AMD 默认推荐的是\ndefine([\'./a\', \'./b\'], function(a, b) { // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    ...\n}) \n```\n虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。\n\n* AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。','published',1,1498295273416),(24,'JavaScript节流和防抖','/blogs/javascript-banner.jpg',NULL,'http://www.css88.com/archives/6598\n\nhttp://www.css88.com/archives/6589\n```\n/* 节流 函数\n * case 1\n * window.onscroll = throttle(testFn, 200);\n * // case 2\n * window.onscroll = throttle(testFn, 200, 500);\n*/\nfunction throttle(fn, delay, atleast) {\nvar timer = null;\n var previous = null;\n return function () {\n  ow = +new Date();\n  previous = now;\n  ow - previous > atleast ) {\nfn();\n      ow;\n        ction() {\n    ();\n      }\n};\n```','draft',1,1498303487697),(25,'ajax回退解决方案',NULL,NULL,'http://www.cnblogs.com/snandy/archive/2011/09/21/2181816.html\n\n>我目前做了一个新闻列表页。  滚动到底部时，利用ajax加载分页更多内容进来。 \n\n但我现在碰到一个问题， 假如点击一条新闻，跳到新闻详细页之后，再返回到列表页，之前列表页ajax加载的分页内容没有了。\n\n1.新窗口打开\n\n2.使用iframe，通过document.write产生历史\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>0</title>\n</head>\n<body>\n    <input type=\"button\" value=\"加1\" onclick=\"add()\" />\n    <div id=\"info\" style=\"border:red 1px solid;width:200px;padding:10px;margin:5px;\">0</div>\n</body>\n</html>\n<script src=\"history-0.1.js\"></script>\n<script>\n    var info = document.getElementById(\'info\');\n    var i = 1;\n    function add() {\n        info.innerHTML = i;\n        document.title = i;\n        var data = {\n            param : i,\n            func : func\n        };\n        History.push(data);\n        i++;\n    }\n     \n    History.push({param:0, func: func});\n     \n    function func(i) {\n        info.innerHTML = i;\n        document.title = i;\n    }\n</script>\n```\n\n点击按钮后更新页面DOM（模拟ajax提交），会发现浏览器后退按钮可用了。点击后退，可返回到前一个状态。\n\n这种方式缺点是只支持IE和Firefox。\n\n3.使用iframe，通过修改iframe.src产生历史\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>0</title>\n</head>\n<body>\n    <input type=\"button\" value=\"加1\" onclick=\"add()\" />\n    <div id=\"info\" style=\"border:red 1px solid;width:200px;padding:10px;margin:5px;\">0</div>\n</body>\n \n</html>\n<script src=\"history-0.2.js\"></script>\n<script>\n    var info = document.getElementById(\'info\');\n    var i = 1;\n    function add() {\n        info.innerHTML = i;\n        document.title = i;\n        var data = {\n            param : i,\n            func : func\n        };\n        History.push(data);\n        i++;\n    }\n     \n    History.push({param:0, func: func});\n     \n    function func(i) {\n        info.innerHTML = i;\n        document.title = i;\n    }\n</script>\n```\n\n较上一篇多了个blank.html，是一个空html架子，没有JS逻辑代码，如下\n\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n<title>blank.html</title>\n</head>\n<body>\n</body>\n</html>\n```\n\n每次ajax操作会往iframe.src的问号后附加一个数字以记录历史。点击后退按钮，iframe的onload事件中获取iframe的url，根据问号后的数字去取记录。\n\n所有浏览器均支持该方式。缺点是如果主页面中存在其它iframe，且修改了其src。历史管理会混乱。\n\n\n4.使用iframe，通过修改iframe.src产生历史，回调写在iframe对应的html页面中\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>0</title>\n</head>\n<body>\n    <input type=\"button\" value=\"加1\" onclick=\"add()\" />\n    <div id=\"info\" style=\"border:red 1px solid;width:200px;padding:10px;\">0</div>\n</body>\n</html>\n<script src=\"history-0.3.js\"></script>\n<script>\n    var info = document.getElementById(\'info\');\n    var i = 1;\n    function add() {\n        var data = {\n            param : i,\n            func : func\n        };\n        History.push(data);\n        i++;\n    }\n     \n    History.push({param:0, func: func});\n     \n    function func(i) {\n        info.innerHTML = i;\n        document.title = i;\n    }\n</script>\n```\n\n与方案3相同也是使用iframe.src来产生历史，也需要一个单独的html页面（iframe）。不同的是回调逻辑不是写在iframe.onload中，而直接写在html页面中（上一篇则是空的html架子）。blank.html如下\n\n\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n<title>blank.html</title>\n</head>\n<body>\n    <script>\n        var url= location.href;\n        if(url.indexOf(\'?\')>-1) {\n            var idx = url.substr(url.indexOf(\'?\')+1);\n            parent.History.get(idx);\n        }\n    </script>\n</body>\n</html>\n```\n\n和方案3一样所有浏览器均支持。\n\n\n5.通过修改location.hash产生历史，hashchange事件处理后退\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>0</title>\n</head>\n<body>\n    <input type=\"button\" value=\"加1\" onclick=\"add()\" />\n    <div id=\"info\" style=\"border:red 1px solid;width:200px;padding:10px;\">0</div>\n</body>\n</html>\n<script src=\"history-0.4.js\"></script>\n<script>\n    var info = document.getElementById(\'info\');\n    var i = 1;\n    function add() {\n        var data = {\n            param : i,\n            func : func\n        };\n        History.push(data);\n        i++;\n    }\n     \n    History.push({param:0, func: func});\n     \n    function func(i) {\n        info.innerHTML = i;\n        document.title = i;\n    }\n</script>\n```\n\n每次ajax操作去改变location.hash的值，每次修改后地址栏均会有所体现。在window.onhashchange中监听该事件。通过hash的值取对应的历史。\n\n较iframe的好处是可以复制地址栏的url直接进入该历史记录，缺点是IE6/7不支持。\n\n\n6.使用history.pushState产生历史，popstate事件处理后退\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>0</title>\n</head>\n<body>\n    <input type=\"button\" value=\"加1\" onclick=\"add()\" />\n    <div id=\"info\" style=\"border:red 1px solid;width:200px;padding:10px;\">0</div>\n</body>\n</html>\n<script src=\"history-0.5.js\"></script>\n<script>\n    var info = document.getElementById(\'info\');\n    var i = 1;\n    function add() {\n        var data = {\n            param : i,\n            func : func\n        };\n        info.innerHTML = i;\n        document.title = i;\n        History.push(data);\n        i++;\n    }\n     \n    function func(i) {\n        info.innerHTML = i;\n        document.title = i;\n    }\n</script>\n```\n\n\npushState和popstate是HTML5为history对象新增的方法和事件。虽然可以改变地址栏，但却不能复制地址栏的url直接进入该历史记录。该系列API直到IE10预览版尚不支持，Firefox/Safari/Chrome/Opera的最新版本均支持(IE10已经支持)。\n\n开发中应根据需求组合以上形式以兼容所有浏览器，如新浪微博就组合使用了方案一，四，五([base.js](http://js.t.sinajs.cn/t4/home/js/base.js))。如果项目中使用了一些开源库如jQuery，mootools等时强烈推荐使用[histroy.js](https://github.com/balupton/history.js) 。古老的dhtmlHistory.js和RSH已经很久没更新了。','draft',1,1498313703019),(26,'git乱码解决方法','/blogs/git/git.jpg','git对中文的支持不是很好，想必英文不是很好的朋友一定深受其扰；因为Git 是在linux下开发的，而 Linux 的编码方式是基于 UTF-8 的，所以移植到 Windows 之后难免会存在编码冲突，导致乱码。下面的方法是我在网上总结来的，并且经过亲自实践，最终解决了这个问题。','>git对中文的支持不是很好，想必英文不是很好的朋友一定深受其扰；因为Git 是在linux下开发的，而 Linux 的编码方式是基于 UTF-8 的，所以移植到 Windows 之后难免会存在编码冲突，导致乱码。\n下面的方法是我在网上总结来的，并且经过亲自实践，最终解决了这个问题。\n\n>注意：我的git客户端`Git for Windows v2.11.0`，有可能你的目录结构和我的不一致。\n\n\n#### 让 Git 支持 utf-8 编码\n\n在命令行输入以下命令：\n\n```\n# 显示 status 编码\n$ git config --global core.quotepath false  \n# 图形界面编码        \n$ git config --global gui.encoding utf-8    \n# 提交信息编码        \n$ git config --global i18n.commit.encoding utf-8    \n# 输出 log 编码\n$ git config --global i18n.logoutputencoding utf-8 \n# 最后一条命令是因为 git log 默认使用 less 分页，所以需要 bash 对 less 命令进行 utf-8 编码\n$ export LESSCHARSET=utf-8\n```\n\n#### 修改配置文件\n\n编辑安装目录下`etc\\inputrc`文件，查找以下2行，并修改其值：\n\n``` \nset output-meta off\nset convert-meta on\n```\n\n修改为\n\n```\nset output-meta on\nset convert-meta off\n```\n\n#### 让 ls命令可以显示中文名称\n\n编辑安装目录下`mingw64\\share\\git\\completion\\git-completion.bash`文件：\n\n```\n# 在文件末尾处添加一行\nalias ls=\"ls --show-control-chars --color\"\n```\n\n#### 对命令行进行设置\n\n右键>Options...>Text，设置`Locale`为`zh_CN`，设置`Character set`为`UTF-8`，见下图：\n![](/blogs/git//git-option.jpg)\n\n','published',1,1498314709656),(28,'前端常用属性、方法备忘','/blogs/front-end-tool/font-end-memo.png','在编写前端代码的过程中，有一些属性和方法是需要经常用到的，但是记忆起来又比较麻烦（反正我是间歇性记得），以前我总是要用了就去百度一下，每次还需要对网页对内进行一下筛选，总之很麻烦。本文总结了一些比较常用但又不容易记住的前端属性和方法，包括：文本溢出、文本禁止选中、点击目标区域以外影藏、获取元素距离与位置等。','>在编写前端代码的过程中，有一些属性和方法是需要经常用到的，但是记忆起来又比较麻烦（反正我是间歇性记得），以前我总是要用了就去百度一下，每次还需要对网页对内进行一下筛选，总之很麻烦。本文总结了一些比较常用但又不容易记住的前端属性和方法，包括：文本溢出、文本禁止选中、点击目标区域以外影藏、获取元素距离与位置等。\n\n#### 文本溢出省略符\n\n```\n.text-ellipsis{\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n}\n```\n\n#### 禁止文本选中\n\nIE6-9不支持该属性，但支持使用标签属性 `onselectstart=\"return false;\"`来达到` user-select:none` 的效果；\n\n```\n.noselect {\n-webkit-user-select: none;  /* Chrome all / Safari all /opera15+*/  \n-moz-user-select: none;     /* Firefox all */  \n-ms-user-select: none;      /* IE 10+ */  \nuser-select: none;  \n}\n```\n#### opacity兼容IE的写法\n\n我总是记不住下面的一个。\n\n```\nopacity:0.6; \nfilter:alpha(opacity=60);\n```\n\n#### 点击目标区域以外区域影藏元素\n\n下面有一个例子，实现点击`.main`以外区域时，影藏`.dialog`：\n\n```\n<!--html-->\n<div class=\"dialog\">\n<div class=\"main\">\n...\n</div>\n</div>\n\n<!--js-->\n$(document).mouseup(function(e){\n// 设置目标区域\nvar _con = $(\".dialog .main\");   \n//target不是目标元素，并且不是目标元素的子元素\nif( !_con.is(e.target) && _con.has(e.target).length === 0){\n$(\".dialog\").fadeOut(\'fast\')\n}\n});\n```\n\n#### checkbox选中\n\n需要注意的是`attr(\"checked\",true)`方法只有第一次会生效，请使用`prop()`方法代替`attr()`方法，下面的例子实现了全选与全不选效果：\n\n```\n$(\"checkbox#checkAll\").change(function(){\nif(this.checked){\n $(\"table input[type=\'checkbox\']\").prop(\"checked\",true);\n}else{\n $(\"table input[type=\'checkbox\']\").removeAttr(\"checked\");\n}\n});\n```\n\n#### 返回顶部\n\n```\nfunction returnTop(){\n$(\'body,html\').animate({ scrollTop: 0 }, 300);\n}\n```\n\n#### 获取元素的尺寸\n\n```\n$(window).height(); //浏览器当前窗口可视区域高度\n$(window).width(); //浏览器当前窗口可视区域宽度\n\n$(document).height(); //浏览器当前窗口文档的高度\n$(document).width();//浏览器当前窗口文档对象宽度\n\n$(document.body).height();//浏览器当前窗口文档body的高度\n$(document.body).width();//浏览器当前窗口文档body的宽度\n\n$(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n$(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding \n```\n\n#### 获取元素在文档中的位置\n\n**获取元素在页面中的相对对位置**\n\n这是一个相对距离，包括滚动条的偏移量\n\n```\n$(\'#tar\').offset().left;\n$(\'#tar\').offset().top;\n```\n\n**获取元素在页面中的绝对位置**\n\n当我们需要获取元素在浏览器窗口的绝对距离时，首先获取相对距离，然后减去窗口的偏移量就可以了\n\n```\n$(\'#tar\').offset().left-$(\"body\").scrollLeft();\n$(\'#tar\').offset().top-$(\"body\").scrollTop();\n```\n\n\n#### 获取鼠标的位置\n\n```\n$(document).mousemove(function(e){\n//鼠标相对于浏览器窗口（不包括浏览器的工具栏）的坐标,不包括滚动条的偏移量\nconsole.log(e.clientX+\",\"+e.clientY);\n//鼠标相对于屏幕的坐标,这时加上了滚动条的偏移量\nif(e.pageX == null) {\nconsole.log(e.x+\",\"+e.y);\n    }else{\n    console.log(e.pageX+\",\"+e.pageY);\n    }\n    //鼠标相对于屏幕的坐标\n    console.log(e.screenX+\",\"+e.screenY);\n})\n```','published',1,1498294992440),(29,'使用Nuxt+Vue+Node构建的SSR博客项目','/blogs/justyeh.com/logo.jpg','使用Vue.js+Nuxt.js+ES6+Webpack+Mysql+Noyde.js+Express.js构建一个博客项目','>以前的博客使用的是Ghost，不过被攻击了，勒索我几百美元，还是算了吧，顺便说一句，数据备份很重要！前段时间学了Vue.js，以前看的Node还能记起来点，主要为了锻炼自己吧，这次的博客没有用Hexo，Ghost什么的，自己写的。由于有SEO的需求，毕竟自己写自己看也没什么意思，最终的使用的技术方案：Vue.js+Nuxt.js+ES6+Webpack+Mysql+Node.js+Express.js。动手之前其实还有很多东西不是很熟，不过最终也算是完成了，这个项目给了我一个启发：实践是学习的最快途径，看再多次文档真不如动手写一个项目来的实在。\n\n## Vue.js和Nuxt.js\n\n**Vue.js**\n\n当前流行的前端框架，官网地址：[https://cn.vuejs.org/](https://cn.vuejs.org/)，文档写的很好，点个赞！\n\n**Nuxt.js**\n\n[Nuxt.js](https://zh.nuxtjs.org/guide)的文档写的也不错，话说Vue.js系列的文档写的都很好，再次点赞，官网是这样介绍自己的：\n\n>Nuxt.js 是一个基于 Vue.js 的通用应用框架。\n\n>通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI渲染。\n\n>我们的目标是创建一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有 Node.js 项目中使用 Nuxt.js。\n\n>Nuxt.js 预设了利用Vue.js开发服务端渲染的应用所需要的各种配置。\n\n>除此之外，我们还提供了一种命令叫：nuxt generate，为基于 Vue.js 的应用提供生成对应的静态站点的功能。\n\n>我们相信这个命令所提供的功能，是向开发集成各种微服务（miscroservices）的 Web 应用迈开的新一步。\n\n>作为框架，Nuxt.js 为 客户端/服务端 这种典型的应用架构模式提供了许多有用的特性，例如异步数据加载、中间件支持、布局支持等。\n\n总结一下，Nuxt.js就是一个利用Vue, webpack 和 Node.js帮我们简单方便实现SSR的框架。\n\n## 关于SSR\n\n**什么是SSR**\n\nSSR是Server Side Render的缩写，即服务器端渲染。在没有SPA之前，绝大多数的网页都是通过服务器渲染生成的：用户向服务器发送请求，服务器获取请求，然后再查询数据库，根据查询的数据动态的生成一张网页，最后将网页内容返回给浏览器端。\n\n现在拿Vue来说，在通常情况下，Vue.js是运行在浏览器中的，在浏览器你发送一个请求，然后获得了后台返回的数据，最后通过Vue.js将数据渲染成需要的HTML片段。现在，我们把将组件渲染成HTML这个工作拿到Node上来执行，可以将Node看成一个隐形的“浏览器”，在这个“浏览器”中我们将组件都渲染好，然后将渲染好的HTML直接发送给实际的浏览器（客户端），这就是Vue SSR。\n\n**SSR的好处**\n\n通过前端框架（Vue，Angular,React）构建的SPA（Single-Page Application - 单页应用程序），因为内容是通过Ajax获取的，所以就有一个天然的缺陷，就是搜索引擎没法获取里面的内容。右键查看一个SPA网页的源代码，你会发现你里面几乎没什么内容。对于像博客，新闻这样的网站，这一点是不可接收的。\n\n总结起来，SSR带来的好处就是能够SEO，顺便因为内容在服务器端已经渲染好了，还能够减少请求数量，对于一些比较老旧的浏览器（Vue.js不支持），也能看到基础的内容。\n\n### 开发总结\n\n开发中遇到了不少问题，在这里我列举一下，可以让大家尽量少走弯路，解决方案我尽量说的简洁点，有些东西我会单独开一篇博文。\n\n**Restful**\n\n项目后台使用的是Restful API，后台框架用的是express，你可以用`vue init nuxt-community/express-template <project-name>`生成一套基于express的模板文件，后台的代码在server目录，这个目录里面就是关于Node和express的内容了，这里不展开。\n\n**asyncData多个请求**\n\n参考下面的代码：\n\n```\nasync asyncData({ req, error }) {\n    const page = 0\n    let [pageRes, countRes] = await Promise.all([\n        axios.get(`/api/post/page/${page}?scope=published`),\n        axios.get(\'/api/post/count/published\'),\n    ])\n    return {\n        posts: pageRes.data.list,\n        count: countRes.data.result,\n    }\n}\n```\n\n**中间件**\n\n中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前。每一个中间件应放置在 middleware/ 目录。文件名的名称将成为中间件名称(middleware/auth.js将成为 auth 中间件)。下面是一个示例：\n\n```\nimport { isLogin } from \'../util/assist\'\nconst needAuth = require(\'../util/api.config\').needAuth\nexport default function ({ isClient, isServer, route, req, res, redirect }) {\n    //在服务端判读是否需要登陆(如果直接输地址，在客户端是判断不到的)\n    if (isServer) {\n        let cookies = req.cookies\n        let path = req.originalUrl;\n\n        if (path.indexOf(\'admin\') > 0 && !cookies.token) {\n            redirect(\'/login\')\n        }\n    }\n    //在客户端判读是否需要登陆\n    if (isClient) {\n        if (route.path.indexOf(\'admin\') > 0 && !isLogin()) {\n            redirect(\'login\')\n        }\n    }\n}\n```\n\n**Node循环+异步问题**\n\n在项目里面有这样一个需求：显示文章（Post）对应的若干个标签（Tag），解决办法就是获取PostList，然后循环这个List并获取PostId，根据PostId去查对应的Tag。由于获取PostList异步操作，然后又在循环里面套了许多异步操作（获取Tag），所以用回调的方式就没法写下去了，最后使用的是`async`这个库，贴一段代码：\n\n```\n//获取Post列表\nlet list = (params, callback) => {\n    postModel.list(params, (err, posts) => {\n        if (err) {\n            return callback({ code: 404, message: \'no result\' });\n        }\n        //get each posts\' tags\n        async.eachSeries(posts, (post, tagCallback) => {\n            postTagModel.tagsByPostId(post.id, (err, result) => {\n                if (err) {\n                    tagCallback(err)\n                }\n                post.tags = result;\n                tagCallback()\n            });\n        }, (err) => {\n            if (err) {\n                callback({ code: 404, message: \'no result\' });\n                return false;\n            }\n            callback({ code: 404, message: \'no result\', list: posts });\n        });\n    });\n}\n```\n\n**静态资源**\n\n在Nuxt中，你可以将静态文件放到项目根目录的static文件夹中，然后直接使用根路径`/`就可以访问了。\n\n```\n<!-- 假设static目录下有一张图片my-image.png，可以这样直接访问 -->\n<img src=\"/my-image.png\"/>\n```\n\n**登陆**\n\n第一次使用restful，登陆问题一直困扰着我，搜了不少资料，最后的解决方案是使用token。\n\n在前端，检测到用户没有登陆就跳转到登陆页面，用户发送登陆请求后先在后台校验用户名和密码，校验成功之后返回一个token。前端接收到这个token后将它存在本地，以后每次发送请求时将这个token带上，之后的请求后台对这个token进行校验，如果合法就认为登陆成功。\n\n下面的代码用于生成token（使用的是jwt-simple），uid是用户ID，exp的取值是七天后的时间，jwtSecret是加密和解密的密钥。\n\n```\nlet auth = (user, callback) => {\n    if (user.account.trim() == \'\') {\n        return callback({ code: 403, message: \'用户名不正确\' });\n    }\n    if (user.password.trim() == \'\') {\n        return callback({ code: 403, message: \'密码不正确\' });\n    }\n    userModel.auth(user, (err, user) => {\n        if (err) {\n            return callback({ code: 404, message: \'登陆失败\' });\n        }\n        if (user.length === 1) {\n            //设置七天有效期\n            let expires = moment().add(7, \'days\').valueOf();\n\n            let token = jwt.encode({\n                uid: user[0].id,\n                exp: expires\n            }, jwtSecret)\n\n            return callback({ code: 200, message: \'success\', token: token });\n        }\n        callback({ code: 404, message: \'登陆失败\' });\n    });\n}\n```\n\n我使用的Ajax工具是axios，下面代码的作用是给所有请求添加一个header。\n\n```\n// 拦截request\n$http.interceptors.request.use(\n  config => {\n    if (typeof document === \'object\') {\n      let token = getCookieInClient(\'token\')\n      if (token) {\n        config.headers.Authorization = token;\n      }\n    }\n    return config;\n  }, err => {\n    return Promise.reject(err);\n  }\n);\n```\n\n下面是校验token的中间件，先判断接口是否需要验证身份，不需要就直接Next，如果需要就获取并校验token，校验做的比较粗糙，就是直接判断token是否在有效期内，当然可以有更安全的做法，你可以自己去搜索一下。登陆成功的标志就是token校验合法，然后下一步操作。校验失败就直接返回，前端根据响应跳转到登陆页面。\n\n```\nmodule.exports = function (req, res, next) {\n    let path = req.originalUrl\n    \n    //接口不需要登陆：直接next\n    if (needAuth.indexOf(path) < 0) {\n        return next();\n    }\n    \n    //接口需要登陆\n    var token = req.headers[\'authorization\']\n    if (!token) {\n        return res.json({\n            code: 401,\n            message: \'you need login:there is no token\'\n        })\n    }\n    \n    try {\n        //解密获取的token\n        let decoded = jwt.decode(token, jwtSecret);\n\n        //校验有效期\n        if (decoded.exp <= Date.now()) {\n            return res.json({\n                code: 401,\n                message: \'you need login:token is expired\'\n            });\n        }\n        next();\n    } catch (err) {\n        return res.json({\n            code: 401,\n            message: \'you need login:decode token fail\'\n        })\n    }\n};\n```\n\n**nuxt.config**\n\nnuxt的配置文件，具体的配置项可以参考[这个链接](https://zh.nuxtjs.org/guide/configuration)，下面是我的配置文件，里面的内容应该是一看就懂。\n\n```\nmodule.exports = {\n  //页面的head标签\n  head: {\n    title: \'JustYeh的前端博客\',\n    meta: [\n      { charset: \'utf-8\' },\n      { name: \'viewport\', content: \'width=device-width, initial-scale=1, user-scalable=no\' },\n      { hid: \'description\', name: \'description\', content: \'叶文祥的前端博客\' },\n      { name: \'renderer\', content: \'webkit\' },\n      { \'http-equiv\': \'X-UA-Compatible\', content: \'IE=edge\' },\n      { name: \'author\', content: \'叶文祥,justyeh@163.com\' },\n      { name: \'apple-mobile-web-app-title\', content: \'叶文祥的前端博客\' },\n      { name: \'apple-mobile-web-app-capable\', content: \'yes\' },\n      { name: \'apple-mobile-web-app-status-bar-style\', content: \'#263238\' },\n      { name: \'screen-orientation\', content: \'portrait\' },\n      { name: \'x5-orientation\', content: \'portrait\' },\n      { name: \'full-screen\', content: \'yes\' },\n      { name: \'x5-fullscreen\', content: \'true\' },\n      { name: \'browsermode\', content: \'application\' },\n      { name: \'x5-page-mode\', content: \'app\' },\n      { name: \'theme-color\', content: \'#263238\' },\n    ],\n    link: [\n      { rel: \'icon\', type: \'image/x-icon\', href: \'/favicon.ico\' }\n    ]\n  },\n  //全局引用的css文件\n  css: [\'~assets/css/main.css\', \'~assets/css/font-awesome.min.css\'],\n  // 页面顶部loading效果\n  loading: {\n    color: \'#04acf7\',\n    height: \'4px\',\n    failedColor: \'red\'\n  },\n  //页面的过渡效果\n  transition: {\n    name: \'page\'\n  },\n  //配置路由中间件\n  router: {\n    middleware: \'adminAuth\'\n  }\n\n}\n```\n\n**部署**\n\n部署一直不怎么会弄，这次也确实在上面遇到了不少问题，这里就不说了。最终使用的是[pm2](http://pm2.keymetrics.io/)，现在假设你已经安装好了node、pm2、vue等之类的包，依次运行下面的命令：\n\n```\n#进入文件所在目录\ncd your_project\n#安装项目所需依赖\nnpm insatll\n#打包\nnpm run build\n#运行,--name \'your project name\'是可选的\npm2 start npm [--name \'your project name\'] -- start\n```\n\n### 说在最后\n\n上面的东西比较琐碎，如果你正好遇到相关的问题可能就有帮助了。系统性的梳理我也不知道怎么展开，只能抱歉了。\n\n好了，全部的代码在这里：[https://github.com/justyeh/justyeh.com](https://github.com/justyeh/justyeh.com)，关于细节你都可以在这里面查看。这个是最终的成果：[http://justyeh.com/](http://justyeh.com/)，鉴于这个是私人项目，线上后台就不公布了，不过可以直接clone我的项目，数据库什么的都在，直接在本地就可以跑起来。\n\n水平有限，如果有什么错误的地方还请包含。喜欢的话，可以给个star。如果你有什么好的建议和意见，欢迎[联系我](http://justyeh.com/about)！','published',1,1513756171342),(30,'JavaScript异步问题解决方案','/blogs/javascript-banner.jpg','JavaScript是一门单线程语言，在执行一些比较耗时的操作（比如常见的Ajax请求）时，为了不阻塞后面代码的执行，往往需要执行异步操作。关于JS的运行机制，大家可以看阮一峰的这篇文章：[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)','>JavaScript是一门单线程语言，在执行一些比较耗时的操作（比如常见的Ajax请求）时，为了不阻塞后面代码的执行，往往需要执行异步操作。关于JS的运行机制，大家可以看阮一峰的这篇文章：[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n\n>如何处理异步操作在一直是个值得关注的问题，我会在这篇博文里介绍几种常见的处理异步函数的解决方案\n\n### 使用回调函数\n\n如果你有使用过JQuery，那么肯定会熟悉这样的处理方式，回调函数是一个作为变量传递给另外一个函数的函数，它在主体函数执行完之后执行。\n\n```\nlet delayWithCallback = (time, callback) => {\n    console.log(\'handle...\')\n    setTimeout(() => {\n        if (typeof callback === \'function\') {\n            callback(`success`)\n        }\n    }, time)\n}\n```\n\n**在callback方法里处理回调**\n\n```\nlet func1 = () => {\n    console.log(\'start\')\n    delayWithCallback(1000, (result) => {\n        console.log(result)\n        console.log(\'end\')\n    })\n}\nfunc1()\n```\n\n### 使用Promise\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。这里说的“成功”和“失败”主要是为了便于理解，准确的说法是resolve和reject改变了Promise的状态，resolve将Promise的状态置为resolved，reject将Promise的状态置为rejected\n\n```\nlet index = 1;\nlet delayWithPromise = (time) => {\n    return new Promise((resolve, reject) => {\n        console.log(`task${index} handle...`)\n        index++\n        setTimeout(() => {\n            resolve(\'success\')\n        }, time)\n    })\n}\n```\n\n**在Promise实例上使用then方法里处理回调**\n\n`then`方法是Promise原型上的方法，Promise.prototype.then()，then方法接受两个参数，第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数\n\n```\nlet func2 = () => {\n    console.log(\'start\')\n    delayWithPromise(1000).then(result => {\n        console.log(result)\n        console.log(\'end\')\n    })\n} \nfunc2()\n```\n\n\n**多个异步操作**\n\n假定有下面的异步方法，用于获取学生信息\n\n```\nlet getJSON = (key) => {\n    const data = {\n        stu: \'stu1\',\n        stu1: {\n            age: 1\n        },\n        stu2: {\n            age: 2\n        }\n    }\n    return new Promise((resolve, reject) => {\n        setTimeout(function () {\n            resolve(data[key])\n        }, 100);\n    })\n}\n```\n\n\nPromise.all方法用于将多个Promise实例，包装成一个新的Promise实例。此时多个Promise实例可以同步执行，返回值是一个数组，包含每个操作的结果\n\n```\nlet func3 = () => {\n    Promise.all([\n        getJSON(\'stu1\'),\n        getJSON(\'stu2\')\n    ]).then(stu => {\n        console.log(stu)\n    })\n}\nfunc3()\n```\n\n**链式调用解决Promise异步嵌套问题**\n\n在上面的代码中，我们不关心操作执行的顺序，Promise.all方法可以很好的解决多个异步操作同时执行的问题；\n如果当前的异步操作依赖上一个操作的结果，就很容易写出`func4()`这样的代码，在`func4()`中，嵌套的层级还比较少（2层），如果有20、30层呢，这样代码就难以维护了\n\n```\nlet func4 = () => {\n    getJSON(\'stu\').then(result1 => {\n        getJSON(result1).then(result2 => {\n            .....\n        })\n    })\n}\nfunc4()\n```\n\n如果我们在then方法中返回的是一个新的Promise实例，就可以形成链式调用关系了\n\n采用then链式调用，它避免了异步函数之间的层层嵌套，将原来异步函数的“嵌套关系”转变为便于阅读和理解的“链式”步骤关系，可以指定一组按照次序调用的回调函数，就像`func5()`，此时代码的结构会清晰很多\n\n```\nlet func5 = () => {\n    getJSON(\'stu\')\n        .then(result1 => {\n            return getJSON(result1)\n        }).then(result2 => {\n            console.log(result2)\n        })\n}\nfunc5()\n```\n\n### 采用async/await解决异步问题\n\nasync/await是ES7中的新特性，下面是关于async的几个要点：\n- 在function前面加async关键字表示这是一个async函数\n- async的返回值是一个Promise对象，你可以用then方法添加回调函数\n- await后面跟着的应该是一个promise对象，如果不是，会被转成一个立即resolve的Promise对象\n- await表示在这里等待promise返回结果了，再继续执行。\n\n```\nlet func6 = async () => {\n    console.log(\'start\')\n    let result = await delayWithPromise(1000);\n    console.log(result)\n    console.log(\'end\')\n}\nfunc6()\n```\n\n**async/await处理多个异步问题**\n\n一个一个的执行\n\n```\nlet func7 = async () => {\n    console.log(\'start\')\n    let result1 = await delayWithPromise(500)\n    let result2 = await delayWithPromise(500)\n    console.dir(result1, result2)\n    console.log(\'end\')\n}\nfunc7()\n```\n\n同时执行\n\n```\nlet func8 = async () => {\n    console.log(\'start\')\n    let [result1, result2] = await Promise.all([\n        delayWithPromise(500),\n        delayWithPromise(500)\n    ])\n    console.dir(result1, result2)\n}\nfunc8()\n```\n\nfunc7()和func8()的在处理时会有些不同，在func7()里会先打印`task1 handle...`，500ms之后，再打印`task2 handle...`\n\n但是在func8()中，`task1 handle...`和`task2 handle...`是同时打印的，这说明在func7()任务是一个一个顺序阻塞执行的，在func8()是同时同步执行的\n\n总结一下，在含有多个异步操作的方法中，如果你的代码逻辑里面存在相互依赖关系，比如当前操作依赖上一个操作的结果，那么你可以使用func7()这样的写法\n\n如果你的异步操作之间没有依赖关系，你就应该使用func8()这样的写法，这样前面的await不会阻塞后面的异操作，所有操作同时，可以大大提高效率\n','published',1,1500708273005),(31,'flex兼容性写法','/blogs/flex-layout/flexflex-layout-logo.jpg','利用flex可以方便快捷的帮助我们进行网页布局，不过由于历史标准很多，人工书写会有一些兼容性问题，这里将在网上搜集到的兼容性的写法放在博客中，以便取用。','>利用flex可以方便快捷的帮助我们进行网页布局，不过由于历史标准很多，人工书写会有一些兼容性问题，这里将在网上搜集到的兼容性的写法放在博客中，以便取用。\n\nflex：定义布局为盒模型\n```\n.flex {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n}\n```\n\nflex-v：盒模型垂直布局\n```\n.flex-v {\n    -webkit-box-orient: vertical;\n    -webkit-flex-direction: column;\n    -ms-flex-direction: column;\n    flex-direction: column;\n}\n```\n\nflex-1：子元素占据剩余的空间\n```\n.flex-1 {\n    -webkit-box-flex: 1;\n    -webkit-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n}\n```\n\nflex-align-center：子元素垂直居中\n```\n.flex-align-center {\n    -webkit-align-items:center;\n -moz-align-items:center;\n -ms-align-items:center;\n -o-align-items:center;\n align-items:center;\n}\n```\n\n\nflex-pack-center：子元素水平居中\n```\n.flex-pack-center {\n    -webkit-box-pack: center;\n    -webkit-justify-content: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n}\n```\n\nflex-pack-justify：子元素两端对齐\n```\n.flex-pack-justify {\n    -webkit-box-pack: justify;\n    -webkit-justify-content: space-between;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n}\n```\n\n下面是压缩版本\n\n```\n.flex{display: -webkit-box;display: -webkit-flex;display: -ms-flexbox;display: flex;}\n.flex-v{-webkit-box-orient: vertical;-webkit-flex-direction: column;-ms-flex-direction: column;flex-direction: column;}\n.flex-1{-webkit-box-flex: 1;-webkit-flex: 1;-ms-flex: 1;flex: 1;}\n.flex-align-center{-webkit-box-align: center;-webkit-align-items: center;-ms-flex-align: center;align-items: center;}\n.flex-pack-center{-webkit-box-pack: center;-webkit-justify-content: center;-ms-flex-pack: center;justify-content: center;}\n.flex-pack-justify{-webkit-box-pack: justify;-webkit-justify-content: space-between;-ms-flex-pack: justify;justify-content: space-between;}\n```','published',1,1500711045387),(32,'1px解决方案',NULL,'前端的同学想必都碰到过1px边框的问题，在高分屏手机上，我们会发现自己写的1px往往会比预想的“粗”一些，下面是他人总结的解决方案。','>前端的同学想必都碰到过1px边框的问题，在高分屏手机上，我们会发现自己写的1px往往会比预想的“粗”一些，下面是他人总结的解决方案。\n\n## 单线\n\n写一个高度为1px的线，然后通过transform:scaleY(0.5)缩放来实现\n\n```\ndiv{\n    height:1px;\n    background:#ddd;\n    -webkit-transform: scaleY(0.5);\n    -webkit-transform-origin:0 0;\n    overflow: hidden;\n}\n```\n\n## 边框+圆角\n\n和上面的思路是一样的，也是通过放大后再缩小实现的，需要注意的是宽高以及圆角要设置为原来的2倍\n\n```\ndiv{\n    position: relative;\n}\ndiv:before{\ncontent: \"\";\nposition: absolute;\ntop: 0;\nleft: 0;\n    width: 200%;/* 宽高要放大 */\n    height: 200%;\n    border: solid 1px #ddd;\n    border-radius: 10px;/* 圆角要放大 */\n    overflow: hidden;\ntransform-origin: 0 0;\n-webkit-transform-origin: 0 0;\n    transform: scale(0.5, 0.5);\n    -webkit-transform: scale(0.5, 0.5);\n}\n```\n\n参考链接：http://www.cnblogs.com/shuiyi/p/5568348.html\n','published',1,1504773257603),(33,'js的方法和属性','/blogs/javascript-banner.jpg','介绍了方法或属性之间的区别、在原型上定义方法的优点、实例和原型上的属性或方法的访问顺序','### 方法或属性之间的区别\r\n\r\n```\r\n//对象构造函数\r\nfunction People(name) {\r\n\r\n    //私有属性，只能在对象构造函数内部访问\r\n    var NATION = \'china\';\r\n\r\n    //共有属性，对象实例化后可以调用\r\n    this.name = name;\r\n\r\n    //对象方法\r\n    this.introduce = function () {\r\n        console.log(this.name);\r\n        console.log(this.age); //使用原型方法扩充的属性可以在类内部使用\r\n        console.log(this.sayName());//使用原型方法扩充的方法可以在类内部使用 \r\n        console.log(People.foot);//静态属性调用时格式为[对象.静态属性]\r\n    }\r\n}\r\n\r\n//类方法（共有静态方法），只能通过类名称直接调用\r\nPeople.talk = function () {\r\n    console.log(\'People can talk \')\r\n}\r\n\r\n//类属性 (公有静态属性)，不能使用 【this.属性】，通过类名直接访问\r\nPeople.foot = 2\r\n\r\n\r\n//原型属性 (公有共享属性)，当作是类内部的属性使用【this.原型属性】，也可以当成公有静态属性使用【对象.prototype.原型属性】\r\nPeople.prototype.age = 20;\r\n\r\n//原型方法 (公有共享方法)\r\nPeople.prototype.sayName = function () {\r\n    //如果原型方法当作静态方法直接调用时，this.name无法被调用\r\n    console.log(\"My name is \" + this.name);\r\n}\r\n\r\nPeople.talk(); //类方法也是静态方法，类方法不需要通过实例化对象去调用，可以直接使用 【对象.静态方法()】\r\nconsole.log(People.foot) //类属性的调用：类名称.方法名称 = function([参数...]){ 语句行; }\r\n\r\n\r\nPeople.prototype.sayName(); //原型方法当成静态方法使用时【对象.prototype.方法()】\r\nconsole.log(People.prototype.age);//原型属性当作静态属性使用时【对象.prototype.原型属性】\r\n\r\nvar tom = new People(\'tom\');//对象方法和原型方法需要实例化对象后才可以使用\r\ntom.sayName(); //对象方法必须实例化对象\r\ntom.introduce(); //原型方法必须实例化对象\r\nconsole.log(tom.age);//错误，公有静态属性只能使用 【对象.属性】调用\r\n```\r\n\r\n* 对象方法包括构造函数中的方法以及构造函数原型上面的方法；\r\n* 类方法，其实这里的类就是一个函数，在js中由于函数也是一个对象，所以可以为函数添加属性以及方法，这种方法在node中用的比较多；\r\n\r\n\r\n\r\n### 在原型上定义方法\r\n\r\n原型对象的用途是为每个实例对象存储共享的方法和属性，它仅仅是一个普通对象而已。并且所有的实例是共享同一个原型对象，因此有别于实例方法或属性，原型对象仅有一份。所以下面的等式都是成立的：\r\n\r\n```\r\nconsole.log(tom.sayName == new People().sayName)//true\r\nconsole.log(new People(\'a\').sayName == new People(\'b\').sayName) //true\r\n```\r\n\r\n* 将方法定义为原型方法，原型方法避免了每次调用构造函数时对属性或方法的构造，创建对象快。\r\n* 在原型上面添加该方法，就能实现共享。这样就不用每一次初始化一个实例的时候，为其分配相应的内存了，节省空间。\r\n\r\n### 实例和原型的访问顺序\r\n\r\n如果实例上的方法或属性与原型上的方法或属性重名了，会访问谁呢？\r\n```\r\nfunction Person(){\r\n    this.name = \'a\';\r\n    this.sayName = function(){\r\n        console.log(\'a\')\r\n    }\r\n}\r\nPerson.prototype.name = \'b\';\r\nPerson.prototype.sayName = function(){\r\n    console.log(\'b\')\r\n}\r\n\r\nvar person = new Person();\r\nconsole.log(person.name) //\'a\'\r\nperson.sayName() //\'a\'\r\n```\r\n\r\n在js中，对象在调用一个方法或属性时会首先在自身里寻找是否有该方法或属性，若没有，则去原型链上去寻找，依次层层递进，这里的原型链就是实例对象的__proto__属性。\r\n\r\n\r\n','published',1,1505204617736),(34,'Object.defineProperty方法解读',NULL,'Object.defineProperty是ES5中提出的新方法，作用是为对象新添加一个属性或者修改对象中已经存在的属性。他是Vue.js中实现数据双向绑定的关键。','Object.defineProperty是ES5中提出的新方法，作用是为对象新添加一个属性或者修改对象中已经存在的属性\n\n ### 用法\n\n Object.defineProperty(obj, prop, descriptor)\n\n* obj：需要定义属性的对象\n* prop：需要定义或修改的属性的名称\n* descriptor：需要定义或修改的属性的特性\n上面的三个参数都是必需的\n\ndescriptor的值是一个对象，可以有configurable、enumerable、value、writable、get和set，下面来一一介绍：\n\n**configurable**\n\n是否可配置，默认为false，当他的值为false时，起到了下面的作用：\n* 目标属性不可以使用delete删除\n* 目标属性不可以再次设置特性（value,writable,configurable,enumerable）\n\n```\n//不可以使用delete删除\nlet yeh = {}\nObject.defineProperty(yeh, \'age\', {value:24})\ndelete yeh.age\nconsole.log(yeh.age) //24\n\nlet yeh2 = {}\nObject.defineProperty(yeh2, \'age\', {value:24,configurable:true})\ndelete yeh2.age\nconsole.log(yeh2.age) //undefined\n\n//不可以重新设置特性\nObject.defineProperty(yeh, \'age\', {value:24})\nObject.defineProperty(yeh, \'age\', {enumerable:true})//caught TypeError: Cannot redefine property: age\n```\n\n\n**enumerable**\n\n是否可枚举，默认为false，此时对象的属性不能在for...in 循环和 Object.keys() 中被枚举\n\n```\nlet yeh = {}\nObject.defineProperty(yeh, \'age\', {})\nconsole.log(Object.keys(yeh)) //[]\n\nlet yeh2 = {}\nObject.defineProperty(yeh2, \'age\', {\n    enumerable:true\n})\nconsole.log(Object.keys(yeh2)) //[\"age\"]\n```\n\n**value**\n\n属性的值，默认为undefined，属性对应的值，可以是任意的值(number, object, function, etc)\n\n```\n let yeh = {}\nObject.defineProperty(yeh, \'age\', {})\nconsole.log(yeh.age) //undefined\n\nlet yeh2 = {}\nObject.defineProperty(yeh2, \'age\', {\n    value:24\n})\nconsole.log(yeh2.age) //24\n```\n\n**writable**\n\n是否可重新赋值，默认为false，此时为obj的prop重新赋值是无效的\n\n```\n let yeh = {}\nObject.defineProperty(yeh, \'age\', {\n    value:24\n})\nyeh.age = 25\nconsole.log(yeh.age) //24\n\nlet yeh2 = {}\nObject.defineProperty(yeh2, \'age\', {\n    value:24,\n    writable:true\n})\nyeh2.age = 25\nconsole.log(yeh2.age) //25\n```\n\n**get()/set()**\n\n默认值为undefined，当使用了get()或set()方法时，就不能再使用value和writable这两个特性\n\n```\nlet yeh = {}\nObject.defineProperty(yeh, \'age\', {\n    value:24,\n    set(newVal) {}\n})\n//TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object> at Function.defineProperty (<anonymous>)\n```\n\n定义了这两个方法后，当对对象属性进行赋值或取值操作时，会触发相应的get()或set()方法，在Vue.js中，这就是实现数据双向绑定的关键\n\n```\n var yeh = {}\nfunction watch(obj, key) {\n    var temp = {}\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        set(newVal) {\n            temp = newVal\n            console.log(\'执行了set方法，新的值为\' + newVal)\n        },\n        get() {\n            console.log(\'执行了get方法\')\n            return temp\n        }\n    })\n}\nwatch(yeh, \"age\")\nyeh.age = 25 //赋值，触发了set方法，打印“执行了set方法，新的值为25”\nconsole.log(yeh.age) //取值，触发了get方法，先打印“执行了get方法”，再打印“25”\n```','published',1,1505720183461),(35,'折腾一个html5播放器',NULL,'现在的网页中有很多场景中会涉及到视频播放，个人认为原生的控件已经做得很好了。但是老有人觉得原生的就是丑的，有什么办法呢，(\'_\')。本文利用html5 video的相关api，尝试折腾出一个“美化”过的的视频播放器。','>现在的网页中有很多场景中会涉及到视频播放，个人认为原生的控件已经做得很好了。但是老有人觉得原生的就是丑的，有什么办法呢，(\'_\')。本文利用html5 video的相关api，尝试折腾出一个“美化”过的的视频播放器。\n\n代码地址[https://github.com/justyeh/y-video-player](https://github.com/justyeh/y-video-player)\n\n\n## 构建HTML结构\n\n```\n<div class=\"y-video-box\">\n        <video id=\"y-video\" src=\"http://www.runoob.com/try/demo_source/movie.mp4\" poster=\"\"></video>\n        <div class=\"control-box\">\n            <div class=\"play-control\">\n                <i class=\"fa fa-play\"></i>\n                <i class=\"fa fa-pause\"></i>\n            </div>\n            <div class=\"time\">\n                <span class=\"time-current\">00:00</span> /\n                <span class=\"time-duration\">00:00</span>\n            </div>\n            <div class=\"process\">\n                <div class=\"process-buffered\"></div>\n                <div class=\"process-played\">\n                    <i class=\"drag-bar\"></i>\n                </div>\n            </div>\n            <div class=\"volume\">\n                <i class=\"fa fa-volume-up\"></i>\n                <i class=\"fa fa-volume-off\"></i>\n                <div class=\"volume-control\">\n                    <div class=\"volume-process\">\n                        <div class=\"volume-now\">\n                            <i class=\"drag-bar\"></i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"rate\">\n                <div>1.0x</div>\n                <ul>\n                    <li data-val=\"2\">2.0x</li>\n                    <li data-val=\"1.5\">1.5x</li>\n                    <li data-val=\"1\" class=\"active\">1.0x</li>\n                </ul>\n            </div>\n            <div class=\"fullscreen fullscreened\">\n                <i class=\"fa fa-expand\"></i>\n                <i class=\"fa fa-compress\"></i>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n### 播放控制\n\n控制视频的播放暂停主要是使用`play()`和`pause()`两个方法，先判断视频是否处于播放状态，然后切换状态就可以了。\n\n```\nlet $videoBox = $(\".y-video-box\");\nlet $videoElement = $(\'#y-video\');\nlet videoElement = $videoElement[0];\nlet $controlBox = $(\".control-box\");\n\nlet $playControl = $(\".play-control\");\n$playControl.click(function (e) {\n    let isPlaying = videoElement.currentTime > 0 && !videoElement.paused && !videoElement.ended && videoElement.readyState > 2;\n    if (!isPlaying) {\n        videoElement.play();\n        $playControl.addClass(\"playing\")\n    } else {\n        videoElement.pause();\n        $playControl.removeClass(\"playing\")\n    }\n    return false;\n})\n```\n\n### 获取视频当前事件/总时长\n\n当指定的视频的元数据已加载时，会发生`loadedmetadata`事件。借此我们可以获取视频的时长、尺寸以及文本轨道。\n\n```\n/*获取总时长*/\nlet $timeDuration = $(\".time-duration\")\n$videoElement.on(\'loadedmetadata\', function () {\n    $timeDuration.text(numberToTime(videoElement.duration));\n});\n```\n\n当视频的播放位置发生改变时会触发`timeupdate`事件，配合`currentTime`（设置或返回视频播放的当前位置） 属性，就可以获取视频的播放进度。\n\n```\nlet $timeCurrent = $(\".time-current\");\n$videoElement.on(\'timeupdate\', function () {\n    let maxduration = videoElement.duration;\n    let currentPos = videoElement.currentTime;\n    /*视频进度+时长*/\n    $timeCurrent.text(numberToTime(currentPos));\n\n});\n```\n\n`duration`和`currentTime`属性返回的是包含小数位的秒数据位，借助下面的工具函数将数据进行格式化，便于显示。\n\n```\nlet numberToTime = function (number) {\n    number = parseInt(number, 10);\n    let minues = 0;\n    let second = 0;\n    minues = parseInt(number / 60, 10);\n    second = number % 60\n    if (minues < 10) {\n        minues = \'0\' + minues\n    }\n    if (second < 10) {\n        second = \'0\' + second\n    }\n    return minues + \':\' + second;\n}\n```\n\n### 进度条\n\n进度条有两个，一个是当前进度，一个是缓冲进度。\n\n设置的方法都是获取相关时间点，然后时间点/总时长*100%，然后将得到的值设置为div的width属性即可。\n\n* 借助上面的`timeupdate`事件，利用`currentTime`属性获取当前播放位置。\n* 利用`buffered`属性获取`TimeRanges`对象，取`TimeRanges`对象里面的`end(index)`，从而获得某个已缓冲范围的结束位置。\n\n```\nlet $processPlayed = $(\".process-played\"),\n    $processBuffered = $(\".process-buffered\");\n$videoElement.on(\'timeupdate\', function () {\n    let maxduration = videoElement.duration;\n    let currentPos = videoElement.currentTime;\n    let currentBuffer = videoElement.buffered.end(0);\n\n    /*播放进度条*/\n    $processPlayed.css(\'width\', 100 * currentPos / maxduration + \'%\');\n    /*缓冲进度条*/\n    $processBuffered.css(\'width\', 100 * currentBuffer / maxduration + \'%\')\n});\n```\n\n### 声音控制\n\n实现点击声音图标，切换静音功能。\n\n```\nlet $volumeControl = $(\".volume\");\n$volumeControl.find(\"i\").click(function () {\n    $volumeControl.toggleClass(\"muted\")\n    if ($volumeControl.hasClass(\"muted\")) {\n        videoElement.muted = true;\n        $volumeNow.css(\'height\', \'0%\');\n    } else {\n        videoElement.muted = false;\n        $volumeNow.css(\'height\', videoElement.volume * 100 + \'%\');\n    }\n});\n```\n\n\n### 进度/音量的点击与拖拽\n        \n点击与拖拽控制是一个难点，具体的思路是根据鼠标在进度条上的位置/进度条的width（声音是height），获取一个比例，通过这个比例来进行赋值。\n\n进行更新之前要先判断是否处于拖拽状态。\n\n```\nlet timeDrag = false,\n    volumeDrag = false;\n$(document).mouseup(function (e) {\n    if (timeDrag) {\n        timeDrag = false;\n        updateVideoTime(e.pageX);\n    }\n    if (volumeDrag) {\n        volumeDrag = false;\n        updateVideoVolume(e.pageY);\n    }\n});\n$(document).mousemove(function (e) {\n    if (timeDrag) {\n        updateVideoTime(e.pageX);\n    }\n    if (volumeDrag) {\n        updateVideoVolume(e.pageY);\n    }\n});\n```\n\n**时间进度条**\n\n直接点击进度条\n\n```\nlet $timeProcess = $(\".process\");\n$timeProcess.mousedown(function (e) {\n    updateVideoTime(e.pageX);\n});\n```\n\n拖拽进度条\n\n```\n$timeProcess.find(\".drag-bar\").mousedown(function (e) {\n    timeDrag = true\n});\nlet updateVideoTime = function (x) {\n    //超出临界值后拖拽无效\n    if (x < $timeProcess.offset().left || x > $timeProcess.offset().left + $timeProcess.width()) {\n        return\n    }\n    let maxduration = videoElement.duration; //视频总时长\n    let position = x - $timeProcess.offset().left; //变化量\n    let percentage = position / $timeProcess.width();\n    //超出范围的修正\n    if (percentage > 1) {\n        percentage = 100;\n    }\n    if (percentage < 0) {\n        percentage = 0;\n    }\n    console.log(maxduration * percentage)\n    //更新进度条和当前时间\n    videoElement.currentTime = maxduration * percentage;\n    //$processPlayed.css(\'width\', (percentage * 100)+\'%\');\n}\n```\n\n**声音进度条**   \n\n初始化精度条的位置\n\n```\nlet $volumeProcess = $(\".volume-process\"),\n    $volumeNow = $(\".volume-now\");\n$volumeNow.css(\'height\', videoElement.volume * 100 + \'%\');\n```\n\n直接点击进度条\n\n```\n$volumeProcess.mousedown(function (e) {\n    updateVideoVolume(e.pageY);\n});\n```\n\n拖拽进度条\n\n```\n$volumeProcess.find(\".drag-bar\").mousedown(function (e) {\n    volumeDrag = true\n});\n\nlet updateVideoVolume = function (y) {\n    //超出临界值后拖拽无效\n    if (y < $volumeProcess.offset().top || y > $volumeProcess.offset().top + $volumeProcess.height()) {\n        return\n    }\n    let position = y - $volumeProcess.offset().top; //变化量\n    let percentage = 1 - (position / $volumeProcess.height());\n    /*0~0.05取个过渡，都认为是0*/\n    if (percentage < 0.05) {\n        $volumeControl.addClass(\"muted\")\n        percentage = 0\n    } else {\n        $volumeControl.removeClass(\"muted\")\n    }\n    console.log(percentage)\n    //更新进度条和当前时间\n    videoElement.volume = percentage;\n    $volumeNow.css(\'height\', percentage * 100 + \'%\');\n}\n```\n\n### 视频播放速率\n\n播放速率的控制比较简单，使用`playbackRate`这个属性就可以完成。\n\n```\nlet $videoRate = $(\".rate\");\n$videoRate.find(\"li\").click(function () {\n    if ($(this).hasClass(\"active\")) {\n        return\n    }\n    $(this).addClass(\"active\").siblings().removeClass(\"active\");\n    $videoRate.find(\"div\").text($(this).text())\n    videoElement.playbackRate = parseFloat($(this).data(\"val\"))\n})\n```\n\n### 全屏控制\n\n全屏的兼容处理起来比较麻烦，参考下面的代码：\n\n\n```\nlet $fullScreen = $(\".fullscreen\");\n$fullScreen.click(function () {\n    $(this).toggleClass(\"fullscreened\");\n    $videoBox.toggleClass(\"fullscreened\");\n    if ($(this).hasClass(\"fullscreened\")) {\n        fullScreenOff()\n    } else {\n        fullScreenOn(videoElement)\n    }\n})\n```\n\n切换到全屏\n\n```\nfunction fullScreenOn(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n        //firefox会用<video>元素的父元素去调用全屏\n        $videoBox[0].mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.oRequestFullscreen) {\n        element.oRequestFullscreen();\n    } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullScreen();\n    } else {\n        /* var docHtml = document.documentElement;\n            var docBody = document.body;\n            var videobox = document.getElementById(\'sfLive\');\n            var cssText = \'width:100%;height:100%;overflow:hidden;\';\n            docHtml.style.cssText = cssText;\n            docBody.style.cssText = cssText;\n            videobox.style.cssText = cssText+\';\'+\'margin:0px;padding:0px;\';\n            document.IsFullScreen = true;*/\n    }\n    $controlBox.css(\'z-index\', \'2147483647\');\n}\n```\n\n关闭全屏\n\n```\nfunction fullScreenOff() {\n    if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.oRequestFullscreen) {\n        document.oCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n    } else {\n        var docHtml = document.documentElement;\n        var docBody = document.body;\n        var videobox = document.getElementById(\'sfLive\');\n        docHtml.style.cssText = \"\";\n        docBody.style.cssText = \"\";\n        videobox.style.cssText = \"\";\n        document.IsFullScreen = false;\n    }\n}\n```\n\n### 总结\n\n* 在chrome中，使用本地视频时，设置`currentTime`会出现视频重新播放的问题，将视频改为`http(s)`地址就好了。\n\n* 时长（声音）进度条上的拖拽点现在还有一点问题，为了美观将它的left设置成了负值（声音为top），拖拽有可能造成超出临界值，这造成了拖拽的一些bug，目前还有待解决。\n\n参考文章：[http://cheri.love/post/xue-xi-lei/h5-liu-lan-qi-zi-ding-yi-yong-hu-kong-jian](http://cheri.love/post/xue-xi-lei/h5-liu-lan-qi-zi-ding-yi-yong-hu-kong-jian)\n\n','published',1,1506484141339),(36,'使用nodejs做爬虫来爬取一本小说','','最近在网上看到了一个小说，感觉挺好看的，在线阅读的网站广告比较多，想下载下来，结果找半天也没个全本下载的。于是想到用爬虫自己来实现，下面记录了我的实现过程','>最近在网上看到了一个小说，感觉挺好看的，在线阅读的网站广告比较多，想下载下来，结果找半天也没个全本下载的。于是想到用爬虫自己来实现，下面记录了我的实现过程。\r\n\r\n### 使用nodegrass做网络请求\r\n\r\n刚开始是使用`http`模块的`get`方法来做网络请求的，不过一直有中文乱码的问题，于是找到了`nodegrass`，使用比较简单：\r\n\r\n```\r\nvar gs = require(\'nodegrass\');\r\ngs.get(\'章节列表地址\', function (data) {\r\n  filterHtml(data)\r\n}, \'gbk\');\r\n```\r\n\r\n### 使用cheerio做爬虫\r\n\r\n这里使用`cheerio`来解析`html`，这个库对前端来说简直是如鱼得水，它具有和`JQuery`相似的语法，使用起来毫无障碍。\r\n\r\n```\r\nfunction filterHtml(html) {\r\n    // 沿用JQuery风格，定义$\r\n    var $ = cheerio.load(html);\r\n    //遍历章节列表，获取所有章节的url\r\n    $(\'#list a\').each(function () {\r\n        getNovelContent($(this).attr(\'href\'), $(this).text())\r\n    });\r\n}\r\nfunction getNovelContent(url, title) {\r\n    //获取html中的小说内容并存入本地\r\n    gs.get(url, function (data) {\r\n        var $ = cheerio.load(data);\r\n        //有时一次不能下载所有的章节，再执行一次，并过滤掉已经存在的\r\n        if (!fse.pathExistsSync(\'./novel/\' + title + \'.txt\')) {\r\n            fse.outputFile(\'./novel/\' + title + \'.txt\', title + \'\\n\' + $(\'#content\').text() + \'\\n\', function (err) {\r\n                if (err) {\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n                console.log(title + \'保存成功\');\r\n            });\r\n        }\r\n    }, \'gbk\');\r\n}\r\n```\r\n\r\n\r\n### 多个txt文件的合并\r\n\r\n上面的方法有个问题，就是下载下来的每个章节都是一个txt文件，下面这个脚本可以将多个txt文件合并成一个文件。\r\n\r\n```\r\n::合并多个txt文件.bat\r\n::将目录下的所有文件按照文件名顺序合并，保存为name.txt\r\ncopy *.txt name.txt\r\n```','published',1,1546681165573),(37,'[转载]深入研究-webkit-overflow-scrolling:touch及ios滚动','/1548660681722-poster.gif','在移动端上，在你用overflow-y:scorll属性的时候，你会发现滚动的效果很木，很慢，这时候可以使用-webkit-overflow-scrolling:touch这个属性，让滚动条产生滚动回弹的效果，就像ios原生的滚动条一样流畅。','转载自[https://www.cnblogs.com/xiahj/p/8036419.html](https://www.cnblogs.com/xiahj/p/8036419.html)\r\n\r\n### 1. -webkit-overflow-scrolling:touch是什么？\r\n\r\nMDN上是这样定义的：\r\n\r\n>-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.\r\nauto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。\r\ntouch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。\r\n\r\n在移动端上，在你用overflow-y:scorll属性的时候，你会发现滚动的效果很木，很慢，这时候可以使用-webkit-overflow-scrolling:touch这个属性，让滚动条产生滚动回弹的效果，就像ios原生的滚动条一样流畅。\r\n\r\n\r\n### 2. 解决safari布局抖动的例子\r\n\r\n![](/blogs/webkit-overflow-scrolling/1.png)\r\n\r\n**想实现一个布局为header、main、bottom的布局，其中头部和底部通过fixed固定，中间部分通过滚动条滑动**\r\n\r\n如果目的是实现只要中间的内容超过屏幕高度时，中间内容会自动滚动的效果的话，main部分加上上下的padding，然后不需要自己添加任何滚动条属性，当超出高度时，body会自动产生滚动条。这样我们的目的其实是实现了的。\r\n\r\n但是在safari上，当超出高度，页面往下滑时，浏览器底部的工具栏会随着页面一起晃动（向下滚动时会拉起底部工具栏），造成了很不好的体验。所以我们想在中间的main部分加一个独立的滚动条。\r\n\r\n#### 2.1 方案一\r\n\r\n不过不推荐这个fixed方案，因为页面偶尔卡住不动，下面说到了这个问题\r\n\r\n```\r\n.main {\r\n    position: fixed;\r\n    top: 50px;\r\n    bottom: 50px;\r\n    overflow-y: scroll;\r\n}\r\n```\r\n\r\n不过不推荐这个fixed方案，因为页面偶尔卡住不动，下面说到了这个问题。\r\n\r\n#### 2.2 方案二\r\n\r\n**中间的main不设定位，高度100%，再padding头部和尾部**\r\n\r\n其中头部和底部的定位设为absolute会比设为fixed体验更好（况且fix布局在移动端本来就有各种各样的问题，还是尽量避开:) ）。\r\n\r\n大致代码如下，仍是 overflow-y 和-webkit-overflow-scrolling，重点在于中间部分依照文本流布局。\r\n\r\n```\r\nhtml, body {\r\n   height: 100%;\r\n  }\r\n  main {\r\n      padding: 50px 0;\r\n      height: 100%;\r\n      overflow-y: scroll;\r\n      -webkit-overflow-scrolling: touch;\r\n}\r\n```\r\n\r\n### 3. 探究-webkit-overflow-scrolling:touch偶尔卡住或不能滑动的bug\r\n\r\n-webkit-overflow-scrolling:touch这个属性真的是各种坑，我研究这个属性已经大半年了，还没有发现能够在safari上完美使用无bug的例子。\r\n\r\n>最常见的例子就是：\r\n* 在safari上，使用了-webkit-overflow-scrolling:touch之后，页面偶尔会卡住不动。\r\n* 在safari上，点击其他区域，再在滚动区域滑动，滚动条无法滚动的bug。\r\n* 通过动态添加内容撑开容器，结果根本不能滑动的bug。\r\n\r\n\r\n在网上也看到了一些人在问这个问题，不过不多，国外倒是讨论的更多一点，描述如下。\r\n\r\n![](/blogs/webkit-overflow-scrolling/2.png)\r\n\r\n偶尔卡住的问题，解决方案网上众说纷纭，遇到了很多相同的说法，比如如果卡住不动的话，就加一个z-index，就能解决该问题的说法。\r\n\r\n在试了很多次之后，这种说法没有一次解决过这个问题。这个说法能够传播出来，可能是使用者当时在使用的时候遇到了-webkit-overflow-scrolling:touch点透或者层级的问题。所以该方案不具有适用性。\r\n\r\n所以这个东西真的让我很苦恼了很久，以致于那段时间所有的滚动条不是通过body自己滚动，就是使用iScroll这样的库，繁琐地让我几乎想要放弃移动web，拥抱hybrid，不过在stackoverflow潜水了很久之后，总结了以下几种解决方案：\r\n\r\n\r\n#### 3.1 保证使用了该属性的元素上没有设置定位\r\n\r\n如果出现偶尔卡住不动的情况，那么在使用该属性的元素上不设置定位或者手动设置定位为static\r\n\r\n```\r\nposition: static\r\n```\r\n\r\n这样会解决部分因为定位(relative、fixed、absolute)导致的页面偶尔不能滚动的bug。\r\n\r\n>但是滑动到顶部继续手指往下滑，或者到底部继续往上滑，还是会触发卡住的问题（其实是整个页面上下回弹），说他算bug，其实就是ios8以上的特性，如果滚动区域大一点，用户不会觉得这是bug，如果小了，用户会不知道发生了什么而卡住了。\r\n视频在这，有梯子的同学可以看一看https://www.youtube.com/watch?v=MkAVYbO_joo。\r\n\r\n\r\n\r\n#### 3.2 如果添加动态内容页面不能滚动，让子元素height+1\r\n\r\n如果在-webkit-overflow-scrolling:touch属性的元素上，想通过动态添加内容来撑开容器，触发滚动，是有bug 的，页面是会卡住不动的。\r\n\r\n国内没有人讨论这个问题，国外倒是很多，例如下面的描述：\r\n\r\n![](/blogs/webkit-overflow-scrolling/3.png)\r\n\r\n收集了很多资料，用了之后，下面的方法真正的解决了我的问题，真是直呼神奇，方案如下图：\r\n\r\n图一：\r\n\r\n![](/blogs/webkit-overflow-scrolling/4.png)\r\n\r\n图二：\r\n\r\n![](/blogs/webkit-overflow-scrolling/5.png)\r\n\r\n方法就是在webkit-overflow-scrolling:touch属性的下一层子元素上，将height加1%或1px。从而主动触发scrollbar。\r\n\r\n```\r\nmain-inner {\r\n    min-height: calc(100% + 1px)\r\n}\r\n```\r\n\r\n你也可以直接加伪元素上：\r\n\r\n```\r\nmain:after {\r\n    min-height: calc(100% + 1px)\r\n}\r\n```\r\n\r\n这个方案不得不说真的好用。。\r\n\r\n当然还有其他方案，不过要写js或者jq了，麻烦。\r\n\r\n#### 3.3 为什么会有卡住不动的这个bug\r\n\r\n这个bug产生于ios8以上（不十分肯定，但在ios5~7上需要手动使用translateZ(0)打开硬件加速）\r\n\r\nSafari对于overflow-scrolling用了原生控件来实现。对于有-webkit-overflow-scrolling的网页，会创建一个UIScrollView，提供子layer给渲染模块使用。\r\n\r\n我想说作为一个苦逼的前端只能解决到这了。\r\n\r\n\r\n### 4. -webkit-overflow-scrolling:touch的其他坑\r\n\r\n>除此之外，这个属性还有很多bug，包括且不限于以下几种：\r\n* 滚动中 scrollTop 属性不会变化\r\n* 手势可穿过其他元素触发元素滚动\r\n* 滚动时暂停其他 transition\r\n\r\n\r\n### 最后的吐槽\r\n\r\n想写这个文章很久了， 本来以为就我有这个问题，结果看到网站上也有很多人在用这个属性，我用safari试了下，都能触发不能滑动的问题，但是网上的文章又很少，不知道大家是不是就视而不见了。\r\n\r\n所以目前来看，如果不想那么费心，直接上iScroll或者better-scroll吧，我觉得better-scroll还是挺好用的。如果你喜欢偷懒，那么接着用-webkit-overflow-scrolling:touch也没什么问题。\r\n\r\n**毕竟移动端的水太深了，你永远不知道下一个问题是发生在safari还是x5内核浏览器上。**','published',1,1548660681753),(39,'Vue项目history模式下微信分享总结','/1555490710472-poster.png','每回遇到微信分享都是一个坑，目前的商城项目使用Vue开发，采用history的路由模式，配置微信分享又遇到了很多问题，最后终于解决了，现将解决的过程分享一下。','>每回遇到微信分享都是一个坑，目前的商城项目使用Vue开发，采用history的路由模式，配置微信分享又遇到了很多问题，最后终于解决了，现将解决的过程分享一下。\n\n\n### 技术要点\n\nVue，history模式\n\n### 常见问题及说明\n\n**debug模式下报false**\n\n这个没得说，就是调用`wx.config`方法的参数错误造成的，请确认以下事项：\n\n1. 是否成功绑定了域名（域名校验文件要能被访问到）\n2. 使用最新的js-sdk文件，因为微信会改部分api\n3. config方法的参数是否传正确了（拼写错误、大小写...）\n4. 需要使用的方法是否写在了`jsApiList`中\n5. 获取签名的url需要`decodeURIComponent`\n6. 后台的生成签名的加密方法需要对照官方文档\n\n**debug返回ok，分享不成功**\n\n1. 确保代码拼写正确\n2. 分享链接域名或路径必须与当前页面对应的公众号JS安全域名一致\n3. 接口调用需要放在`wx.ready`方法中\n\n### 单页项目（SPA）中的一些要点\n\n>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。\n\n上面那段话摘自[官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115)\n\n开发者需要注意的事项：\n\n1. android和ios需要分开处理\n2. 需要在页面url变化的时候重新调用`wx.config`方法，android获取签名的url就传`window.location.href`\n3. Vue项目在切换页面时，IOS中浏览器的url并不会改变，依旧是第一次进入页面的地址，所以IOS获取签名的url需要传第一次进入的页面url\n\n\n### Code\n\n\n**router/index.js**\n\n\n```\n......\nimport { wechatAuth } from \"@/common/wechatConfig.js\";\n......\n\nconst router = new Router({\n    mode: \"history\",\n    base: process.env.BASE_URL,\n    routes: [\n        {\n            path: \"/\",\n            name: \"home\",\n            meta: {\n                title: \"首页\",\n                showTabbar: true,\n                allowShare: true\n            },\n        },\n        {\n            path: \"/cart\",\n            name: \"cart\",\n            meta: {\n                title: \"购物车\",\n                showTabbar: true\n            },\n            component: () => import(\"./views/cart/index.vue\")\n        }\n        ......\n    ]\n});\n\n\nrouter.afterEach((to, from) => {\n    let authUrl = `${window.location.origin}${to.fullPath}`;\n    let allowShare = !!to.meta.allowShare;\n\n    if (!!window.__wxjs_is_wkwebview) {// IOS\n        if (window.entryUrl == \"\" || window.entryUrl == undefined) {\n            window.entryUrl = authUrl; // 将后面的参数去除\n        }\n        wechatAuth(authUrl, \"ios\", allowShare);\n    } else {\n        // 安卓\n        setTimeout(function () {\n            wechatAuth(authUrl, \"android\", allowShare);\n        }, 500);\n    }\n});\n```\n\n代码要点：\n\n1. meta中的allowShare用于判断页面是否可分享\n2. window.__wxjs_is_wkwebview可用来判断是否是微信IOS浏览器\n3. entryUrl是项目第一次进入的页面的地址，将其缓存在window对象上\n4. 为什么安卓的时候要增加一个延时器，因为安卓会存在一些情况，就是即便签名成功，但是还是会唤不起功能，这个貌似是一个比较稳妥的解决办法\n\n\n**wechatConfig.js**\n\n\n```\nimport http from \"../api/http\";\nimport store from \"../store/store\";\n\nexport const wechatAuth = async (authUrl, device, allowShare) => {\n    let shareConfig = {\n        title: \"xx一站式服务平台\",\n        desc: \"xxxx\",\n        link: allowShare ? authUrl : window.location.origin,\n        imgUrl: window.location.origin + \"/share.png\"\n    };\n\n    let authRes = await http.get(\"/pfront/wxauth/jsconfig\", {\n        params: {\n            url: decodeURIComponent(device == \"ios\" ? window.entryUrl : authUrl)\n        }\n    });\n\n    if (authRes && authRes.code == 101) {\n        wx.config({\n            //debug: true,\n            appId: authRes.data.appId,\n            timestamp: authRes.data.timestamp,\n            nonceStr: authRes.data.nonceStr,\n            signature: authRes.data.signature,\n            jsApiList: [\"updateAppMessageShareData\", \"updateTimelineShareData\", \"onMenuShareAppMessage\", \"onMenuShareTimeline\"]\n        });\n\n        wx.ready(() => {\n            wx.updateAppMessageShareData({\n                title: shareConfig.title,\n                desc: shareConfig.desc,\n                link: shareConfig.link,\n                imgUrl: shareConfig.imgUrl,\n                success: function () {//设置成功\n                    //shareSuccessCallback();\n                }\n            });\n            wx.updateTimelineShareData({\n                title: shareConfig.title,\n                link: shareConfig.link,\n                imgUrl: shareConfig.imgUrl,\n                success: function () {//设置成功\n                    //shareSuccessCallback();\n                }\n            });\n            wx.onMenuShareTimeline({\n                title: shareConfig.title,\n                link: shareConfig.link,\n                imgUrl: shareConfig.imgUrl,\n                success: function () {\n                    shareSuccessCallback();\n                }\n            });\n            wx.onMenuShareAppMessage({\n                title: shareConfig.title,\n                desc: shareConfig.desc,\n                link: shareConfig.link,\n                imgUrl: shareConfig.imgUrl,\n                success: function () {\n                    shareSuccessCallback();\n                }\n            });\n        });\n    }\n};\n\nfunction shareSuccessCallback() {\n    if (!store.state.user.uid) {\n        return false;\n    }\n    store.state.cs.stream({\n        eid: \"share\",\n        tpc: \"all\",\n        data: {\n            uid: store.state.user.uid,\n            truename: store.state.user.truename || \"\"\n        }\n    });\n    http.get(\"/pfront/member/share_score\", {\n        params: {\n            uid: store.state.user.uid\n        }\n    });\n}\n\n```\n\n### 总结\n\n原先计划不能分享的页面就使用hideMenuItems方法隐藏掉相关按钮，在ios下试了一下，有些bug：显示按钮的页面切换的影藏按钮的页面，分享按钮有时依然存在，刷新就没问题，估计又是一个深坑，没精力在折腾了，就改为隐私页面分享到首页，公共页面分享原地址，如果有什么好的解决办法，请联系我！\n\n一开始我有参考sf上的一篇博客[https://segmentfault.com/a/1190000014455713](https://segmentfault.com/a/1190000014455713)，按照上面的代码，android手机都能成功，但是IOS有一个奇怪的问题，就是分享间歇性的失效，同一个页面，刚刚调起分享成功，再试一次就失败（没有图标、title，只能跳转到首页），经过“不断”努力的尝试，应该是解决了问题，说一下过程：\n\n1. 一开始以为是异步唤起没成功的问题，就和android一样给IOS调用wechatAuth方法也加了个定时器，测了一遍没效果，放弃\n\n\n2. 起始js-sdk是通过npm安装的，版本上带了个test，有点不放心，改为直接使用script标签引用官方的版本\n\n\n3. 重新读了一遍文档，发现onMenuShareTimeline等方法即将废弃，就把jsApiList改为`jsApiList:[\'updateAppMessageShareData\',\'updateTimelineShareData\']`，改后就变成了IOS可以成功，android分享失败\n\n\n4. 百度updateAppMessageShareData安卓失败原因，参考这个链接[https://www.jianshu.com/p/1b6e04c2944a](https://www.jianshu.com/p/1b6e04c2944a)，把老的api也加到jsApiList中，仔细、反复试了试两种设备都ok，好像是成功了，说\"好像\"是因为心里没底啊，各种“魔法”代码！\n\n\n\n最后，在这里希望腾讯官方能不能走点心，更新文档及时点，demo能不能提供完整点....\n\n**参考链接**\n\n[https://segmentfault.com/a/1190000014455713](https://segmentfault.com/a/1190000014455713)\n\n[https://www.jianshu.com/p/1b6e04c2944a](https://www.jianshu.com/p/1b6e04c2944a)\n\n[https://segmentfault.com/a/1190000012339148](https://segmentfault.com/a/1190000012339148)\n\n[https://github.com/vuejs/vue-router/issues/481](https://github.com/vuejs/vue-router/issues/481)\n\n\n','published',1,1555494301856),(40,'[转]前端开发掌握nginx常用功能之rewrite','/1555550739066-poster.png','掌握nginx请求的匹配规则算是对nginx有了入门，但是这些往往还是不能满足实际的需求场景，例如请求url重写、重定向等等，这都需要对请求的path进行修改操作的，匹配规则是不能独自完成实际需求的，这就需要掌握nginx的另一个常用功能rewrite，下面就来说说这个常用功能。','>掌握请求的匹配规则算是对nginx有了入门，但是这些往往还是不能满足实际的需求场景，例如请求url重写、重定向等等，这都需要对请求的path进行修改操作的，匹配规则是不能独自完成实际需求的，这就需要掌握nginx的另一个常用功能rewrite，下面就来说说这个常用功能。\n\n### Rewrite规则\n\nrewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。\nrewrite只能放在server{}, location{}, if{} 中，并且只能对域名后边传递的参数外的字符串起作用，例如 baidu.com/a/we/index.… 只对/a/we/index.php重写。语法：\n\n```\nrewrite regex replacement [flag];\n```\n\n如果想对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。\n\n表面上看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：\n\n* 执行server块的rewrite指令\n* 执行location匹配\n* 执行选定的location中的rewrite指令\n\n如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。\n\n#### flag标志位\n\n* `last` : 停止执行当前`ngx_http_rewrite_module`的指令集，但是会继续走一遍请求匹配对应`server`或者`location`；\n* `break` : 停止执行当前`ngx_http_rewrite_module`的指令集，请求就此完成。\n* `redirect `: 返回302临时重定向，地址栏会显示跳转后的地址\n* `permanent` : 返回301永久重定向，地址栏会显示跳转后的地址\n\n因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。\n\n对于上面的flag，有几点需要强调一下：\n\n**last与break对url的重写不会改变地址栏的地址**\n\n也就是说，nginx虽然对请求url进行了重写，但是地址栏不会有任何明显的改变，仍然显示nginx重写前的地址；这与redirect和permanent不同。\n\n**last与break的处理策略不同**\n\n二者都会终止当前ngx_http_rewrite_module的指令集的执行，但是 last 立即发起新一轮的 请求匹配 而 break 则不会。\n\n**redirect和permanent会终止后续nginx指令的执行**\n\nnginx在rewrite遇到flag是二者时，后续的指令是不会执行的。\n\n```\nserver {\n    listen 8080;\n    location = /test {\n        break;\n        return 200 $request_uri;\n        proxy_pass http://127.0.0.1:8080/other;\n    }\n    location / {\n        return 200 $request_uri;\n    }\n}\n```\n\n上面例子中，我们访问 curl 127.0.0.1:8080/test，会发现，return 200 $request_uri语句没有执行，而proxy_pass指令被执行了。这是因为：\n\n>return指令属于ngx_http_proxy_module模块，它会被break终止掉；而rewrite模块它是ngx_http_proxy_module的指令，不会被break给中断掉。\n\n####  if指令与全局变量\n\nif判断指令\n\n语法为if(condition){...} ，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：\n\n* 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false\n* 直接比较变量和内容时，使用=或!=\n* ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配\n\n-f和!-f用来判断是否存在文件\n\n-d和!-d用来判断是否存在目录\n\n-e和!-e用来判断是否存在文件或目录\n\n-x和!-x用来判断文件是否可执行\n\n例如：\n\n```\nif ($http_user_agent ~ MSIE) {\n    rewrite ^(.*)$ /msie/$1 break;\n} //如果UA包含\"MSIE\"，rewrite请求到/msid/目录下\n\nif ($http_cookie ~* \"id=([^;]+)(?:;|$)\") {\n    set $id $1;\n } //如果cookie匹配正则，设置变量$id等于正则引用部分\n\nif ($request_method = POST) {\n    return 405;\n} //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302\n\nif ($slow) {\n    limit_rate 10k;\n} //限速，$slow可以通过 set 指令设置\n\nif (!-f $request_filename){\n    break;\n    proxy_pass  http://127.0.0.1;\n} //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查\n\nif ($args ~ post=140){\n    rewrite ^ http://example.com/ permanent;\n} //如果query string中包含\"post=140\"，永久重定向到example.com\n\nlocation ~* \\.(gif|jpg|png|swf|flv)$ {\n    valid_referers none blocked www.jefflei.com www.leizhenfang.com;\n    if ($invalid_referer) {\n        return 404;\n    } //防盗链\n}\n```\n\n#### 全局变量\n\n下面是可以用作if判断的全局变量:\n\n* $args ： #这个变量等于请求行中的参数，同$query_string\n* $content_length ： 请求头中的Content-length字段。\n* $content_type ： 请求头中的Content-Type字段。\n* $document_root ： 当前请求在root指令中指定的值。\n* $host ： 请求主机头字段，否则为服务器名称。\n* $http_user_agent ： 客户端agent信息\n* $http_cookie ： 客户端cookie信息\n* $limit_rate ： 这个变量可以限制连接速率。\n* $request_method ： 客户端请求的动作，通常为GET或POST。\n* $remote_addr ： 客户端的IP地址。\n* $remote_port ： 客户端的端口。\n* $remote_user ： 已经经过Auth Basic Module验证的用户名。\n* $request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n* $scheme ： HTTP方法（如http，https）。\n* $server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n* $server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n* $server_name ： 服务器名称。\n* $server_port ： 请求到达服务器的端口号。\n* $request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n* $uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n* $document_uri ： 与$uri相同。\n\n例如：\n\n```\nhttp://localhost:88/test1/test2/test.php\n$host：localhost\n$server_port：88\n$request_uri：http://localhost:88/test1/test2/test.php\n$document_uri：/test1/test2/test.php\n$document_root：/var/www/html\n$request_filename：/var/www/html/test1/test2/test.php\n```\n\n#### 常用正则\n\n* . ： 匹配除换行符以外的任意字符\n* ? ： 重复0次或1次\n* \\+ ： 重复1次或更多次\n* \\* ： 重复0次或更多次\n* \\d ：匹配数字\n* ^ ： 匹配字符串的开始\n* $ ： 匹配字符串的结束\n* {n} ： 重复n次\n* {n,} ： 重复n次或更多次\n* [c] ： 匹配单个字符c\n* [a-z] ： 匹配a-z小写字母的任意一个\n\n小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\\转义特殊字符。\n\n#### rewrite实例\n\n```\nhttp {\n    # 定义image日志格式\n    log_format imagelog \'[$time_local] \' $image_file \' \' $image_type \' \' $body_bytes_sent \' \' $status;\n    # 开启重写日志\n    rewrite_log on;\n\n    server {\n        root /home/www;\n\n        location / {\n                # 重写规则信息\n                error_log logs/rewrite.log notice;\n                # 注意这里要用‘’单引号引起来，避免{}\n                rewrite \'^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\\.(png|jpg|gif)$\' /data?file=$3.$4;\n                # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行\n                set $image_file $3;\n                set $image_type $4;\n        }\n\n        location /data {\n                # 指定针对图片的日志格式，来分析图片类型和大小\n                access_log logs/images.log mian;\n                root /data/images;\n                # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里\n                try_files /$arg_file /image404.html;\n        }\n        location = /image404.html {\n                # 图片不存在返回特定的信息\n                return 404 \"image not found\\n\";\n        }\n}\n```\n\n对形如/images/ef/uh7b3/test.png的请求，重写到/data?file=test.png，于是匹配到location /data，先看/data/images/test.png文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。\n\n```\nrewrite ^/images/(.*)_(\\d+)x(\\d+)\\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&height=$3? last;\n```\n\n对形如/images/bla_500x400.jpg的文件请求，重写到/resizer/bla.jpg?width=500&height=400地址，并会继续尝试匹配location。\n\n#### rewrite需要注意的问题\n\n上面说过，rewrite的指令规则为：`rewrite regex replacement [flag];`\n\nrewrite指令用指定的regex来匹配请求的uri，若匹配成功则用replacement来重写请求uri。这里需要注意的replacement字符串的内容：\n\n**若replacement以http://、https://或者$scheme开头，则告诉nginx这是重定向操作(flag默认为redirect)，nginx则停止处理后续内容，并直接重定向返回给客户端。**\n\n```\nlocation / {\n    # 当匹配 正则表达式 /test/(.*)时 请求将被临时重定向到 http://www.baidu.com/$1\n    # flag默认为redirect\n    rewrite /test/(.*) https://www.baidu.com/$1;\n    return 200 ’ok\'; # 此处没有机会执行\n}\n```\n\n**replacement非以上三种情况开头，则就是简单的url重写**\n\n```\nlocation / {\n    # 当匹配 正则表达式 /test/(.*)时 请求将被临时重定向到 www.baidu.com/$1\n    # flag无值则rewrite会顺序执行\n    rewrite /test/(.*) www.baidu.com/$1;\n    return 200 ’ok\'; # 此处因为rewrite顺序执行而得到执行机会\n}\n```\n\n对于上面两种情况，还需要特别留意一个redirect端口的问题，先上一个例子：\n\n```\n## server.com机器上nginx的配置如下：\nserver {\n    listen 8000;\n    location /test1/ {\n    rewrite /test1/index.html http://server1.com/demo/test1 redirect;\n    }\n    location /test2/ {\n    rewrite /test2/index.html /demo/test2 redirect;\n        proxy_pass http://192.168.1.3:8000;\n    }\n}\n```\n\n当访问server.com/test1/index…时，会命中/test1的location规则，访问server1.com对应内容一直失败，发现重定向后响应头的Location字段值为server1.com:8000/demo/test1，带有8000端口，我们并没有配置，表现的比较诡异？\n\n访问server.com/test2/index…时，命中/test2的location规则，同样访问失败，但是访问的重定向后响应头Location字段值为server.com:8000/demo/test2，其带有server.com的server_name和8000的端口，更加诡异？\n\n看到上面的现象，疑惑重重；其实这跟nginx的server_name_in_redirect和port_in_redirect指令有关:\n\n>在绝对路径中，server_name_in_redirect 和port_in_redirect 指令表示是否将server块中的 server_name 和 listen 的端口作为redirect用, 重定向的完整url地址根据$scheme跟server_name_in_redirect和port_in_redirect来确定的。\n\n在绝对路径中，server_name_in_redirect默认是禁用的，而port_in_redirect是默认启用的。对于带有$scheme重定向的绝对路径，nginx会从replacement中获取指定的server_name和port来进行重定向：\n\n第一种，若replacement带请求协议http(s)，而其中没有指定port的话，nginx会默认取当前server的listen端口作为重定向的端口。这是上面访问server.com/test1/index…时重定向到server.com:8000/demo/test2时会携带8000的原因。\n\n第二种，若replacement不带请求协议http(s)，而是相对本地服务器的绝对地址的话，如上面访问server.com/test2/index…的情况，此时server_name_in_redirect由于禁用它会去请求的host来作为server_name，取当前server的listen端口作为重定向的端口，最终重定向到server.com:8000/demo/test2。\n\n或许你会问，访问server.com/test2/index…为什么不会重定向到http://192.168.1.3:8000/demo/test2上？这是因为rewrite的redirect flag会终止后续指令的执行，所以其后的proxy_pass指令不会执行。\n\n\n**原文**\n\n[https://www.cnblogs.com/wonyun/p/10355574.html](https://www.cnblogs.com/wonyun/p/10355574.html)\n\n','published',1,1555550739089),(41,'面试题','','','## BFC 是什么？如何生成 BFC？BFC 有什么作用？\n\n**What**\n\nBFC是“Box Formating Context”指得是“块级格式化上下文”，它是一个独立的块级渲染区域，这个区域拥有自己的规则来约束块级盒子的布局，并且这种布局与区域外部无关\n\n**How**\n\n* 浮动，float的值不为none\n* position的值为absolute或fixed\n* overflow 的属性值不为 visible\n* display的值为inline-block、table-cell、table-caption\n\n**Effect**\n\n* 清除浮动、解决浮动元素造成的高度塌陷\n* 消除文字围绕浮动元素\n* 防止正常文档流中元素占据浮动元素的位置\n* 防止外边距折叠\n\n**外边距折叠**\n\n1. 两个相同大小的正数：取某个外边距的值。即30px与30px发生折叠，折叠后的值为30px。\n2. 两个不同大小的正数：取较大的外边距的值。即30px与20px发生折叠，折叠后的值为30px。\n3 .一正一负：取正数与负数的和。即30px与-20px发生折叠，折叠后的值为10px。\n4. 相同大小的负数：同相同大小正数。-30px与-30px折叠，折叠后为-30px。\n5. 不同大小负数： 取绝对值较大的负数。-30px与-20px折叠，折叠后为-30px。\n\n\n## Vue\n\n**Vue是怎么做到当数据发生变化时，页面UI也会发生对应的变化**\n\n使用Object.defineProperties这个API，通过Getter和Setter监听数据的变化，然后当数据发生变化时，Vue可以将通知发生给对应的组件，然后组件内部VirtualDOM进行对比，更新UI\n\n\n**Vue 可以不让某些对象的属性被劫持吗**\n\n\nObject.freeze()阻止修改现有属性的特性和值，并阻止添加新属性。\n\n如果你有一个巨大的数组或Object，并且确信数据不会修改，使用Object.freeze()可以让性能大幅提升。\n\n**性能提升延伸：**\n\nv-once 只渲染元素和组件一次。举个例子，譬如我现在有一个列表， 初始化数据为一个空数组，如果我在该列表的dom上使用v-once指令，当我请求到列表数据，并更新vm中该列表所绑定的数据时，此时dom并不会更新。\n\nObject.freeze 冻结某个对象。只是冻结该对象的属性，vue执行observe的时候会判断该属性的description中configurable是否为false（使用Object.getOwnPropertyDescriptor(obj, key)查看某对象某属性是否可配置），若为false，则不为该属性添加set get，竟然没有添加get set，当你更新该对象的属性值时，dom并不会更新。但是当你用一个新对象替换掉该对象时，dom就会更新了。\n\n\n**Diff对比的细节**\n\n我们先根据真实DOM生成一颗virtual DOM，当virtual DOM某个节点的数据改变后会生成一个新的Vnode，然后Vnode和oldVnode作对比，发现有不一样的地方就直接修改在真实的DOM上，然后使oldVnode的值为Vnode\n\n\n* 找到对应的真实dom，称为el\n* 判断Vnode和oldVnode是否指向同一个对象，如果是，那么直接return\n* 如果他们都有文本节点并且不相等，那么将el的文本节点设置为Vnode的文本节点。\n* 如果oldVnode有子节点而Vnode没有，则删除el的子节点\n* 如果oldVnode没有子节点而Vnode有，则将Vnode的子节点真实化之后添加到el\n* 如果两者都有子节点，则执行updateChildren函数比较子节点，这一步很重要\n\n\n[https://www.cnblogs.com/wind-lanyan/p/9061684.html](https://www.cnblogs.com/wind-lanyan/p/9061684.html)\n\n![](https://images2018.cnblogs.com/blog/998023/201805/998023-20180519213134497-676744027.png)\n\n\n**数组是怎么处理的**\n\n其实数组理论上也是能够监听的（通过循环遍历），基于性能的考虑没有支持\n\n通过拦截器拦截Array的原型，当Array的原型方法被执行时，其实执行的是拦截器的方法（改写原型方法），这样就可以知道有人在修改Array的数据了\n\n**vue路由只变化参数页面组件不更新问题**\n\n1.  watch（监测变化） $route 对象\n2. 给router-view添加一个不同的key，让router-view里面每次都更新，`\n<router-view :key=\"$route.fullPath\"></router-view>`\n3. 在beforeRouteUpdate（在当前路由改变，但是该组件被复用时调用）钩子里获取数据','draft',1,1559622994110),(42,'git常用命令','/blogs/git/git.jpg','记录比较常用但是容易忘记的git命令','>记录比较常用但是容易忘记的git命令\n\n### 远程仓库和本地仓库建立关联\n\n```\ngit remote add origin `git@github.com:justyeh/www.justyeh.top.git`\n```\n\n### 强制使用远程仓库覆盖本地\n\n```\ngit fetch --all && git reset --hard origin/master && git pull\n```\n\n### git checkout`远程分支`没反应\n\ncheckout前先执行fetch更新remote索引， 取回所有分支（branch）的更新\n\n```\ngit fetch\ngit checkout \'remote-branch-name\'\n```\n\n### 分支的操作\n\n```bash\n#查看远程分支\ngit branch -r\n\n#查看所有分支\ngit branch -a\n\n#删除本地分支（不能再当前分支删除自己）\ngit branch -d branch-name\n\n#删除远程分支\ngit push origin :remote-branch-name\n```\n\n### 查看单个文件每次提交的内容差异\n\n```\ngit log -p \'file\'\n```\n\n### 查看某次提交修改的内容\n\n```\ngit show \'commit_id\'\n```\n\n### 提交所有被修改的文件\n\n```\ngit commit -am \'commit message\'\n```','published',1,1559267912654),(43,'github项目收藏','/1556253036420-poster.png','记录我star的一些项目，并做简要的说明','>记录我start的一些项目，并做简要的说明\n\n\n## 工具\n\n**pty.js**\n\n返回一个支持读、写的虚拟终端（terminal），结合webscoket可以实现web终端的工具\n\n[https://github.com/chjj/pty.js](https://github.com/chjj/pty.js)\n\n**shelljs**\n\n这个库能够让我们在js文件中执行shell命令，借住它可以轻松实现自动化部署\n\n```\n//局部模式\nvar shell = require(\'shelljs\');\n//全局模式下，就不需要用shell开头了。\n//require(\'shelljs/global\');\n\nif (shell.exec(\'npm run build\').code !== 0) {//执行npm run build 命令\n  shell.echo(\'Error: Git commit failed\');\n  shell.exit(1);\n}\n\n//由于我的用另外一个仓库存放dist目录，所以这里要将文件增量复制到目标目录。并切换到对应目录。\nshell.cp (\'-r\', \'./dist/*\', \'../../Rychou\');\nshell.cd(\'../../Rychou\');\n\nshell.exec(\'git add .\');\nshell.exec(\"git commit -m \'autocommit\'\")\nshell.exec(\'git push\')\n```\n\n[https://github.com/shelljs/shelljs](https://github.com/shelljs/shelljs)\n\n**doubi**\n\n各种有用的（代理、中转、bt下载、服务器、vpn、dns、http...）脚本集合\n\n[https://github.com/erguotou520/doubi](https://github.com/erguotou520/doubi)\n\n**vue-baidu-map**\n\n基于Vue的百度地图组件库\n\n[https://github.com/Dafrok/vue-baidu-map](https://github.com/Dafrok/vue-baidu-map)\n\n\n**vConsole**\n\n轻量、可扩展的移动端web调试工具\n\n[https://github.com/Tencent/vConsole](https://github.com/Tencent/vConsole)\n\n**vue-skeleton-loading**\n\n一个让我们快速和方便写出自定义骨架屏（skeleton loading）的插件\n\n[https://github.com/jiingwang/vue-skeleton-loading](https://github.com/jiingwang/vue-skeleton-loading)\n\n**elf**\n\n灵活可扩展的 HTML5 构建工具，写H5活动页时可以用到\n\n[https://github.com/o2team/elf](https://github.com/o2team/elf)\n\n\n\n## 编辑器\n\n**editor.md**\n\n功能强大的开源在线 Markdown 编辑器\n\nhttps://github.com/pandao/editor.md\n\n\n**vue-quill-editor**\n\n基于 Quill、适用于 Vue 的富文本编辑器，支持服务端渲染和单页应用\n\n[https://github.com/surmon-china/vue-quill-editor](https://github.com/surmon-china/vue-quill-editor)\n\n\n**CodeMirror**\n\n可以运行在浏览器端的代码编辑器\n\n[https://github.com/codemirror/CodeMirror](https://github.com/codemirror/CodeMirror)\n\n\n## VueUI 框架\n\n**vant**\n\n适合做商城的移动端UI框架\n\n[https://github.com/youzan/vant](https://github.com/youzan/vant)\n\n**muse-ui**\n\nMaterial Design风格的UI框架\n\n[https://github.com/museui/muse-ui](https://github.com/museui/muse-ui)\n\n**mint-ui**\n\nVue移动端UI框架\n\n[https://github.com/ElemeFE/mint-ui](https://github.com/ElemeFE/mint-ui)\n\n## 媒体\n\n**DPlayer**\n\n支持弹幕的开源视频播放器\n\nhttps://github.com/MoePlayer/DPlayer\n\n## 其他\n\n**node-interview**\n\n如何通过饿了么 Node.js 面试？这个库包含完整的后端Nodejs技术栈\n\n[https://github.com/ElemeFE/node-interview/tree/master/sections/zh-cn](https://github.com/ElemeFE/node-interview/tree/master/sections/zh-cn)\n\n\n**effective-javascript**\n\n如何提高自己的JavaScript能力，这个库也许能帮到你\n\n[https://github.com/dreamapplehappy/effective-javascript](https://github.com/dreamapplehappy/effective-javascript)\n','published',1,1556253036428),(44,'前端小脚本','','一些有意思的js脚本','\n### 批量删除微博\n\n```js\ndocument\n    .querySelectorAll(\".WB_feed.WB_feed_v3.WB_feed_v4 >div[mid]\")\n    .forEach((nodeItem, index) => {\n        setTimeout(async () => {\n            try {\n                let res = await fetch(\n                    \"https://weibo.com/aj/mblog/del?ajwvr=6\",\n                    {\n                        method: \"post\",\n                        headers: {\n                            \"Content-Type\":\n                                \"application/x-www-form-urlencoded; charset=UTF-8\"\n                        },\n                        body: \"mid=\" + nodeItem.getAttribute(\"mid\")\n                    }\n                );\n                if ((await res.json()).code === \"100000\") {\n                    nodeItem.remove();\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        }, 500 * index);\n    });\n```','published',1,1557221696508),(45,'使用Charles做本地映射调试线上程序','/1558758775638-poster.png','某些情况下，因为缺失本地环境，又需要对线上的部分文件进行调试，直接修改线上文件有风险，下载、修改、测试、上传一套流程走下来会拖慢进度，这时，我们就可以使用本地映射了。','\n>使用Charles做本地映射，使用本地文件调试线上程序的教程\n\n\n### 适用场景\n\n某些情况下，因为缺失本地环境，又需要对线上的部分文件进行调试，直接修改线上文件有风险，下载、修改、测试、上传一套流程走下来会拖慢进度，这时，我们就可以使用本地映射了。\n\n### 注意\n\n使用Charles时记得关掉浏览器的代理插件，类似Proxy SwitchyOmega之类的工具，否则会导致Charles捕获请求失败。\n\n\n### 使用\n\n**设置本地映射**\n\n1.选中需要代理的应用目录\n\n![step1](/blogs/charles/1.png)\n\n2.选择本地代理\n![step2](/blogs/charles/2.png)\n\n3.使用本地文件进行映射\n\n![step3](/blogs/charles/3.png)\n\n设置成功之后，线上程序请求的其实就是本地文件了。\n\n**取消本地映射**\n\n1.打开Map Local面板\n![step2](/blogs/charles/4.png)\n\n2.可以选择停用/启用本地映射，或者停用/启用/删除某个本地映射\n\n![step3](/blogs/charles/5.png)\n\n### 其他\n\n下载地址\n\n[https://www.charlesproxy.com/download/](https://www.charlesproxy.com/download/)\n\n破解工具\n\n[https://www.zzzmode.com/mytools/charles/](https://www.zzzmode.com/mytools/charles/)\n\n**有能力的话，请支持正版**','published',1,1558758996762),(46,'使用Cloudflare隐藏网站真实IP','','果真是6月运维节，这几天大量网友反映IP被封，我的搬瓦工也不幸中招。在v2ex上了解到可以通过使用Cloudflare来解决此问题，记录一下过程','\n>果真是6月运维节，这几天大量网友反映IP被封，我的搬瓦工也不幸中招。在v2ex上了解到可以通过使用Cloudflare来解决此问题，记录一下过程。\n\n### 关于cloudflare\n\ncloudflare是一家国外的 CDN 加速服务商，提供免费和付费的加速和网站保护服务，国内用户使用此服务后有可能网站加载变得更慢，但至少目前，cloudflare是一个有效并且免费的解决方案。\n\n### 教程\n\n**注册**\n\n浏览器输入cloudflare.com，输入邮箱、密码，点击“Create Account”\n\n![1-register](/blogs/cloudflare/1-register.png)\n\n**添加站点**\n\n注册成功后会提示你输入网址，输入后点击“Add site”\n\n![2-add_site](/blogs/cloudflare/2-add_site.png)\n\n添加成功会提示你他将查询网站的DNS记录，点击“Next”即可\n\n![3-query_dns-recoreds](/blogs/cloudflare/3-query_dns-recoreds.png)\n\n**选择套餐**\n\n这里我选择的是免费的，当然你愿意付费也是可以的，之后点击“Confirm plan”\n\n![4-choose-plan](/blogs/cloudflare/4-choose-plan.png)\n\n之后会弹出确认提示框，点击“Confirm”即可\n\n![5-confirm_plan](/blogs/cloudflare/5-confirm_plan.png)\n\n**域名解析**\n\n你会发现cloudflare已经自动添加了部分域名解析，当然你也可以自己添加、修改和删除解析记录。\n\n注意图中的Status图标，灰色代表不适用cloudflare的CDN服务，黄色代表使用。像我这样IP被封的，都选择使用就行。\n\n配置好之后点击“Continue”\n\n![6-dns_config](/blogs/cloudflare/6-dns_config.png)\n\n**修改域名DNS**\n\n解析配置好之后会提示你修改域名DNS\n\n![7-chage_nameserves](/blogs/cloudflare/7-chage_nameserves.png)\n\n我的域名是万网买的，打开阿里云控制台，选择域名面板并点击你的域名，这时会显示你的域名基本信息\n\n点击修改DNS\n\n![8-update_dns1](/blogs/cloudflare/8-update_dns_1.png)\n\n将cloudflare中的提供的DNS填入到输入框中，点击“确认”\n\n![8-update_dns2](/blogs/cloudflare/8-update_dns_2.png)\n\n**完成**\n\n安装上面的步骤一步步来的话，应该是不会出问题的。最后点击页面左上角你添加的网站，如果出现下面的页面，即代表配置成功。之后（DNS解析需要时间，我这边几分钟就生效了），被封的网站应该就能访问了。\n\n![9-success](/blogs/cloudflare/9-success.png)','published',1,1559635684934),(47,'一道面试题（关于输出结果）','','今天划水的时候看到一个面试题，比较有意思，记录一下。\nfunction Foo() {\n       getName = function(){\n           console.log(\"1\");\n       };\n       return this;\n   }\n   Foo.getName = function() {\n       console.log(\"2\");\n   };\n\n   Foo.prototype.getName = function(){\n       console.log(\"3\");\n   };\n\n   var getName = function() {\n       console.log(\"4\");\n   };\n   function getName(){\n       console.log(\"5\");\n   }\n   Foo.getName(); // 2 \n   getName(); // 4\n   Foo().getName(); //1 ? 4 ? 2 ?报错   \n   getName(); // ?    1\n   new Foo.getName(); //  2\n   new Foo().getName(); // 3\n   new new Foo().getName(); // 3','>今天划水的时候看到一个面试题，比较有意思，记录一下。\n\n### 题目\n\n```\nfunction Foo() {\n	getName = function() {\n		console.log(\"1\");\n	};\n	return this;\n}\nFoo.getName = function() {\n	console.log(\"2\");\n};\n\nFoo.prototype.getName = function() {\n	console.log(\"3\");\n};\n\nvar getName = function() {\n	console.log(\"4\");\n};\nfunction getName() {\n	console.log(\"5\");\n}\nFoo.getName(); //  2\ngetName(); //  4\nFoo().getName(); //  1\ngetName(); //  1\nnew Foo.getName(); //  2\nnew Foo().getName(); //  3\nnew new Foo().getName(); //  3\n\n```\n\n### 说明\n\n**Foo.getName();**\n\n执行函数的静态方法，输出 2\n\n**getName();**\n\n重点在于两种声明函数的方法的区别\n\n解析器会先读取函数声明（ console.log(\"5\")），并使其在执行任何代码之前可以访问，在任何地方调用都不会有问题\n\n而函数表达式（ console.log(\"4\")）则必须等到解析器执行到它所在的代码行才会真正被执行，提前调用会报错\n\n这里输出 4\n\n\n**Foo().getName();**\n执行 Foo 方法导致 window 上的（没有作用域限制，默认是 window ） getName 函数被重新定义\n\n返回的 this 的值取决于执行的位置，此时返回 window\n\n相当于执行 window.getName()，输出1\n\n\n**getName();**\n\n即执行 window.getName()，输出1\n\n\n**new Foo.getName();**\n\n和执行属性有关\n\nFoo.getName()先于new 关键字执行，相当于 new 对象的静态方法，输出 2\n\n\n**new Foo().getName(); **\n\n在 js 中，对象在调用一个方法时会首先在自身里寻找是否有该方法（对象方法），若没有，则去原型链（原型方法）上去寻找，依次层层递进\n\n这里没有对象方法，执行原型方法，输出3\n\n\n**new new Foo().getName();**\n\n这个我自己也比较懵，网友的解释\n\n拆成两步：\n\nvar foo = new Foo() => 实例化一个 Foo\n\nnew foo.getName() => 把原型链上的 getName 方法当作构造函数执行\n\n执行下面这条语句就可以验证了\n\nconsole.log(new new Foo().getName() instanceof Foo.prototype.getName)\n\n\n### 相关博文\n\n[js的方法和属性](/post/33)\n\n\n','published',1,1560247349181);
/*!40000 ALTER TABLE `post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post_tag`
--

DROP TABLE IF EXISTS `post_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post_tag` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `post_id` int(8) NOT NULL COMMENT '角色ID',
  `tag_id` int(8) NOT NULL COMMENT '用户ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=182 DEFAULT CHARSET=utf8 COMMENT='叶文祥的前端博客：文章标签表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post_tag`
--

LOCK TABLES `post_tag` WRITE;
/*!40000 ALTER TABLE `post_tag` DISABLE KEYS */;
INSERT INTO `post_tag` VALUES (3,2,3),(4,4,4),(5,4,5),(7,6,7),(8,7,8),(9,9,9),(10,10,10),(11,11,11),(13,10,11),(15,13,14),(16,14,15),(19,15,11),(20,15,16),(23,18,18),(24,18,17),(25,18,11),(27,20,20),(28,21,17),(29,21,21),(30,22,22),(31,22,23),(32,23,23),(33,26,8),(35,28,25),(36,28,26),(37,9,25),(38,11,27),(39,1,28),(40,20,25),(41,19,13),(42,13,11),(43,21,11),(44,19,4),(45,29,30),(46,29,31),(47,29,32),(48,30,26),(49,30,33),(50,31,25),(51,31,9),(52,32,25),(53,32,34),(56,34,26),(57,34,29),(58,35,36),(61,12,13),(63,33,26),(71,36,37),(80,37,25),(81,37,42),(82,17,15),(83,17,17),(86,5,6),(97,38,29),(98,38,43),(142,39,32),(143,39,43),(144,40,44),(154,43,45),(165,45,46),(166,45,47),(168,42,8),(177,46,48),(178,46,49),(181,47,26);
/*!40000 ALTER TABLE `post_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role`
--

DROP TABLE IF EXISTS `role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL COMMENT '名称',
  `description` varchar(20) DEFAULT NULL COMMENT '描述',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='叶文祥的前端博客：角色表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role`
--

LOCK TABLES `role` WRITE;
/*!40000 ALTER TABLE `role` DISABLE KEYS */;
INSERT INTO `role` VALUES (1,'Administrator','管理员'),(2,'Editor','编辑'),(3,'Author','作者'),(4,'Owner','博客所有者');
/*!40000 ALTER TABLE `role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL COMMENT '名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8 COMMENT='叶文祥的前端博客：标签表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` VALUES (3,'Ghost博客的搭建'),(4,'html'),(5,'meta标签'),(6,'正则'),(7,'微信小程序'),(8,'git'),(9,'flex'),(10,'webuploader'),(11,'插件'),(13,'justyeh'),(14,'导航'),(15,'markdown'),(16,'无缝滚动'),(17,'web编辑器'),(18,'wangEditor'),(20,'isux'),(21,'代码高亮'),(22,'requirejs'),(23,'模块化'),(25,'css'),(26,'js'),(27,'scroll'),(28,'IDE'),(29,'Vue'),(30,'Nuxt.js'),(31,'Node.js'),(32,'Vue.js'),(33,'异步'),(34,'1px'),(36,'video'),(37,'爬虫'),(42,'ios'),(43,'微信分享'),(44,'nginx'),(45,'收藏'),(46,'代理'),(47,'Charles'),(48,'cloudflare'),(49,'服务器');
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL COMMENT '姓名',
  `password` varchar(100) DEFAULT NULL COMMENT '密码',
  `image` varchar(100) DEFAULT NULL COMMENT '头像',
  `email` varchar(20) DEFAULT NULL COMMENT '邮箱',
  `bio` varchar(255) DEFAULT NULL COMMENT '自我描述',
  `website` varchar(50) DEFAULT NULL COMMENT '网址',
  `location` varchar(100) DEFAULT NULL COMMENT '地址',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='叶文祥的前端博客：用户表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'叶文祥','99926e3dab995487ceab34ec1c8b2fd7f99392da',NULL,'justyeh@163.com','码畜，其他没什么好说的！','http://www.justyeh.com','暂住北京');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_role`
--

DROP TABLE IF EXISTS `user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_role` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `role_id` int(8) NOT NULL COMMENT '角色ID',
  `user_id` int(8) NOT NULL COMMENT '用户ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='叶文祥的前端博客：用户角色表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_role`
--

LOCK TABLES `user_role` WRITE;
/*!40000 ALTER TABLE `user_role` DISABLE KEYS */;
INSERT INTO `user_role` VALUES (1,1,1);
/*!40000 ALTER TABLE `user_role` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-06-14 15:27:14
